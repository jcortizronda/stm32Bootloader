
bootloader_STM32F407XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b620  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001934  0800b7b0  0800b7b0  0001b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e4  0800d0e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e4  0800d0e4  0001d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0ec  0800d0ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0f0  0800d0f0  0001d0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000852c  20000070  0800d164  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000859c  0800d164  0002859c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059e4  00000000  00000000  00046a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0004c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  0004d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca46  00000000  00000000  0004e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcd4  00000000  00000000  0007ad5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d78df  00000000  00000000  0009aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  00172364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b798 	.word	0x0800b798

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800b798 	.word	0x0800b798

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bootloaderReadData>:

/*******************************************************************************************/
/******************** IMPLEMENTATION OF BOOTLOADER JUMPING FUNCTIONS ***********************/
/*******************************************************************************************/

void  bootloaderReadData(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
 	while(1)
	{
		MX_LWIP_Process();
 800057c:	f004 f98c 	bl	8004898 <MX_LWIP_Process>
		switch(bootloaderBuffer[1])
 8000580:	4b94      	ldr	r3, [pc, #592]	; (80007d4 <bootloaderReadData+0x25c>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	3b51      	subs	r3, #81	; 0x51
 8000586:	2b54      	cmp	r3, #84	; 0x54
 8000588:	f200 8122 	bhi.w	80007d0 <bootloaderReadData+0x258>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <bootloaderReadData+0x1c>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080006e9 	.word	0x080006e9
 8000598:	080006fb 	.word	0x080006fb
 800059c:	0800070d 	.word	0x0800070d
 80005a0:	08000731 	.word	0x08000731
 80005a4:	08000743 	.word	0x08000743
 80005a8:	08000767 	.word	0x08000767
 80005ac:	08000755 	.word	0x08000755
 80005b0:	0800079d 	.word	0x0800079d
 80005b4:	0800071f 	.word	0x0800071f
 80005b8:	080007d1 	.word	0x080007d1
 80005bc:	08000779 	.word	0x08000779
 80005c0:	080007af 	.word	0x080007af
 80005c4:	0800078b 	.word	0x0800078b
 80005c8:	080007d1 	.word	0x080007d1
 80005cc:	080007d1 	.word	0x080007d1
 80005d0:	080007d1 	.word	0x080007d1
 80005d4:	080007d1 	.word	0x080007d1
 80005d8:	080007d1 	.word	0x080007d1
 80005dc:	080007d1 	.word	0x080007d1
 80005e0:	080007d1 	.word	0x080007d1
 80005e4:	080007d1 	.word	0x080007d1
 80005e8:	080007d1 	.word	0x080007d1
 80005ec:	080007d1 	.word	0x080007d1
 80005f0:	080007d1 	.word	0x080007d1
 80005f4:	080007d1 	.word	0x080007d1
 80005f8:	080007d1 	.word	0x080007d1
 80005fc:	080007d1 	.word	0x080007d1
 8000600:	080007d1 	.word	0x080007d1
 8000604:	080007d1 	.word	0x080007d1
 8000608:	080007d1 	.word	0x080007d1
 800060c:	080007d1 	.word	0x080007d1
 8000610:	080007d1 	.word	0x080007d1
 8000614:	080007d1 	.word	0x080007d1
 8000618:	080007d1 	.word	0x080007d1
 800061c:	080007d1 	.word	0x080007d1
 8000620:	080007d1 	.word	0x080007d1
 8000624:	080007d1 	.word	0x080007d1
 8000628:	080007d1 	.word	0x080007d1
 800062c:	080007d1 	.word	0x080007d1
 8000630:	080007d1 	.word	0x080007d1
 8000634:	080007d1 	.word	0x080007d1
 8000638:	080007d1 	.word	0x080007d1
 800063c:	080007d1 	.word	0x080007d1
 8000640:	080007d1 	.word	0x080007d1
 8000644:	080007d1 	.word	0x080007d1
 8000648:	080007d1 	.word	0x080007d1
 800064c:	080007d1 	.word	0x080007d1
 8000650:	080007d1 	.word	0x080007d1
 8000654:	080007d1 	.word	0x080007d1
 8000658:	080007d1 	.word	0x080007d1
 800065c:	080007d1 	.word	0x080007d1
 8000660:	080007d1 	.word	0x080007d1
 8000664:	080007d1 	.word	0x080007d1
 8000668:	080007d1 	.word	0x080007d1
 800066c:	080007d1 	.word	0x080007d1
 8000670:	080007d1 	.word	0x080007d1
 8000674:	080007d1 	.word	0x080007d1
 8000678:	080007d1 	.word	0x080007d1
 800067c:	080007d1 	.word	0x080007d1
 8000680:	080007d1 	.word	0x080007d1
 8000684:	080007d1 	.word	0x080007d1
 8000688:	080007d1 	.word	0x080007d1
 800068c:	080007d1 	.word	0x080007d1
 8000690:	080007d1 	.word	0x080007d1
 8000694:	080007d1 	.word	0x080007d1
 8000698:	080007d1 	.word	0x080007d1
 800069c:	080007d1 	.word	0x080007d1
 80006a0:	080007d1 	.word	0x080007d1
 80006a4:	080007d1 	.word	0x080007d1
 80006a8:	080007d1 	.word	0x080007d1
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007d1 	.word	0x080007d1
 80006b4:	080007d1 	.word	0x080007d1
 80006b8:	080007d1 	.word	0x080007d1
 80006bc:	080007d1 	.word	0x080007d1
 80006c0:	080007d1 	.word	0x080007d1
 80006c4:	080007d1 	.word	0x080007d1
 80006c8:	080007d1 	.word	0x080007d1
 80006cc:	080007d1 	.word	0x080007d1
 80006d0:	080007d1 	.word	0x080007d1
 80006d4:	080007d1 	.word	0x080007d1
 80006d8:	080007d1 	.word	0x080007d1
 80006dc:	080007d1 	.word	0x080007d1
 80006e0:	080007d1 	.word	0x080007d1
 80006e4:	080007c1 	.word	0x080007c1
		{
            case BL_GET_VER:
                bootloaderHandle_getVer(bootloaderBuffer);
 80006e8:	483a      	ldr	r0, [pc, #232]	; (80007d4 <bootloaderReadData+0x25c>)
 80006ea:	f000 f891 	bl	8000810 <bootloaderHandle_getVer>
                memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	2100      	movs	r1, #0
 80006f2:	4838      	ldr	r0, [pc, #224]	; (80007d4 <bootloaderReadData+0x25c>)
 80006f4:	f00a f836 	bl	800a764 <memset>
                break;
 80006f8:	e06b      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GET_CID:
            	bootloaderHandle_getCid(bootloaderBuffer);
 80006fa:	4836      	ldr	r0, [pc, #216]	; (80007d4 <bootloaderReadData+0x25c>)
 80006fc:	f000 f8be 	bl	800087c <bootloaderHandle_getCid>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000700:	2240      	movs	r2, #64	; 0x40
 8000702:	2100      	movs	r1, #0
 8000704:	4833      	ldr	r0, [pc, #204]	; (80007d4 <bootloaderReadData+0x25c>)
 8000706:	f00a f82d 	bl	800a764 <memset>
                break;
 800070a:	e062      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GET_RDP_STATUS:
            	bootloaderHandle_getRdp(bootloaderBuffer);
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <bootloaderReadData+0x25c>)
 800070e:	f000 f901 	bl	8000914 <bootloaderHandle_getRdp>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	2100      	movs	r1, #0
 8000716:	482f      	ldr	r0, [pc, #188]	; (80007d4 <bootloaderReadData+0x25c>)
 8000718:	f00a f824 	bl	800a764 <memset>
                break;
 800071c:	e059      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_SET_RDP_STATUS:
            	bootloaderHandle_setRdp(bootloaderBuffer);
 800071e:	482d      	ldr	r0, [pc, #180]	; (80007d4 <bootloaderReadData+0x25c>)
 8000720:	f000 f92e 	bl	8000980 <bootloaderHandle_setRdp>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	2100      	movs	r1, #0
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <bootloaderReadData+0x25c>)
 800072a:	f00a f81b 	bl	800a764 <memset>
                break;
 800072e:	e050      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GO_TO_ADDR:
            	bootloaderHandle_go(bootloaderBuffer);
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <bootloaderReadData+0x25c>)
 8000732:	f000 f95f 	bl	80009f4 <bootloaderHandle_go>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	2100      	movs	r1, #0
 800073a:	4826      	ldr	r0, [pc, #152]	; (80007d4 <bootloaderReadData+0x25c>)
 800073c:	f00a f812 	bl	800a764 <memset>
                break;
 8000740:	e047      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_FLASH_ERASE:
            	bootloaderHandle_flashErase(bootloaderBuffer);
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <bootloaderReadData+0x25c>)
 8000744:	f000 f9a8 	bl	8000a98 <bootloaderHandle_flashErase>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	2100      	movs	r1, #0
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <bootloaderReadData+0x25c>)
 800074e:	f00a f809 	bl	800a764 <memset>
                break;
 8000752:	e03e      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_EN_RW_PROTECT:
            	bootloaderHandle_enRwProtect(bootloaderBuffer);
 8000754:	481f      	ldr	r0, [pc, #124]	; (80007d4 <bootloaderReadData+0x25c>)
 8000756:	f000 f9eb 	bl	8000b30 <bootloaderHandle_enRwProtect>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800075a:	2240      	movs	r2, #64	; 0x40
 800075c:	2100      	movs	r1, #0
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <bootloaderReadData+0x25c>)
 8000760:	f00a f800 	bl	800a764 <memset>
                break;
 8000764:	e035      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_SECTOR_P_STATUS:
            	bootloaderHandle_readSectorProtectionStatus(bootloaderBuffer);
 8000766:	481b      	ldr	r0, [pc, #108]	; (80007d4 <bootloaderReadData+0x25c>)
 8000768:	f000 fa2a 	bl	8000bc0 <bootloaderHandle_readSectorProtectionStatus>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	2100      	movs	r1, #0
 8000770:	4818      	ldr	r0, [pc, #96]	; (80007d4 <bootloaderReadData+0x25c>)
 8000772:	f009 fff7 	bl	800a764 <memset>
                break;
 8000776:	e02c      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_WRITE_OTP_AREA:
            	bootloaderHandle_writeOtpArea(bootloaderBuffer);
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <bootloaderReadData+0x25c>)
 800077a:	f000 fabf 	bl	8000cfc <bootloaderHandle_writeOtpArea>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	2100      	movs	r1, #0
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <bootloaderReadData+0x25c>)
 8000784:	f009 ffee 	bl	800a764 <memset>
                break;
 8000788:	e023      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_OTP_AREA_STATUS:
            	bootloaderHandle_readOtpStatus(bootloaderBuffer);
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <bootloaderReadData+0x25c>)
 800078c:	f000 fb26 	bl	8000ddc <bootloaderHandle_readOtpStatus>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000790:	2240      	movs	r2, #64	; 0x40
 8000792:	2100      	movs	r1, #0
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <bootloaderReadData+0x25c>)
 8000796:	f009 ffe5 	bl	800a764 <memset>
                break;
 800079a:	e01a      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_ADDR_VALUE:
            	bootloaderHandle_readAddressValue(bootloaderBuffer);
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <bootloaderReadData+0x25c>)
 800079e:	f000 fa53 	bl	8000c48 <bootloaderHandle_readAddressValue>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	2100      	movs	r1, #0
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <bootloaderReadData+0x25c>)
 80007a8:	f009 ffdc 	bl	800a764 <memset>
                break;
 80007ac:	e011      	b.n	80007d2 <bootloaderReadData+0x25a>

			case BL_DIS_RW_PROTECT:
				bootloaderHandle_disRwProtect(bootloaderBuffer);
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <bootloaderReadData+0x25c>)
 80007b0:	f000 fb8c 	bl	8000ecc <bootloaderHandle_disRwProtect>
				memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	2100      	movs	r1, #0
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <bootloaderReadData+0x25c>)
 80007ba:	f009 ffd3 	bl	800a764 <memset>
                break;
 80007be:	e008      	b.n	80007d2 <bootloaderReadData+0x25a>

			case BL_SERVER_CONNECTED:
				bootloaderHandle_serverConnected();
 80007c0:	f000 fbc9 	bl	8000f56 <bootloaderHandle_serverConnected>
				memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	2100      	movs	r1, #0
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <bootloaderReadData+0x25c>)
 80007ca:	f009 ffcb 	bl	800a764 <memset>
                break;
 80007ce:	e000      	b.n	80007d2 <bootloaderReadData+0x25a>

             default:
                break;
 80007d0:	bf00      	nop
		MX_LWIP_Process();
 80007d2:	e6d3      	b.n	800057c <bootloaderReadData+0x4>
 80007d4:	200001f0 	.word	0x200001f0

080007d8 <bootloaderJumpToUserApp>:
		}
	}
}

/* Code to jump to user application. We assume that FLASH_SECTOR2_BASE_ADDRESS is where it is stored */
void bootloaderJumpToUserApp(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
	   //just a function pointer to hold the address of the reset handler of the user app.
	    void (*appResetHandler)(void);

	    // 1. configure the MSP by reading the value from the base address of the sector 4
	    uint32_t mspValue = *(volatile uint32_t *)FLASH_APP_BASE_ADDRESS;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <bootloaderJumpToUserApp+0x30>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f383 8808 	msr	MSP, r3
}
 80007ee:	bf00      	nop
	    __set_MSP(mspValue);
	    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;
	    /* 2. Now fetch the reset handler address of the user application
	     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	     */
	    uint32_t resetHandlerAddress = *(volatile uint32_t *) (FLASH_APP_BASE_ADDRESS + 4);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <bootloaderJumpToUserApp+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60bb      	str	r3, [r7, #8]

	    appResetHandler = (void*) resetHandlerAddress;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	607b      	str	r3, [r7, #4]

	    //3. jump to reset handler of the user application
	    appResetHandler();
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4798      	blx	r3

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08010000 	.word	0x08010000
 800080c:	08010004 	.word	0x08010004

08000810 <bootloaderHandle_getVer>:
/*******************************************************************************************/
/******************** IMPLEMENTATION OF BOOTLOADER COMMAND FUNCTIONS ***********************/
/*******************************************************************************************/

/*Helper function to handle BL_GET_VER command */
static void bootloaderHandle_getVer(uint8_t *bootloaderBuffer) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t blVersionResponse[2] = {0};
 8000818:	2300      	movs	r3, #0
 800081a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3b04      	subs	r3, #4
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3b04      	subs	r3, #4
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fdd5 	bl	80013e8 <verifyCRC>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00c      	beq.n	8000870 <bootloaderHandle_getVer+0x60>
		blVersionResponse[0] = BL_GET_VER;
 8000856:	2351      	movs	r3, #81	; 0x51
 8000858:	733b      	strb	r3, [r7, #12]
		blVersionResponse[1] = getBootloaderVersion();
 800085a:	f000 fb8a 	bl	8000f72 <getBootloaderVersion>
 800085e:	4603      	mov	r3, r0
 8000860:	737b      	strb	r3, [r7, #13]
		sendData(blVersionResponse, 2);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2102      	movs	r1, #2
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fd89 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 800086e:	e001      	b.n	8000874 <bootloaderHandle_getVer+0x64>
		sendNACK();
 8000870:	f000 fdac 	bl	80013cc <sendNACK>
}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <bootloaderHandle_getCid>:

/*Helper function to handle BL_GET_CID command */
static void bootloaderHandle_getCid(uint8_t *bootloaderBuffer) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint8_t blCidNum[5] = { 0 };
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	2300      	movs	r3, #0
 800088a:	743b      	strb	r3, [r7, #16]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	3b04      	subs	r3, #4
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	61bb      	str	r3, [r7, #24]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	3b04      	subs	r3, #4
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4619      	mov	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 fd9d 	bl	80013e8 <verifyCRC>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]
	if (crcVerification == false) {
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	f083 0301 	eor.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d020      	beq.n	8000908 <bootloaderHandle_getCid+0x8c>
		uint16_t chipID = getMCUChipID();
 80008c6:	f000 fb5d 	bl	8000f84 <getMCUChipID>
 80008ca:	4603      	mov	r3, r0
 80008cc:	82bb      	strh	r3, [r7, #20]
		uint16_t chipRev = getMCUChipRev();
 80008ce:	f000 fb6b 	bl	8000fa8 <getMCUChipRev>
 80008d2:	4603      	mov	r3, r0
 80008d4:	827b      	strh	r3, [r7, #18]
		blCidNum[0] = BL_GET_CID;
 80008d6:	2352      	movs	r3, #82	; 0x52
 80008d8:	733b      	strb	r3, [r7, #12]
		blCidNum[1] = chipID >> 8;
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	737b      	strb	r3, [r7, #13]
		blCidNum[2] = chipID;
 80008e4:	8abb      	ldrh	r3, [r7, #20]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	73bb      	strb	r3, [r7, #14]
		blCidNum[3] = chipRev >> 8;
 80008ea:	8a7b      	ldrh	r3, [r7, #18]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
		blCidNum[4] = chipRev;
 80008f4:	8a7b      	ldrh	r3, [r7, #18]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	743b      	strb	r3, [r7, #16]
		sendData((uint8_t*) &blCidNum, 5);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2105      	movs	r1, #5
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd3d 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000906:	e001      	b.n	800090c <bootloaderHandle_getCid+0x90>
		sendNACK();
 8000908:	f000 fd60 	bl	80013cc <sendNACK>
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <bootloaderHandle_getRdp>:

/*Helper function to handle BL_GET_RDP_STATUS command */
static void bootloaderHandle_getRdp(uint8_t *bootloaderBuffer) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel[2] = {0};
 800091c:	2300      	movs	r3, #0
 800091e:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3b04      	subs	r3, #4
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3b04      	subs	r3, #4
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4619      	mov	r1, r3
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 fd53 	bl	80013e8 <verifyCRC>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00c      	beq.n	8000974 <bootloaderHandle_getRdp+0x60>
		rdpLevel[0] = BL_GET_RDP_STATUS;
 800095a:	2353      	movs	r3, #83	; 0x53
 800095c:	733b      	strb	r3, [r7, #12]
		rdpLevel[1] = getFlashRdpLevel();
 800095e:	f000 fb33 	bl	8000fc8 <getFlashRdpLevel>
 8000962:	4603      	mov	r3, r0
 8000964:	737b      	strb	r3, [r7, #13]
		sendData(rdpLevel, 2);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd07 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000972:	e001      	b.n	8000978 <bootloaderHandle_getRdp+0x64>
		sendNACK();
 8000974:	f000 fd2a 	bl	80013cc <sendNACK>
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <bootloaderHandle_setRdp>:

/*Helper function to handle BL_SET_RDP_STATUS command */
static void bootloaderHandle_setRdp(uint8_t *bootloaderBuffer) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel[2] = {0};
 8000988:	2300      	movs	r3, #0
 800098a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3b04      	subs	r3, #4
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3b04      	subs	r3, #4
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fd1d 	bl	80013e8 <verifyCRC>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d010      	beq.n	80009e8 <bootloaderHandle_setRdp+0x68>
		rdpLevel[0] = BL_SET_RDP_STATUS;
 80009c6:	2359      	movs	r3, #89	; 0x59
 80009c8:	733b      	strb	r3, [r7, #12]
		rdpLevel[1] = setFlashRdpLevel(bootloaderBuffer[2]);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fb09 	bl	8000fe8 <setFlashRdpLevel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	737b      	strb	r3, [r7, #13]
		sendData(rdpLevel, 2);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fccd 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 80009e6:	e001      	b.n	80009ec <bootloaderHandle_setRdp+0x6c>
		sendNACK();
 80009e8:	f000 fcf0 	bl	80013cc <sendNACK>
}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <bootloaderHandle_go>:

 /*Helper function to handle BL_GO_TO_ADDR command */
static void bootloaderHandle_go(uint8_t *bootloaderBuffer) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint32_t goAddress = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
	uint8_t addrValidation[2] = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	813b      	strh	r3, [r7, #8]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	617b      	str	r3, [r7, #20]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 fce1 	bl	80013e8 <verifyCRC>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	74fb      	strb	r3, [r7, #19]
	if (crcVerification == false) {
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	f083 0301 	eor.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d025      	beq.n	8000a8a <bootloaderHandle_go+0x96>
		//Extract the go address
		goAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a44:	61fb      	str	r3, [r7, #28]
		addrValidation[0] = BL_GO_TO_ADDR;
 8000a46:	2354      	movs	r3, #84	; 0x54
 8000a48:	723b      	strb	r3, [r7, #8]
		if (verifyAddress(goAddress, Go) == ADDR_VALID) {
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	69f8      	ldr	r0, [r7, #28]
 8000a4e:	f000 fb23 	bl	8001098 <verifyAddress>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <bootloaderHandle_go+0x84>
			//Tell host that address is fine
			addrValidation[1] = ADDR_VALID;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	727b      	strb	r3, [r7, #9]
			sendData(addrValidation, 2);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fc8c 	bl	8001380 <sendData>
			 host must ensure that valid code is present over there
			 Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY
			goAddress += 1; //make T bit =1
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]

			void (*jumpToAddress)(void) = (void *)goAddress;
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	60fb      	str	r3, [r7, #12]

			jumpToAddress();
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4798      	blx	r3
			sendData(addrValidation, 2);
		}
	} else {
		sendNACK();
	}
}
 8000a76:	e00a      	b.n	8000a8e <bootloaderHandle_go+0x9a>
			addrValidation[1] = ADDR_INVALID;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	727b      	strb	r3, [r7, #9]
			sendData(addrValidation, 2);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fc7c 	bl	8001380 <sendData>
}
 8000a88:	e001      	b.n	8000a8e <bootloaderHandle_go+0x9a>
		sendNACK();
 8000a8a:	f000 fc9f 	bl	80013cc <sendNACK>
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <bootloaderHandle_flashErase>:

 /*Helper function to handle BL_FLASH_ERASE command */
static void bootloaderHandle_flashErase(uint8_t * bootloaderBuffer){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	   uint8_t eraseStatus[2] = {0};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]

		//Total length of the command packet
		uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]

		//Extract the CRC32 sent by the Host
		uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]

		bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3b04      	subs	r3, #4
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 fc91 	bl	80013e8 <verifyCRC>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
		if (crcVerification == false) {
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d020      	beq.n	8000b20 <bootloaderHandle_flashErase+0x88>

#ifdef LED_FLASH_STATUS
	        HAL_GPIO_WritePin(LED_FLASH_PORT, LED_FLASH_PIN, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <bootloaderHandle_flashErase+0x94>)
 8000ae6:	f003 f93f 	bl	8003d68 <HAL_GPIO_WritePin>
#endif
	        eraseStatus[0] = BL_FLASH_ERASE;
 8000aea:	2355      	movs	r3, #85	; 0x55
 8000aec:	733b      	strb	r3, [r7, #12]
	        eraseStatus[1] = executeFlashErase(bootloaderBuffer[2] , bootloaderBuffer[3]);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3302      	adds	r3, #2
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3303      	adds	r3, #3
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f000 fb5f 	bl	80011c0 <executeFlashErase>
 8000b02:	4603      	mov	r3, r0
 8000b04:	737b      	strb	r3, [r7, #13]
#ifdef LED_FLASH_STATUS
	        HAL_GPIO_WritePin(LED_FLASH_PORT, LED_FLASH_PIN, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <bootloaderHandle_flashErase+0x94>)
 8000b0e:	f003 f92b 	bl	8003d68 <HAL_GPIO_WritePin>
#endif
	        sendData(eraseStatus, 2);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2102      	movs	r1, #2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fc31 	bl	8001380 <sendData>
		}
		else{
	        sendNACK();
		}
 }
 8000b1e:	e001      	b.n	8000b24 <bootloaderHandle_flashErase+0x8c>
	        sendNACK();
 8000b20:	f000 fc54 	bl	80013cc <sendNACK>
 }
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <bootloaderHandle_enRwProtect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
static void bootloaderHandle_enRwProtect(uint8_t *bootloaderBuffer) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint8_t status[2] = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3b04      	subs	r3, #4
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3b04      	subs	r3, #4
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fc45 	bl	80013e8 <verifyCRC>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d01d      	beq.n	8000bb2 <bootloaderHandle_enRwProtect+0x82>

		status[0] = BL_EN_RW_PROTECT;
 8000b76:	2357      	movs	r3, #87	; 0x57
 8000b78:	733b      	strb	r3, [r7, #12]
		status[1] = configureFlashSectorRwProtection(bootloaderBuffer[3] << 8 | bootloaderBuffer[2], bootloaderBuffer[4], 0);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3302      	adds	r3, #2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	b298      	uxth	r0, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3304      	adds	r3, #4
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f000 fb58 	bl	8001250 <configureFlashSectorRwProtection>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	737b      	strb	r3, [r7, #13]
		sendData(status, 2);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fbe8 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000bb0:	e001      	b.n	8000bb6 <bootloaderHandle_enRwProtect+0x86>
		sendNACK();
 8000bb2:	f000 fc0b 	bl	80013cc <sendNACK>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <bootloaderHandle_readSectorProtectionStatus>:

/*Helper function to handle BL_READ_SECTOR_P_STATUS command */
static void bootloaderHandle_readSectorProtectionStatus(uint8_t *bootloaderBuffer) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = { 0 };
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <bootloaderHandle_readSectorProtectionStatus+0x84>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	81bb      	strh	r3, [r7, #12]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3b04      	subs	r3, #4
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 fbfa 	bl	80013e8 <verifyCRC>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d014      	beq.n	8000c36 <bootloaderHandle_readSectorProtectionStatus+0x76>

		status[0] = BL_READ_SECTOR_P_STATUS;
 8000c0c:	2356      	movs	r3, #86	; 0x56
 8000c0e:	733b      	strb	r3, [r7, #12]
		status[1] = readOBRwProtectionStatus() >> 8;
 8000c10:	f000 fb96 	bl	8001340 <readOBRwProtectionStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	737b      	strb	r3, [r7, #13]
		status[2] = readOBRwProtectionStatus();
 8000c1e:	f000 fb8f 	bl	8001340 <readOBRwProtectionStatus>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	73bb      	strb	r3, [r7, #14]
		sendData(status, 3);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fba6 	bl	8001380 <sendData>

	} else {
		sendNACK();
	}
}
 8000c34:	e001      	b.n	8000c3a <bootloaderHandle_readSectorProtectionStatus+0x7a>
		sendNACK();
 8000c36:	f000 fbc9 	bl	80013cc <sendNACK>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800b7b0 	.word	0x0800b7b0

08000c48 <bootloaderHandle_readAddressValue>:

 /*Helper function to handle BL_READ_ADDR_VALUE command */
static void bootloaderHandle_readAddressValue(uint8_t * bootloaderBuffer){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t status[5] = {0};
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
	uint32_t readAddress = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
	uint32_t readValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3b04      	subs	r3, #4
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 fbb3 	bl	80013e8 <verifyCRC>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	f083 0301 	eor.w	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d02a      	beq.n	8000cf0 <bootloaderHandle_readAddressValue+0xa8>
		status[0]   = BL_READ_ADDR_VALUE;
 8000c9a:	2358      	movs	r3, #88	; 0x58
 8000c9c:	723b      	strb	r3, [r7, #8]
		readAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ca4:	61fb      	str	r3, [r7, #28]
		if (verifyAddress(readAddress, Read) == ADDR_VALID) {
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	69f8      	ldr	r0, [r7, #28]
 8000caa:	f000 f9f5 	bl	8001098 <verifyAddress>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d114      	bne.n	8000cde <bootloaderHandle_readAddressValue+0x96>
			readValue   = *((uint32_t*) readAddress);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61bb      	str	r3, [r7, #24]
			status[1]	= ADDR_VALID;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	727b      	strb	r3, [r7, #9]
			status[2]   = readValue >> 24;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	0e1b      	lsrs	r3, r3, #24
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
			status[3]   = readValue >> 16;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	72fb      	strb	r3, [r7, #11]
			status[4]   = readValue >> 8;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	733b      	strb	r3, [r7, #12]
			status[5]   = readValue;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	737b      	strb	r3, [r7, #13]
 8000cdc:	e001      	b.n	8000ce2 <bootloaderHandle_readAddressValue+0x9a>
		}
		else {
			status[1]	= ADDR_INVALID;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	727b      	strb	r3, [r7, #9]
		}
		sendData(status, 6);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fb49 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
 }
 8000cee:	e001      	b.n	8000cf4 <bootloaderHandle_readAddressValue+0xac>
		sendNACK();
 8000cf0:	f000 fb6c 	bl	80013cc <sendNACK>
 }
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <bootloaderHandle_writeOtpArea>:

/*Helper function to handle BL_WRITE_OTP_AREA command */
static void bootloaderHandle_writeOtpArea(uint8_t * bootloaderBuffer){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = {0};
 8000d04:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <bootloaderHandle_writeOtpArea+0xdc>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	81bb      	strh	r3, [r7, #12]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73bb      	strb	r3, [r7, #14]
	uint32_t writeAddress = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t writeStatus = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]


	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b04      	subs	r3, #4
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b04      	subs	r3, #4
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 fb58 	bl	80013e8 <verifyCRC>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]
	if (crcVerification == false) {
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d03d      	beq.n	8000dcc <bootloaderHandle_writeOtpArea+0xd0>
		status[0]   = BL_WRITE_OTP_AREA;
 8000d50:	235b      	movs	r3, #91	; 0x5b
 8000d52:	733b      	strb	r3, [r7, #12]
		writeAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (verifyAddress(writeAddress, Otp) == ADDR_VALID) {
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d60:	f000 f99a 	bl	8001098 <verifyAddress>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d127      	bne.n	8000dba <bootloaderHandle_writeOtpArea+0xbe>
			HAL_FLASH_Unlock();
 8000d6a:	f002 fb29 	bl	80033c0 <HAL_FLASH_Unlock>

			uint32_t writeValue = bootloaderBuffer[6] + (bootloaderBuffer[7] << 8) + (bootloaderBuffer[8] << 16) + (bootloaderBuffer[9] << 24);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3306      	adds	r3, #6
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3307      	adds	r3, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	441a      	add	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3308      	adds	r3, #8
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	441a      	add	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3309      	adds	r3, #9
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	061b      	lsls	r3, r3, #24
 8000d92:	4413      	add	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
			writeStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, writeAddress,  writeValue);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fab9 	bl	8003318 <HAL_FLASH_Program>
 8000da6:	4603      	mov	r3, r0
 8000da8:	623b      	str	r3, [r7, #32]

			HAL_FLASH_Lock();
 8000daa:	f002 fb2b 	bl	8003404 <HAL_FLASH_Lock>

			status[1]	= ADDR_VALID;
 8000dae:	2300      	movs	r3, #0
 8000db0:	737b      	strb	r3, [r7, #13]
			status[2]	= writeStatus;
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	e001      	b.n	8000dbe <bootloaderHandle_writeOtpArea+0xc2>
		}
		else {
			status[1]	= ADDR_INVALID;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	737b      	strb	r3, [r7, #13]
		}
		sendData(status, 6);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fadb 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000dca:	e001      	b.n	8000dd0 <bootloaderHandle_writeOtpArea+0xd4>
		sendNACK();
 8000dcc:	f000 fafe 	bl	80013cc <sendNACK>
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	0800b7b0 	.word	0x0800b7b0

08000ddc <bootloaderHandle_readOtpStatus>:

/*Helper function to handle BL_READ_OTP_AREA_STATE */
static void bootloaderHandle_readOtpStatus(uint8_t *bootloaderBuffer) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = {0};
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <bootloaderHandle_readOtpStatus+0xe8>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	813b      	strh	r3, [r7, #8]
 8000dea:	2300      	movs	r3, #0
 8000dec:	72bb      	strb	r3, [r7, #10]
	uint16_t otpTotalState = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	83fb      	strh	r3, [r7, #30]
	uint32_t otpBlockState = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
	uint32_t * otpAddress = (uint32_t *) OPT_LOCK_BASE;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <bootloaderHandle_readOtpStatus+0xec>)
 8000df8:	617b      	str	r3, [r7, #20]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3b04      	subs	r3, #4
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	3b04      	subs	r3, #4
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4619      	mov	r1, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fae6 	bl	80013e8 <verifyCRC>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	72fb      	strb	r3, [r7, #11]
	if (crcVerification == false) {
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d041      	beq.n	8000eb8 <bootloaderHandle_readOtpStatus+0xdc>
		status[0]   = BL_READ_OTP_AREA_STATUS;
 8000e34:	235d      	movs	r3, #93	; 0x5d
 8000e36:	723b      	strb	r3, [r7, #8]
		uint8_t i = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 4; i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	777b      	strb	r3, [r7, #29]
 8000e40:	e028      	b.n	8000e94 <bootloaderHandle_readOtpStatus+0xb8>
			otpBlockState = *((uint32_t*) (otpAddress + i ));
 8000e42:	7f7b      	ldrb	r3, [r7, #29]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
			uint8_t j = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	773b      	strb	r3, [r7, #28]
			for (j = 0; j < 4; j++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	773b      	strb	r3, [r7, #28]
 8000e56:	e017      	b.n	8000e88 <bootloaderHandle_readOtpStatus+0xac>
				if( (0xFF & (otpBlockState >> (j * 8))) == RESET){
 8000e58:	7f3b      	ldrb	r3, [r7, #28]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10c      	bne.n	8000e82 <bootloaderHandle_readOtpStatus+0xa6>
					otpTotalState |= 0x01 << (4*i + j);
 8000e68:	7f7b      	ldrb	r3, [r7, #29]
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	7f3b      	ldrb	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	83fb      	strh	r3, [r7, #30]
			for (j = 0; j < 4; j++){
 8000e82:	7f3b      	ldrb	r3, [r7, #28]
 8000e84:	3301      	adds	r3, #1
 8000e86:	773b      	strb	r3, [r7, #28]
 8000e88:	7f3b      	ldrb	r3, [r7, #28]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d9e4      	bls.n	8000e58 <bootloaderHandle_readOtpStatus+0x7c>
		for (i = 0; i < 4; i++){
 8000e8e:	7f7b      	ldrb	r3, [r7, #29]
 8000e90:	3301      	adds	r3, #1
 8000e92:	777b      	strb	r3, [r7, #29]
 8000e94:	7f7b      	ldrb	r3, [r7, #29]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d9d3      	bls.n	8000e42 <bootloaderHandle_readOtpStatus+0x66>
				}
			}

		}
		status[1] = otpTotalState >> 8;
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	727b      	strb	r3, [r7, #9]
		status[2] = otpTotalState;
 8000ea4:	8bfb      	ldrh	r3, [r7, #30]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	72bb      	strb	r3, [r7, #10]
		sendData(status, 3);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2103      	movs	r1, #3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fa65 	bl	8001380 <sendData>

	} else {
		sendNACK();
	}
}
 8000eb6:	e001      	b.n	8000ebc <bootloaderHandle_readOtpStatus+0xe0>
		sendNACK();
 8000eb8:	f000 fa88 	bl	80013cc <sendNACK>
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800b7b0 	.word	0x0800b7b0
 8000ec8:	1fff7a00 	.word	0x1fff7a00

08000ecc <bootloaderHandle_disRwProtect>:

/*Helper function to handle BL_OTP_READ command */
static void bootloaderHandle_disRwProtect(uint8_t *bootloaderBuffer) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	uint8_t status[2] = {0};
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fa77 	bl	80013e8 <verifyCRC>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01b      	beq.n	8000f4a <bootloaderHandle_disRwProtect+0x7e>

		status[0] = BL_DIS_RW_PROTECT;
 8000f12:	235c      	movs	r3, #92	; 0x5c
 8000f14:	733b      	strb	r3, [r7, #12]
		status[1] = configureFlashSectorRwProtection(bootloaderBuffer[3] << 8 | bootloaderBuffer[2], 0, 1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3302      	adds	r3, #2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f98c 	bl	8001250 <configureFlashSectorRwProtection>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	737b      	strb	r3, [r7, #13]

		sendData(status, 2);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fa1c 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000f48:	e001      	b.n	8000f4e <bootloaderHandle_disRwProtect+0x82>
		sendNACK();
 8000f4a:	f000 fa3f 	bl	80013cc <sendNACK>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <bootloaderHandle_serverConnected>:

static void bootloaderHandle_serverConnected(void){
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
	uint8_t ackBuf;
	 ackBuf = BL_ACK;
 8000f5c:	23a5      	movs	r3, #165	; 0xa5
 8000f5e:	71fb      	strb	r3, [r7, #7]
	 sendData(&ackBuf, 1);
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa0b 	bl	8001380 <sendData>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <getBootloaderVersion>:

static uint8_t getBootloaderVersion(void){
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
	 return (uint8_t) BL_VERSION;
 8000f76:	230b      	movs	r3, #11
 }
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <getMCUChipID>:

 //Read the chip identifier or device Identifier
static uint16_t getMCUChipID(void)
 {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 	and the die revision. It is part of the DBG_MCU component and is mapped on the
 	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
 	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
 	It is even accessible while the MCU is under system reset. */
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <getMCUChipID+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f94:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 }
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e0042000 	.word	0xe0042000

08000fa8 <getMCUChipRev>:

//Read the revision chip ID
static uint16_t getMCUChipRev(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
	uint16_t cRev;
	cRev = (uint16_t)(((DBGMCU->IDCODE) & 0xFFFF0000) >> 16);
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <getMCUChipRev+0x1c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	80fb      	strh	r3, [r7, #6]
	return  cRev;
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e0042000 	.word	0xe0042000

08000fc8 <getFlashRdpLevel>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f407xx RM
 */
static uint8_t getFlashRdpLevel(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
	uint8_t rdpStatus = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	77fb      	strb	r3, [r7, #31]
	FLASH_OBProgramInitTypeDef  obHandle;
	HAL_FLASHEx_OBGetConfig(&obHandle);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fbf1 	bl	80037bc <HAL_FLASHEx_OBGetConfig>
	rdpStatus = (uint8_t)obHandle.RDPLevel;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	77fb      	strb	r3, [r7, #31]

	//volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
	//rdpStatus =  (uint8_t)(*pOB_addr >> 8);
	return rdpStatus;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <setFlashRdpLevel>:

/*This function sets the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f407xx RM
 */
static uint8_t setFlashRdpLevel(uint8_t rdpLevel){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]

	 //Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <setFlashRdpLevel+0xa8>)
 8000ff4:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]

	//Option byte configuration unlock
	HAL_FLASH_OB_Unlock();
 8000ffa:	f002 fa13 	bl	8003424 <HAL_FLASH_OB_Unlock>
	//Wait till no active operation on flash
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000ffe:	bf00      	nop
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <setFlashRdpLevel+0xac>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f9      	bne.n	8001000 <setFlashRdpLevel+0x18>

	switch(rdpLevel){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d020      	beq.n	8001054 <setFlashRdpLevel+0x6c>
 8001012:	2b02      	cmp	r3, #2
 8001014:	dc2b      	bgt.n	800106e <setFlashRdpLevel+0x86>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <setFlashRdpLevel+0x38>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00d      	beq.n	800103a <setFlashRdpLevel+0x52>
 800101e:	e026      	b.n	800106e <setFlashRdpLevel+0x86>
					case 0:
						*pOPTCR |= (0xAA << 8);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f443 422a 	orr.w	r2, r3, #43520	; 0xaa00
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f043 0202 	orr.w	r2, r3, #2
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	601a      	str	r2, [r3, #0]
						break;
 8001038:	e01c      	b.n	8001074 <setFlashRdpLevel+0x8c>
					case 1:
						*pOPTCR |= (0x55 << 8);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f043 0202 	orr.w	r2, r3, #2
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	601a      	str	r2, [r3, #0]
						break;
 8001052:	e00f      	b.n	8001074 <setFlashRdpLevel+0x8c>
					case 2:
						*pOPTCR |= (0xCC << 8);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f443 424c 	orr.w	r2, r3, #52224	; 0xcc00
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f043 0202 	orr.w	r2, r3, #2
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	601a      	str	r2, [r3, #0]
						break;
 800106c:	e002      	b.n	8001074 <setFlashRdpLevel+0x8c>
					default:
						status = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
						break;
 8001072:	bf00      	nop
	}

	//Wait till no active operation on flash
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001074:	bf00      	nop
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <setFlashRdpLevel+0xac>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f9      	bne.n	8001076 <setFlashRdpLevel+0x8e>
	HAL_FLASH_OB_Lock();
 8001082:	f002 f9eb 	bl	800345c <HAL_FLASH_OB_Lock>

	return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023c14 	.word	0x40023c14
 8001094:	40023c00 	.word	0x40023c00

08001098 <verifyAddress>:

//Verify the address sent by the host .
static uint8_t verifyAddress(uint32_t checkAddress, verifyAddressOption verifyOption) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]

	if (verifyOption == Read)
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d133      	bne.n	8001112 <verifyAddress+0x7a>
	{
		if (checkAddress >= FLASH_OTP_BASE && checkAddress <= FLASH_OTP_END) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <verifyAddress+0x100>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d905      	bls.n	80010be <verifyAddress+0x26>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a39      	ldr	r2, [pc, #228]	; (800119c <verifyAddress+0x104>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d801      	bhi.n	80010be <verifyAddress+0x26>
			return ADDR_VALID;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e066      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= CCMDATARAM_BASE && checkAddress <= CCM_RAM_END) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010c4:	d305      	bcc.n	80010d2 <verifyAddress+0x3a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <verifyAddress+0x108>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d801      	bhi.n	80010d2 <verifyAddress+0x3a>
			return ADDR_VALID;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e05c      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= OTP_AREA_BASE && checkAddress <= OTP_AREA_END) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a30      	ldr	r2, [pc, #192]	; (8001198 <verifyAddress+0x100>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d905      	bls.n	80010e6 <verifyAddress+0x4e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <verifyAddress+0x10c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d801      	bhi.n	80010e6 <verifyAddress+0x4e>
			return ADDR_VALID;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e052      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= OPT_BYTES_BASE && checkAddress <= OPT_BYTES_END) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <verifyAddress+0x110>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d905      	bls.n	80010fa <verifyAddress+0x62>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <verifyAddress+0x114>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d801      	bhi.n	80010fa <verifyAddress+0x62>
			return ADDR_VALID;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e048      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= FLASH_BASE && checkAddress <= FLASH_END) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001100:	d305      	bcc.n	800110e <verifyAddress+0x76>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001108:	d201      	bcs.n	800110e <verifyAddress+0x76>
			return ADDR_VALID;
 800110a:	2300      	movs	r3, #0
 800110c:	e03e      	b.n	800118c <verifyAddress+0xf4>
		} else {
			return ADDR_INVALID;
 800110e:	2301      	movs	r3, #1
 8001110:	e03c      	b.n	800118c <verifyAddress+0xf4>
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	else if (verifyOption == Go)
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d129      	bne.n	800116c <verifyAddress+0xd4>
	{
		if (checkAddress >= SRAM1_BASE && checkAddress <= SRAM1_END) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111e:	d305      	bcc.n	800112c <verifyAddress+0x94>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <verifyAddress+0x118>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d801      	bhi.n	800112c <verifyAddress+0x94>
			return ADDR_VALID;
 8001128:	2300      	movs	r3, #0
 800112a:	e02f      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= SRAM2_BASE && checkAddress <= SRAM2_END) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <verifyAddress+0x118>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d305      	bcc.n	8001140 <verifyAddress+0xa8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <verifyAddress+0x11c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d801      	bhi.n	8001140 <verifyAddress+0xa8>
			return ADDR_VALID;
 800113c:	2300      	movs	r3, #0
 800113e:	e025      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= FLASH_BASE && checkAddress <= FLASH_END) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001146:	d305      	bcc.n	8001154 <verifyAddress+0xbc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800114e:	d201      	bcs.n	8001154 <verifyAddress+0xbc>
			return ADDR_VALID;
 8001150:	2300      	movs	r3, #0
 8001152:	e01b      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= BKPSRAM_BASE && checkAddress <= BKPSRAM_END) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <verifyAddress+0x120>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d305      	bcc.n	8001168 <verifyAddress+0xd0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <verifyAddress+0x124>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d801      	bhi.n	8001168 <verifyAddress+0xd0>
			return ADDR_VALID;
 8001164:	2300      	movs	r3, #0
 8001166:	e011      	b.n	800118c <verifyAddress+0xf4>
		} else {
			return ADDR_INVALID;
 8001168:	2301      	movs	r3, #1
 800116a:	e00f      	b.n	800118c <verifyAddress+0xf4>
		}
	}
	else if (verifyOption == Otp){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d10b      	bne.n	800118a <verifyAddress+0xf2>
		if (checkAddress >= OTP_AREA_BASE && checkAddress <= OTP_AREA_END) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <verifyAddress+0x100>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d905      	bls.n	8001186 <verifyAddress+0xee>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <verifyAddress+0x10c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d801      	bhi.n	8001186 <verifyAddress+0xee>
			return ADDR_VALID;
 8001182:	2300      	movs	r3, #0
 8001184:	e002      	b.n	800118c <verifyAddress+0xf4>
		}
		else {
			return ADDR_INVALID;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <verifyAddress+0xf4>
		}
	}
	return ADDR_INVALID;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	1fff77ff 	.word	0x1fff77ff
 800119c:	1fff7a0f 	.word	0x1fff7a0f
 80011a0:	10010000 	.word	0x10010000
 80011a4:	1fff7aff 	.word	0x1fff7aff
 80011a8:	1fffbfff 	.word	0x1fffbfff
 80011ac:	1fffc00f 	.word	0x1fffc00f
 80011b0:	2001c000 	.word	0x2001c000
 80011b4:	20020000 	.word	0x20020000
 80011b8:	40024000 	.word	0x40024000
 80011bc:	40025000 	.word	0x40025000

080011c0 <executeFlashErase>:

static uint8_t executeFlashErase(uint8_t sectorNumber, uint8_t numberOfSectors) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	// if sectorNumber = 0xff , that means mass erase !
	FLASH_EraseInitTypeDef flashEraseHandle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (numberOfSectors > MCU_NUMBER_OF_SECTORS)
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d901      	bls.n	80011da <executeFlashErase+0x1a>
		return INVALID_SECTOR;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e035      	b.n	8001246 <executeFlashErase+0x86>

	if ((sectorNumber == 0xff) || (sectorNumber <= (MCU_NUMBER_OF_SECTORS - 1))) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d002      	beq.n	80011e6 <executeFlashErase+0x26>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b0b      	cmp	r3, #11
 80011e4:	d82e      	bhi.n	8001244 <executeFlashErase+0x84>
		if (sectorNumber == (uint8_t) 0xff) {
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2bff      	cmp	r3, #255	; 0xff
 80011ea:	d102      	bne.n	80011f2 <executeFlashErase+0x32>
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e012      	b.n	8001218 <executeFlashErase+0x58>
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remaniningSector = MCU_NUMBER_OF_SECTORS - sectorNumber;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f1c3 030c 	rsb	r3, r3, #12
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (numberOfSectors > remaniningSector) {
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001202:	429a      	cmp	r2, r3
 8001204:	d902      	bls.n	800120c <executeFlashErase+0x4c>
				numberOfSectors = remaniningSector;
 8001206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120a:	71bb      	strb	r3, [r7, #6]
			}
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
			flashEraseHandle.Sector = sectorNumber; // This is the initial sector
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	61bb      	str	r3, [r7, #24]
			flashEraseHandle.NbSectors = numberOfSectors;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	61fb      	str	r3, [r7, #28]
		}
		flashEraseHandle.Banks = FLASH_BANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 800121c:	f002 f8d0 	bl	80033c0 <HAL_FLASH_Unlock>
		flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fa54 	bl	80036dc <HAL_FLASHEx_Erase>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 800123a:	f002 f8e3 	bl	8003404 <HAL_FLASH_Lock>

		return status;
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	e000      	b.n	8001246 <executeFlashErase+0x86>
	}

	return INVALID_SECTOR;
 8001244:	2304      	movs	r3, #4
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <configureFlashSectorRwProtection>:
 FLASH_SR register
 2. Write the desired option value in the FLASH_OPTCR register.
 3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 4. Wait for the BSY bit to be cleared.
 */
static uint8_t configureFlashSectorRwProtection(uint16_t sectorDetails, uint8_t protectionMode, uint8_t disable) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	717b      	strb	r3, [r7, #5]
 800125e:	4613      	mov	r3, r2
 8001260:	713b      	strb	r3, [r7, #4]
	//protection_mode =1 , means write protect of the user flash sectors
	//protection_mode =2, means read/write protect of the user flash sectors
	//According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <configureFlashSectorRwProtection+0xe8>)
 8001264:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	//wait till no active operation on flash
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001266:	bf00      	nop
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <configureFlashSectorRwProtection+0xec>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f9      	bne.n	8001268 <configureFlashSectorRwProtection+0x18>

	if (disable){
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d027      	beq.n	80012ca <configureFlashSectorRwProtection+0x7a>
		//disable all r/w protection on sectors
		//Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 800127a:	f002 f8d3 	bl	8003424 <HAL_FLASH_OB_Unlock>
		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800127e:	bf00      	nop
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <configureFlashSectorRwProtection+0xec>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f9      	bne.n	8001280 <configureFlashSectorRwProtection+0x30>
		//clear the 31st bit (default state)
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	601a      	str	r2, [r3, #0]
		//clear the protection : make all bits belonging to sectors as 1
		*pOPTCR |= (sectorDetails << 16);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	0412      	lsls	r2, r2, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	601a      	str	r2, [r3, #0]
		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f043 0202 	orr.w	r2, r3, #2
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012b2:	bf00      	nop
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <configureFlashSectorRwProtection+0xec>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <configureFlashSectorRwProtection+0x64>
		HAL_FLASH_OB_Lock();
 80012c0:	f002 f8cc 	bl	800345c <HAL_FLASH_OB_Lock>
		status = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e030      	b.n	800132c <configureFlashSectorRwProtection+0xdc>
	}
	else{
		if (protectionMode == 1){
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d128      	bne.n	8001322 <configureFlashSectorRwProtection+0xd2>
	           //we are putting write protection on the sectors encoded in sector_details argument
				//Option byte configuration unlock
				HAL_FLASH_OB_Unlock();
 80012d0:	f002 f8a8 	bl	8003424 <HAL_FLASH_OB_Unlock>
				//wait till no active operation on flash
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012d4:	bf00      	nop
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <configureFlashSectorRwProtection+0xec>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <configureFlashSectorRwProtection+0x86>
				//here we are setting just write protection for the sectors
				//clear the 31st bit
				//please refer : Flash option control register (FLASH_OPTCR) in RM
				*pOPTCR &= ~(1 << 31);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	601a      	str	r2, [r3, #0]
				//put write protection on sectors
				*pOPTCR &= ~ (sectorDetails << 16);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	0412      	lsls	r2, r2, #16
 80012f6:	43d2      	mvns	r2, r2
 80012f8:	401a      	ands	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	601a      	str	r2, [r3, #0]
				//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
				*pOPTCR |= ( 1 << 1);
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	601a      	str	r2, [r3, #0]
				//wait till no active operation on flash
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800130a:	bf00      	nop
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <configureFlashSectorRwProtection+0xec>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f9      	bne.n	800130c <configureFlashSectorRwProtection+0xbc>
				HAL_FLASH_OB_Lock();
 8001318:	f002 f8a0 	bl	800345c <HAL_FLASH_OB_Lock>
				status = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e004      	b.n	800132c <configureFlashSectorRwProtection+0xdc>
		}

		else if (protectionMode == 2){
 8001322:	797b      	ldrb	r3, [r7, #5]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d101      	bne.n	800132c <configureFlashSectorRwProtection+0xdc>
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
			HAL_FLASH_OB_Lock();
			status = 0;
#endif
#ifdef STM32F407xx
			status = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}
	return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c14 	.word	0x40023c14
 800133c:	40023c00 	.word	0x40023c00

08001340 <readOBRwProtectionStatus>:

static uint16_t readOBRwProtectionStatus(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001346:	f002 f86d 	bl	8003424 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fa35 	bl	80037bc <HAL_FLASHEx_OBGetConfig>

	//Get SPRMOD bit (PCROP Protection mode activated)
	OBInit.WRPSector &= 0x7fff;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001358:	60fb      	str	r3, [r7, #12]
	OBInit.WRPSector |= ((*(__IO uint8_t *)(OPTCR_BYTE3_ADDRESS)) & 0x80);
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <readOBRwProtectionStatus+0x3c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

	//Lock back .
	HAL_FLASH_Lock();
 800136a:	f002 f84b 	bl	8003404 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b29b      	uxth	r3, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c17 	.word	0x40023c17

08001380 <sendData>:

 /* This function writes data in to C_UART */
static void sendData(uint8_t * pBuffer, uint32_t len)
 {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	uint8_t * auxBuffer = malloc(len + 1);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f009 f9bc 	bl	800a70c <malloc>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	*auxBuffer = len;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	701a      	strb	r2, [r3, #0]
	memcpy(auxBuffer + 1, pBuffer, len);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 f9cd 	bl	800a748 <memcpy>
	udpServer_send(auxBuffer, len + 1);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f9e1 	bl	8001780 <udpServer_send>
	free(auxBuffer);
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f009 f9ac 	bl	800a71c <free>
 }
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <sendNACK>:

 /*This function sends NACK */
static void sendNACK(void)
 {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 80013d2:	237f      	movs	r3, #127	; 0x7f
 80013d4:	71fb      	strb	r3, [r7, #7]
 	sendData(&nack, 1);
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffd0 	bl	8001380 <sendData>
 }
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <verifyCRC>:

 /*This verifies the CRC of the given buffer in pData*/
static uint8_t verifyCRC (uint8_t *pData, uint32_t length, uint32_t hostCRC)
 {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue = 0xff;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	61fb      	str	r3, [r7, #28]

     for (uint32_t i = 0 ; i < length ; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	e00f      	b.n	800141e <verifyCRC+0x36>
 	{
         uint32_t iData = pData[i];
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &iData, 1);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2201      	movs	r2, #1
 800140e:	4619      	mov	r1, r3
 8001410:	480e      	ldr	r0, [pc, #56]	; (800144c <verifyCRC+0x64>)
 8001412:	f000 fe30 	bl	8002076 <HAL_CRC_Accumulate>
 8001416:	61f8      	str	r0, [r7, #28]
     for (uint32_t i = 0 ; i < length ; i++)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3301      	adds	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3eb      	bcc.n	80013fe <verifyCRC+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
    __HAL_CRC_DR_RESET(&hcrc);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <verifyCRC+0x64>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <verifyCRC+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	609a      	str	r2, [r3, #8]

 	if(uwCRCValue == hostCRC)
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d101      	bne.n	8001442 <verifyCRC+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <verifyCRC+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8001442:	2301      	movs	r3, #1
 }
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000234 	.word	0x20000234

08001450 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 8001454:	f001 ffb4 	bl	80033c0 <HAL_FLASH_Unlock>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800146e:	d216      	bcs.n	800149e <FLASH_If_Erase+0x42>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = FLASH_SECTOR_5;
 8001478:	2305      	movs	r3, #5
 800147a:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 7;
 800147c:	2307      	movs	r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f924 	bl	80036dc <HAL_FLASHEx_Erase>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <FLASH_If_Erase+0x46>
      return (1);
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <FLASH_If_Erase+0x48>
  }
  else
  {
    return (1);
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <FLASH_If_Erase+0x48>
  }

  return (0);
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e026      	b.n	8001512 <FLASH_If_Write+0x66>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	2002      	movs	r0, #2
 80014da:	f001 ff1d 	bl	8003318 <HAL_FLASH_Program>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <FLASH_If_Write+0x5c>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	440b      	add	r3, r1
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <FLASH_If_Write+0x50>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 80014f8:	2302      	movs	r3, #2
 80014fa:	e014      	b.n	8001526 <FLASH_If_Write+0x7a>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1d1a      	adds	r2, r3, #4
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e001      	b.n	800150c <FLASH_If_Write+0x60>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 8001508:	2301      	movs	r3, #1
 800150a:	e00c      	b.n	8001526 <FLASH_If_Write+0x7a>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	429a      	cmp	r2, r3
 8001518:	d204      	bcs.n	8001524 <FLASH_If_Write+0x78>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <FLASH_If_Write+0x84>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d9cf      	bls.n	80014c4 <FLASH_If_Write+0x18>
    }
  }

  return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	080ffffb 	.word	0x080ffffb

08001534 <FLASH_If_UnInit>:
  * @brief  locks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_UnInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
   HAL_FLASH_Lock();
 8001538:	f001 ff64 	bl	8003404 <HAL_FLASH_Lock>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <openFile>:
* @param const char* fname filename
   * @param const char* mode
* @param u8_t write mode 1 write 0 read
* @returns file handle
  */
static void* openFile(const char *fname, const char *mode, u8_t write) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
	iapFlashStr.wrMode = write;
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <openFile+0x6c>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	7053      	strb	r3, [r2, #1]

	if (iapFlashStr.wrMode == 1) {
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <openFile+0x6c>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10e      	bne.n	800157a <openFile+0x3a>
		FLASH_If_Init(); //Unlock
 800155c:	f7ff ff78 	bl	8001450 <FLASH_If_Init>
		iapFlashStr.flashAddress = USER_FLASH_FIRST_PAGE_ADDRESS; //FLASH start address
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <openFile+0x6c>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <openFile+0x70>)
 8001564:	605a      	str	r2, [r3, #4]
		if (FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS) == 0) //Erase user area FLASH data
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <openFile+0x70>)
 8001568:	f7ff ff78 	bl	800145c <FLASH_If_Erase>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d111      	bne.n	8001596 <openFile+0x56>
				{
			iapFlashStr.initFlat = 1; //mark initialization is complete
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <openFile+0x6c>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e00d      	b.n	8001596 <openFile+0x56>
		}
	} //If it is a read file mode
	else if (memcmp(fname, "firmwareSTM32.bin", strlen("firmwareSTM32.bin")) == 0) //Can read internal FLASH
 800157a:	2211      	movs	r2, #17
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <openFile+0x74>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f009 f8d4 	bl	800a72c <memcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <openFile+0x56>
			{
		iapFlashStr.initFlat = 1; //mark initialization is complete
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <openFile+0x6c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
		iapFlashStr.flashAddress = USER_FLASH_FIRST_PAGE_ADDRESS; //FLASH start address
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <openFile+0x6c>)
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <openFile+0x70>)
 8001594:	605a      	str	r2, [r3, #4]
	}
	return (iapFlashStr.initFlat) ? (&iapFlashStr) : NULL; //If the initialization succeeds, return a valid handle
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <openFile+0x6c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <openFile+0x62>
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <openFile+0x6c>)
 80015a0:	e000      	b.n	80015a4 <openFile+0x64>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000008c 	.word	0x2000008c
 80015b0:	08010000 	.word	0x08010000
 80015b4:	0800b7b4 	.word	0x0800b7b4

080015b8 <closeFile>:
   * @param None
   * @param None
   * @param None
   * @returns None
   */
static void closeFile(void *handle) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	61fb      	str	r3, [r7, #28]

	FLASH_If_UnInit(); //FLASH lock
 80015c4:	f7ff ffb6 	bl	8001534 <FLASH_If_UnInit>
	Filehandle->initFlat = 0;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	if (Filehandle->wrMode) //If the file was previously written
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <closeFile+0x40>
	{
		void (*jumpAddress)(void);

		uint32_t mspValue = *(volatile uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <closeFile+0x48>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f383 8808 	msr	MSP, r3
}
 80015e6:	bf00      	nop

		//This function comes from CMSIS.
		__set_MSP(mspValue);

		uint32_t jumpToApplication = *(volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <closeFile+0x4c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	617b      	str	r3, [r7, #20]

		jumpAddress = (void*) jumpToApplication;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	613b      	str	r3, [r7, #16]

		//3. jump to reset handler of the user application
		jumpAddress();
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4798      	blx	r3

		while (1)
 80015f6:	e7fe      	b.n	80015f6 <closeFile+0x3e>
			;
	}

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08010000 	.word	0x08010000
 8001604:	08010004 	.word	0x08010004

08001608 <readFile>:
* @param handle file handle
* @param *buf Save the cache of data
* @param bytes The length of the data read
* @returns returns the read data length is less than 0 error
   */
static int readFile(void *handle, void *buf, int bytes) {
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	613b      	str	r3, [r7, #16]

	if (!Filehandle->initFlat) //not initialized
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <readFile+0x1e>
	{
		return ERR_MEM;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e01d      	b.n	8001662 <readFile+0x5a>
	}
	uint16_t Count;
	for (Count = 0; (Count < bytes) && (Filehandle->flashAddress <= FLASH_END);
 8001626:	2300      	movs	r3, #0
 8001628:	82fb      	strh	r3, [r7, #22]
 800162a:	e010      	b.n	800164e <readFile+0x46>
			Count++, Filehandle->flashAddress++) {
		((uint8_t*) buf)[Count] = *((__IO uint8_t*) Filehandle->flashAddress);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	780a      	ldrb	r2, [r1, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
			Count++, Filehandle->flashAddress++) {
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	3301      	adds	r3, #1
 8001642:	82fb      	strh	r3, [r7, #22]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
	for (Count = 0; (Count < bytes) && (Filehandle->flashAddress <= FLASH_END);
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dd04      	ble.n	8001660 <readFile+0x58>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800165e:	d3e5      	bcc.n	800162c <readFile+0x24>
	}
	return Count;
 8001660:	8afb      	ldrh	r3, [r7, #22]
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <writeFile>:
* Write file data
* @param handle file handle
* @param struct pbuf* p Data cache structure The data cache inside is all the data that needs to be written.
* @returns is less than 0 for error
   */
static int writeFile(void *handle, struct pbuf *p) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	uint16_t Count;
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60fb      	str	r3, [r7, #12]

	if (!Filehandle->initFlat) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <writeFile+0x1c>

		return ERR_MEM;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e01f      	b.n	80016ca <writeFile+0x5c>
	}
	Count = p->len / 4 + ((p->len % 4) > 0); //Get the data to be written
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	895b      	ldrh	r3, [r3, #10]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	b29a      	uxth	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	895b      	ldrh	r3, [r3, #10]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	817b      	strh	r3, [r7, #10]

	if (FLASH_If_Write((__IO uint32_t*) &Filehandle->flashAddress,
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1d18      	adds	r0, r3, #4
			(uint32_t*) p->payload, Count) == 0) {
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
	if (FLASH_If_Write((__IO uint32_t*) &Filehandle->flashAddress,
 80016b4:	897a      	ldrh	r2, [r7, #10]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fef8 	bl	80014ac <FLASH_If_Write>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <writeFile+0x58>

		return ERR_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e001      	b.n	80016ca <writeFile+0x5c>
	} else {

	}
	return ERR_MEM;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <udpServer_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udpServer_init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   //struct udp_pcb *upcb;
   err_t err;

   /* Create a new UDP control block  */
   udp_pcb = udp_new();
 80016da:	f006 fce9 	bl	80080b0 <udp_new>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <udpServer_init+0x54>)
 80016e2:	6013      	str	r3, [r2, #0]

   if (udp_pcb)
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <udpServer_init+0x54>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d019      	beq.n	8001720 <udpServer_init+0x4c>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(udp_pcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <udpServer_init+0x54>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <udpServer_init+0x58>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fb5b 	bl	8007db0 <udp_bind>
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]

      if(err == ERR_OK)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <udpServer_init+0x42>
      {
        /* Set a receive callback for the upcb */
        udp_recv(udp_pcb, udpServer_receiveCallback, NULL);
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <udpServer_init+0x54>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <udpServer_init+0x5c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f006 fc6c 	bl	8007fec <udp_recv>
      else
      {
        udp_remove(udp_pcb);
      }
   }
}
 8001714:	e004      	b.n	8001720 <udpServer_init+0x4c>
        udp_remove(udp_pcb);
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <udpServer_init+0x54>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f006 fc86 	bl	800802c <udp_remove>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000230 	.word	0x20000230
 800172c:	0800cf84 	.word	0x0800cf84
 8001730:	08001735 	.word	0x08001735

08001734 <udpServer_receiveCallback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udpServer_receiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, port);
 8001742:	8b3b      	ldrh	r3, [r7, #24]
 8001744:	461a      	mov	r2, r3
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f006 fbb9 	bl	8007ec0 <udp_connect>

  memcpy(udp_pcb, upcb, sizeof(struct udp_pcb));
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <udpServer_receiveCallback+0x44>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	4618      	mov	r0, r3
 8001758:	f008 fff6 	bl	800a748 <memcpy>
  pbuf_copy_partial(p, &bootloaderBuffer, p -> tot_len, 0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	891a      	ldrh	r2, [r3, #8]
 8001760:	2300      	movs	r3, #0
 8001762:	4906      	ldr	r1, [pc, #24]	; (800177c <udpServer_receiveCallback+0x48>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f005 fbf7 	bl	8006f58 <pbuf_copy_partial>

  /* Free the p buffer */
  pbuf_free(p);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f005 f9fa 	bl	8006b64 <pbuf_free>

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000230 	.word	0x20000230
 800177c:	200001f0 	.word	0x200001f0

08001780 <udpServer_send>:


void udpServer_send(uint8_t * pBuffer, uint16_t length){
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]

	struct pbuf * p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001792:	4619      	mov	r1, r3
 8001794:	2036      	movs	r0, #54	; 0x36
 8001796:	f004 ff03 	bl	80065a0 <pbuf_alloc>
 800179a:	60f8      	str	r0, [r7, #12]

	pbuf_take(p, pBuffer, length);
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	461a      	mov	r2, r3
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f005 fc74 	bl	8007090 <pbuf_take>

	udp_send(udp_pcb, p);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <udpServer_send+0x4c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 f914 	bl	80079dc <udp_send>

	/* Free the p buffer */
	pbuf_free(p);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f005 f9d5 	bl	8006b64 <pbuf_free>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(udp_pcb);
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <udpServer_send+0x4c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fbec 	bl	8007f9c <udp_disconnect>


}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000230 	.word	0x20000230

080017d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_CRC_Init+0x20>)
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <MX_CRC_Init+0x24>)
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_CRC_Init+0x20>)
 80017dc:	f000 fc2f 	bl	800203e <HAL_CRC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017e6:	f000 f947 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000234 	.word	0x20000234
 80017f4:	40023000 	.word	0x40023000

080017f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x3c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10d      	bne.n	8001826 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_CRC_MspInit+0x40>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_CRC_MspInit+0x40>)
 8001814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_CRC_MspInit+0x40>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023000 	.word	0x40023000
 8001838:	40023800 	.word	0x40023800

0800183c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <MX_GPIO_Init+0xe8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_GPIO_Init+0xe8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c8:	4817      	ldr	r0, [pc, #92]	; (8001928 <MX_GPIO_Init+0xec>)
 80018ca:	f002 fa4d 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <MX_GPIO_Init+0xf0>)
 80018e2:	f002 f88d 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018e6:	2304      	movs	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_GPIO_Init+0xf4>)
 80018fa:	f002 f881 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xec>)
 8001918:	f002 f872 	bl	8003a00 <HAL_GPIO_Init>

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400

08001934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f000 fa05 	bl	8001d48 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f831 	bl	80019a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f7ff ff7b 	bl	800183c <MX_GPIO_Init>
  MX_CRC_Init();
 8001946:	f7ff ff43 	bl	80017d0 <MX_CRC_Init>
  MX_LWIP_Init();
 800194a:	f002 fe73 	bl	8004634 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  uint8_t bootloaderInitRam    = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
  uint8_t bootloaderInitButton = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	71bb      	strb	r3, [r7, #6]

  bootloaderInitRam = * (volatile uint8_t *) BOOTLOADER_INIT_ADDRESS;
 8001956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	71fb      	strb	r3, [r7, #7]
  bootloaderInitButton = HAL_GPIO_ReadPin(BOOTLOADER_RESET_PORT, BOOTLOADER_RESET_PIN);
 800195e:	2101      	movs	r1, #1
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <main+0x68>)
 8001962:	f002 f9e9 	bl	8003d38 <HAL_GPIO_ReadPin>
 8001966:	4603      	mov	r3, r0
 8001968:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (bootloaderInitRam == BOOTLOADER_INIT_VALUE || bootloaderInitButton == RESET){
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2baa      	cmp	r3, #170	; 0xaa
 800196e:	d002      	beq.n	8001976 <main+0x42>
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10b      	bne.n	800198e <main+0x5a>
	  BOOTLOADER_START = BOOTLOADER_RESET_VALUE;
 8001976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800197a:	22ff      	movs	r2, #255	; 0xff
 800197c:	701a      	strb	r2, [r3, #0]
  	  udpServer_init();
 800197e:	f7ff fea9 	bl	80016d4 <udpServer_init>
  	  tftp_init(&tftpContext);
 8001982:	4807      	ldr	r0, [pc, #28]	; (80019a0 <main+0x6c>)
 8001984:	f003 fe46 	bl	8005614 <tftp_init>
  	  bootloaderReadData();
 8001988:	f7fe fdf6 	bl	8000578 <bootloaderReadData>
 800198c:	e001      	b.n	8001992 <main+0x5e>
  }
  else{
  	  bootloaderJumpToUserApp();
 800198e:	f7fe ff23 	bl	80007d8 <bootloaderJumpToUserApp>
 8001992:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020000 	.word	0x40020000
 80019a0:	0800cef4 	.word	0x0800cef4

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b094      	sub	sp, #80	; 0x50
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	2230      	movs	r2, #48	; 0x30
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f008 fed6 	bl	800a764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <SystemClock_Config+0xcc>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <SystemClock_Config+0xcc>)
 80019d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <SystemClock_Config+0xcc>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SystemClock_Config+0xd0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <SystemClock_Config+0xd0>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SystemClock_Config+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a00:	2302      	movs	r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a14:	2308      	movs	r3, #8
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a18:	23a8      	movs	r3, #168	; 0xa8
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a20:	2307      	movs	r3, #7
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 f9b7 	bl	8003d9c <HAL_RCC_OscConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a34:	f000 f820 	bl	8001a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a38:	230f      	movs	r3, #15
 8001a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2105      	movs	r1, #5
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fc18 	bl	800428c <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a62:	f000 f809 	bl	8001a78 <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	; 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40007000 	.word	0x40007000

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f000 fa86 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f95e 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_kill+0x20>)
 8001b50:	2216      	movs	r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
	return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	2000858c 	.word	0x2000858c

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe5 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b7a:	e7fe      	b.n	8001b7a <_exit+0x12>

08001b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
	}

return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
	}
	return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d205      	bcs.n	8001c94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x6c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	371c      	adds	r7, #28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	20020000 	.word	0x20020000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000094 	.word	0x20000094
 8001cc0:	200085a0 	.word	0x200085a0
 8001cc4:	2000858c 	.word	0x2000858c

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <SystemInit+0x28>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <SystemInit+0x28>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SystemInit+0x28>)
 8001cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfa:	e003      	b.n	8001d04 <LoopCopyDataInit>

08001cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d02:	3104      	adds	r1, #4

08001d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d04:	480b      	ldr	r0, [pc, #44]	; (8001d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d0c:	d3f6      	bcc.n	8001cfc <CopyDataInit>
  ldr  r2, =_sbss
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d10:	e002      	b.n	8001d18 <LoopFillZerobss>

08001d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d14:	f842 3b04 	str.w	r3, [r2], #4

08001d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d1c:	d3f9      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d1e:	f7ff ffd3 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f008 fccf 	bl	800a6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fe05 	bl	8001934 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d30:	0800d0f4 	.word	0x0800d0f4
  ldr  r0, =_sdata
 8001d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001d3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001d40:	2000859c 	.word	0x2000859c

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f931 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fe84 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f93b 	bl	8002026 <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f911 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000023c 	.word	0x2000023c

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	2000023c 	.word	0x2000023c

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff47 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff5c 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb0 	bl	8001f94 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e00e      	b.n	800206e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	795b      	ldrb	r3, [r3, #5]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d105      	bne.n	8002066 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fbc9 	bl	80017f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2202      	movs	r2, #2
 800208a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00a      	b.n	80020a8 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	441a      	add	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3f0      	bcc.n	8002092 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80020be:	693b      	ldr	r3, [r7, #16]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80020dc:	4baa      	ldr	r3, [pc, #680]	; (8002388 <HAL_ETH_Init+0x2bc>)
 80020de:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e183      	b.n	80023fa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f002 fbd2 	bl	80048b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b9e      	ldr	r3, [pc, #632]	; (800238c <HAL_ETH_Init+0x2c0>)
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	4a9d      	ldr	r2, [pc, #628]	; (800238c <HAL_ETH_Init+0x2c0>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6453      	str	r3, [r2, #68]	; 0x44
 800211c:	4b9b      	ldr	r3, [pc, #620]	; (800238c <HAL_ETH_Init+0x2c0>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002128:	4b99      	ldr	r3, [pc, #612]	; (8002390 <HAL_ETH_Init+0x2c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a98      	ldr	r2, [pc, #608]	; (8002390 <HAL_ETH_Init+0x2c4>)
 800212e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002132:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002134:	4b96      	ldr	r3, [pc, #600]	; (8002390 <HAL_ETH_Init+0x2c4>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4994      	ldr	r1, [pc, #592]	; (8002390 <HAL_ETH_Init+0x2c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002158:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800215a:	f7ff fe5b 	bl	8001e14 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002160:	e011      	b.n	8002186 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002162:	f7ff fe57 	bl	8001e14 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002170:	d909      	bls.n	8002186 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e139      	b.n	80023fa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e4      	bne.n	8002162 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f023 031c 	bic.w	r3, r3, #28
 80021a6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80021a8:	f002 fa38 	bl	800461c <HAL_RCC_GetHCLKFreq>
 80021ac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4a78      	ldr	r2, [pc, #480]	; (8002394 <HAL_ETH_Init+0x2c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d908      	bls.n	80021c8 <HAL_ETH_Init+0xfc>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_ETH_Init+0x2cc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d804      	bhi.n	80021c8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e027      	b.n	8002218 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4a73      	ldr	r2, [pc, #460]	; (8002398 <HAL_ETH_Init+0x2cc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d908      	bls.n	80021e2 <HAL_ETH_Init+0x116>
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4a6d      	ldr	r2, [pc, #436]	; (8002388 <HAL_ETH_Init+0x2bc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d204      	bcs.n	80021e2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f043 030c 	orr.w	r3, r3, #12
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	e01a      	b.n	8002218 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4a68      	ldr	r2, [pc, #416]	; (8002388 <HAL_ETH_Init+0x2bc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d303      	bcc.n	80021f2 <HAL_ETH_Init+0x126>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4a6b      	ldr	r2, [pc, #428]	; (800239c <HAL_ETH_Init+0x2d0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d911      	bls.n	8002216 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4a69      	ldr	r2, [pc, #420]	; (800239c <HAL_ETH_Init+0x2d0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d908      	bls.n	800220c <HAL_ETH_Init+0x140>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4a68      	ldr	r2, [pc, #416]	; (80023a0 <HAL_ETH_Init+0x2d4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d804      	bhi.n	800220c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e005      	b.n	8002218 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e000      	b.n	8002218 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002216:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002220:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002224:	2100      	movs	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fb98 	bl	800295c <HAL_ETH_WritePHYRegister>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002236:	6939      	ldr	r1, [r7, #16]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fd4d 	bl	8002cd8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0d7      	b.n	80023fa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800224a:	20ff      	movs	r0, #255	; 0xff
 800224c:	f7ff fdee 	bl	8001e2c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a5 	beq.w	80023a4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800225a:	f7ff fddb 	bl	8001e14 <HAL_GetTick>
 800225e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	461a      	mov	r2, r3
 8002266:	2101      	movs	r1, #1
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fb0f 	bl	800288c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800226e:	f7ff fdd1 	bl	8001e14 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d90f      	bls.n	80022a0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002284:	6939      	ldr	r1, [r7, #16]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fd26 	bl	8002cd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0ac      	b.n	80023fa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0da      	beq.n	8002260 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80022aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fb53 	bl	800295c <HAL_ETH_WritePHYRegister>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fd08 	bl	8002cd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80022d0:	2301      	movs	r3, #1
 80022d2:	e092      	b.n	80023fa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff fd9e 	bl	8001e14 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	461a      	mov	r2, r3
 80022e0:	2101      	movs	r1, #1
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fad2 	bl	800288c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80022e8:	f7ff fd94 	bl	8001e14 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d90f      	bls.n	800231a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80022fe:	6939      	ldr	r1, [r7, #16]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fce9 	bl	8002cd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e06f      	b.n	80023fa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0da      	beq.n	80022da <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	461a      	mov	r2, r3
 800232a:	2110      	movs	r1, #16
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 faad 	bl	800288c <HAL_ETH_ReadPHYRegister>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fcca 	bl	8002cd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800234c:	2301      	movs	r3, #1
 800234e:	e054      	b.n	80023fa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e002      	b.n	800236a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	e035      	b.n	80023e8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e030      	b.n	80023e8 <HAL_ETH_Init+0x31c>
 8002386:	bf00      	nop
 8002388:	03938700 	.word	0x03938700
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	01312cff 	.word	0x01312cff
 8002398:	02160ebf 	.word	0x02160ebf
 800239c:	05f5e0ff 	.word	0x05f5e0ff
 80023a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 facd 	bl	800295c <HAL_ETH_WritePHYRegister>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fc82 	bl	8002cd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e00c      	b.n	80023fa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80023e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80023e4:	f7ff fd22 	bl	8001e2c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80023e8:	6939      	ldr	r1, [r7, #16]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fc74 	bl	8002cd8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop

08002404 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_ETH_DMATxDescListInit+0x20>
 8002420:	2302      	movs	r3, #2
 8002422:	e052      	b.n	80024ca <HAL_ETH_DMATxDescListInit+0xc6>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e030      	b.n	80024a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	4413      	add	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002450:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	461a      	mov	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d208      	bcs.n	8002496 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	461a      	mov	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	e002      	b.n	800249c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3ca      	bcc.n	8002440 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	3310      	adds	r3, #16
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_ETH_DMARxDescListInit+0x20>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e056      	b.n	80025a4 <HAL_ETH_DMARxDescListInit+0xce>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e034      	b.n	800257c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002522:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800252a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	461a      	mov	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	429a      	cmp	r2, r3
 800255c:	d208      	bcs.n	8002570 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3301      	adds	r3, #1
 8002562:	015b      	lsls	r3, r3, #5
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4413      	add	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e002      	b.n	8002576 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3c6      	bcc.n	8002512 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258e:	330c      	adds	r3, #12
 8002590:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_ETH_TransmitFrame+0x24>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0cd      	b.n	8002770 <HAL_ETH_TransmitFrame+0x1c0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0b8      	b.n	8002770 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	da09      	bge.n	800261c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2212      	movs	r2, #18
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0a9      	b.n	8002770 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002622:	4293      	cmp	r3, r2
 8002624:	d915      	bls.n	8002652 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_ETH_TransmitFrame+0x1cc>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_ETH_TransmitFrame+0x1cc>)
 8002636:	fba3 1302 	umull	r1, r3, r3, r2
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e001      	b.n	8002656 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002652:	2301      	movs	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11c      	bne.n	8002696 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800266a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002676:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002686:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	461a      	mov	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
 8002694:	e04b      	b.n	800272e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e044      	b.n	8002726 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026aa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026ca:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d116      	bne.n	8002704 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026e4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <HAL_ETH_TransmitFrame+0x1d0>)
 80026ea:	fb02 f203 	mul.w	r2, r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80026f6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002702:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002712:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3301      	adds	r3, #1
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3b6      	bcc.n	800269c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002736:	3314      	adds	r3, #20
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274a:	3314      	adds	r3, #20
 800274c:	2204      	movs	r2, #4
 800274e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	3304      	adds	r3, #4
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	ac02b00b 	.word	0xac02b00b
 8002780:	fffffa0c 	.word	0xfffffa0c

08002784 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ETH_GetReceivedFrame+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e070      	b.n	8002880 <HAL_ETH_GetReceivedFrame+0xfc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db5a      	blt.n	800286e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d030      	beq.n	8002828 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d103      	bne.n	80027e0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80027f4:	3b04      	subs	r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	e02b      	b.n	8002880 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
 8002856:	e00a      	b.n	800286e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	460b      	mov	r3, r1
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b82      	cmp	r3, #130	; 0x82
 80028ac:	d101      	bne.n	80028b2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	e050      	b.n	8002954 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2282      	movs	r2, #130	; 0x82
 80028b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 031c 	and.w	r3, r3, #28
 80028c8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8a1b      	ldrh	r3, [r3, #16]
 80028ce:	02db      	lsls	r3, r3, #11
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80028d8:	897b      	ldrh	r3, [r7, #10]
 80028da:	019b      	lsls	r3, r3, #6
 80028dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f023 0302 	bic.w	r3, r3, #2
 80028ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80028fe:	f7ff fa89 	bl	8001e14 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002904:	e015      	b.n	8002932 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002906:	f7ff fa85 	bl	8001e14 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d309      	bcc.n	800292a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e014      	b.n	8002954 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e4      	bne.n	8002906 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	b29b      	uxth	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	460b      	mov	r3, r1
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b42      	cmp	r3, #66	; 0x42
 800297c:	d101      	bne.n	8002982 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	e04e      	b.n	8002a20 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2242      	movs	r2, #66	; 0x42
 8002986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 031c 	and.w	r3, r3, #28
 8002998:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8a1b      	ldrh	r3, [r3, #16]
 800299e:	02db      	lsls	r3, r3, #11
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	019b      	lsls	r3, r3, #6
 80029ac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80029d8:	f7ff fa1c 	bl	8001e14 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029de:	e015      	b.n	8002a0c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80029e0:	f7ff fa18 	bl	8001e14 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d309      	bcc.n	8002a04 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e00d      	b.n	8002a20 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e4      	bne.n	80029e0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ETH_Start+0x16>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e01f      	b.n	8002a7e <HAL_ETH_Start+0x56>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fb44 	bl	80030dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fb7b 	bl	8003150 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fc12 	bl	8003284 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fbaf 	bl	80031c4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fbdc 	bl	8003224 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ETH_Stop+0x16>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e01f      	b.n	8002adc <HAL_ETH_Stop+0x56>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fba1 	bl	80031f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fbce 	bl	8003254 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fb66 	bl	800318a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fbe0 	bl	8003284 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb26 	bl	8003116 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ETH_ConfigMAC+0x1c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0e4      	b.n	8002cca <HAL_ETH_ConfigMAC+0x1e6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80b1 	beq.w	8002c7a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002b30:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002b36:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002b3c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002b42:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002b48:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002b4e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002b54:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002b5a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002b60:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002b66:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002b6c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002b72:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff f94e 	bl	8001e2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ba0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002ba6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002bac:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002bb2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002bb8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002bca:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002bcc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff f928 	bl	8001e2c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bec:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bf6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002c14:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002c1a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002c20:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002c26:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002c2c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff f8f1 	bl	8001e2c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7ff f8de 	bl	8001e2c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	61da      	str	r2, [r3, #28]
 8002c78:	e01e      	b.n	8002cb8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c88:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7ff f8be 	bl	8001e2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	ff20810f 	.word	0xff20810f

08002cd8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b0b0      	sub	sp, #192	; 0xc0
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002d06:	2300      	movs	r3, #0
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d22:	663b      	str	r3, [r7, #96]	; 0x60
 8002d24:	e001      	b.n	8002d2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d34:	2300      	movs	r3, #0
 8002d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002d44:	2340      	movs	r3, #64	; 0x40
 8002d46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002db0:	4bac      	ldr	r3, [pc, #688]	; (8003064 <ETH_MACDMAConfig+0x38c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002dbc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002dc0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002dc4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002dca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002dce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002dd2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002dd8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ddc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002de0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002de4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002de8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002dec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff f80d 	bl	8001e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e1a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e20:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002e24:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002e2a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002e30:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002e36:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002e3c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002e40:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002e48:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e4a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fe ffe8 	bl	8001e2c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e64:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e6e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e78:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e88:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e96:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002e9c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002ea2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002ea8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002eae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002eb4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002eb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ec8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	f7fe ffa9 	bl	8001e2c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002ee4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002ee8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fe ff94 	bl	8001e2c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f0c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f16:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f20:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002f32:	2304      	movs	r3, #4
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f56:	2300      	movs	r3, #0
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f62:	3318      	adds	r3, #24
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <ETH_MACDMAConfig+0x390>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f76:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002f78:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f7a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002f7c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002f7e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002f80:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002f82:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002f84:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002f86:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002f88:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002f8a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002f8e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002f92:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002f96:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002faa:	3318      	adds	r3, #24
 8002fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fb0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fba:	3318      	adds	r3, #24
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe ff32 	bl	8001e2c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fd6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002fdc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002fe0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002fe4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002fe8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002fee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002ff2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fe ff0b 	bl	8001e2c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003022:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10f      	bne.n	800304c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	331c      	adds	r3, #28
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	331c      	adds	r3, #28
 800304a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	461a      	mov	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f809 	bl	800306c <ETH_MACAddressConfig>
}
 800305a:	bf00      	nop
 800305c:	37c0      	adds	r7, #192	; 0xc0
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	ff20810f 	.word	0xff20810f
 8003068:	f8de3f23 	.word	0xf8de3f23

0800306c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3305      	adds	r3, #5
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	3204      	adds	r2, #4
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <ETH_MACAddressConfig+0x68>)
 800308e:	4413      	add	r3, r2
 8003090:	461a      	mov	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3303      	adds	r3, #3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	061a      	lsls	r2, r3, #24
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3302      	adds	r3, #2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	4313      	orrs	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <ETH_MACAddressConfig+0x6c>)
 80030be:	4413      	add	r3, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6013      	str	r3, [r2, #0]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40028040 	.word	0x40028040
 80030d8:	40028044 	.word	0x40028044

080030dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f000 f8e9 	bl	80032d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0208 	bic.w	r2, r2, #8
 8003130:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800313a:	2001      	movs	r0, #1
 800313c:	f000 f8cc 	bl	80032d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003174:	2001      	movs	r0, #1
 8003176:	f000 f8af 	bl	80032d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f000 f892 	bl	80032d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d4:	3318      	adds	r3, #24
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031e4:	3318      	adds	r3, #24
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003204:	3318      	adds	r3, #24
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003214:	3318      	adds	r3, #24
 8003216:	601a      	str	r2, [r3, #0]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003234:	3318      	adds	r3, #24
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0202 	orr.w	r2, r2, #2
 8003240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003244:	3318      	adds	r3, #24
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003264:	3318      	adds	r3, #24
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0202 	bic.w	r2, r2, #2
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	3318      	adds	r3, #24
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003298:	3318      	adds	r3, #24
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a8:	3318      	adds	r3, #24
 80032aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b4:	3318      	adds	r3, #24
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f000 f80c 	bl	80032d8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ca:	3318      	adds	r3, #24
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <ETH_Delay+0x38>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <ETH_Delay+0x3c>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0a5b      	lsrs	r3, r3, #9
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80032f4:	bf00      	nop
  } 
  while (Delay --);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	60fa      	str	r2, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <ETH_Delay+0x1c>
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000
 8003314:	10624dd3 	.word	0x10624dd3

08003318 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_FLASH_Program+0xa0>)
 800332c:	7e1b      	ldrb	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_FLASH_Program+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e03b      	b.n	80033ae <HAL_FLASH_Program+0x96>
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_FLASH_Program+0xa0>)
 8003338:	2201      	movs	r2, #1
 800333a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800333c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003340:	f000 f89c 	bl	800347c <FLASH_WaitForLastOperation>
 8003344:	4603      	mov	r3, r0
 8003346:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003348:	7dfb      	ldrb	r3, [r7, #23]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d12b      	bne.n	80033a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003354:	783b      	ldrb	r3, [r7, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	f000 f947 	bl	80035ec <FLASH_Program_Byte>
 800335e:	e016      	b.n	800338e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003366:	883b      	ldrh	r3, [r7, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f000 f91a 	bl	80035a4 <FLASH_Program_HalfWord>
 8003370:	e00d      	b.n	800338e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d105      	bne.n	8003384 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f000 f8ef 	bl	8003560 <FLASH_Program_Word>
 8003382:	e004      	b.n	800338e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	f000 f8b7 	bl	80034fc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800338e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003392:	f000 f873 	bl	800347c <FLASH_WaitForLastOperation>
 8003396:	4603      	mov	r3, r0
 8003398:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_FLASH_Program+0xa4>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_FLASH_Program+0xa4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_FLASH_Program+0xa0>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000240 	.word	0x20000240
 80033bc:	40023c00 	.word	0x40023c00

080033c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_FLASH_Unlock+0x38>)
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da0b      	bge.n	80033ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_FLASH_Unlock+0x38>)
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_FLASH_Unlock+0x3c>)
 80033d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_FLASH_Unlock+0x38>)
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <HAL_FLASH_Unlock+0x40>)
 80033dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_FLASH_Unlock+0x38>)
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	da01      	bge.n	80033ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80033ea:	79fb      	ldrb	r3, [r7, #7]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	45670123 	.word	0x45670123
 8003400:	cdef89ab 	.word	0xcdef89ab

08003404 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_FLASH_Lock+0x1c>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_FLASH_Lock+0x1c>)
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003412:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40023c00 	.word	0x40023c00

08003424 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_FLASH_OB_Unlock+0x2c>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_FLASH_OB_Unlock+0x2c>)
 8003436:	4a07      	ldr	r2, [pc, #28]	; (8003454 <HAL_FLASH_OB_Unlock+0x30>)
 8003438:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_FLASH_OB_Unlock+0x2c>)
 800343c:	4a06      	ldr	r2, [pc, #24]	; (8003458 <HAL_FLASH_OB_Unlock+0x34>)
 800343e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40023c00 	.word	0x40023c00
 8003454:	08192a3b 	.word	0x08192a3b
 8003458:	4c5d6e7f 	.word	0x4c5d6e7f

0800345c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_FLASH_OB_Lock+0x1c>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_FLASH_OB_Lock+0x1c>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40023c00 	.word	0x40023c00

0800347c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <FLASH_WaitForLastOperation+0x78>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800348e:	f7fe fcc1 	bl	8001e14 <HAL_GetTick>
 8003492:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003494:	e010      	b.n	80034b8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d00c      	beq.n	80034b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <FLASH_WaitForLastOperation+0x38>
 80034a4:	f7fe fcb6 	bl	8001e14 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d201      	bcs.n	80034b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e019      	b.n	80034ec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <FLASH_WaitForLastOperation+0x7c>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e8      	bne.n	8003496 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <FLASH_WaitForLastOperation+0x7c>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <FLASH_WaitForLastOperation+0x7c>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <FLASH_WaitForLastOperation+0x7c>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80034e2:	f000 f8a5 	bl	8003630 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
  
}  
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000240 	.word	0x20000240
 80034f8:	40023c00 	.word	0x40023c00

080034fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 800350e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	4a10      	ldr	r2, [pc, #64]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 800351a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800351e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4a0d      	ldr	r2, [pc, #52]	; (800355c <FLASH_Program_DoubleWord+0x60>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003532:	f3bf 8f6f 	isb	sy
}
 8003536:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003538:	e9d7 0100 	ldrd	r0, r1, [r7]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	000a      	movs	r2, r1
 8003546:	2300      	movs	r3, #0
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	3104      	adds	r1, #4
 800354c:	4613      	mov	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40023c00 	.word	0x40023c00

08003560 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <FLASH_Program_Word+0x40>)
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <FLASH_Program_Word+0x40>)
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <FLASH_Program_Word+0x40>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <FLASH_Program_Word+0x40>)
 800357c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <FLASH_Program_Word+0x40>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <FLASH_Program_Word+0x40>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40023c00 	.word	0x40023c00

080035a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	4a06      	ldr	r2, [pc, #24]	; (80035e8 <FLASH_Program_HalfWord+0x44>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	801a      	strh	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00

080035ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <FLASH_Program_Byte+0x40>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <FLASH_Program_Byte+0x40>)
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <FLASH_Program_Byte+0x40>)
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <FLASH_Program_Byte+0x40>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <FLASH_Program_Byte+0x40>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	4a06      	ldr	r2, [pc, #24]	; (800362c <FLASH_Program_Byte+0x40>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	701a      	strb	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00

08003630 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f043 0310 	orr.w	r3, r3, #16
 8003648:	4a23      	ldr	r2, [pc, #140]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 800364a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 800364e:	2210      	movs	r2, #16
 8003650:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f043 0308 	orr.w	r3, r3, #8
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 8003668:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 800366c:	2220      	movs	r2, #32
 800366e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800367c:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 8003686:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 800368a:	2240      	movs	r2, #64	; 0x40
 800368c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 80036a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f043 0320 	orr.w	r3, r3, #32
 80036c0:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <FLASH_SetErrorCode+0xa8>)
 80036c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <FLASH_SetErrorCode+0xa4>)
 80036c6:	2202      	movs	r2, #2
 80036c8:	60da      	str	r2, [r3, #12]
  }
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40023c00 	.word	0x40023c00
 80036d8:	20000240 	.word	0x20000240

080036dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_FLASHEx_Erase+0xd8>)
 80036f0:	7e1b      	ldrb	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_FLASHEx_Erase+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e058      	b.n	80037ac <HAL_FLASHEx_Erase+0xd0>
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_FLASHEx_Erase+0xd8>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003700:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003704:	f7ff feba 	bl	800347c <FLASH_WaitForLastOperation>
 8003708:	4603      	mov	r3, r0
 800370a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d148      	bne.n	80037a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f04f 32ff 	mov.w	r2, #4294967295
 8003718:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d115      	bne.n	800374e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 f868 	bl	8003804 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003738:	f7ff fea0 	bl	800347c <FLASH_WaitForLastOperation>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_FLASHEx_Erase+0xdc>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_FLASHEx_Erase+0xdc>)
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	6113      	str	r3, [r2, #16]
 800374c:	e028      	b.n	80037a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e01c      	b.n	8003790 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f000 f874 	bl	800384c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003764:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003768:	f7ff fe88 	bl	800347c <FLASH_WaitForLastOperation>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_FLASHEx_Erase+0xdc>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <HAL_FLASHEx_Erase+0xdc>)
 8003776:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800377a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	601a      	str	r2, [r3, #0]
          break;
 8003788:	e00a      	b.n	80037a0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4413      	add	r3, r2
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	429a      	cmp	r2, r3
 800379e:	d3da      	bcc.n	8003756 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80037a0:	f000 f8e8 	bl	8003974 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <HAL_FLASHEx_Erase+0xd8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	761a      	strb	r2, [r3, #24]

  return status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000240 	.word	0x20000240
 80037b8:	40023c00 	.word	0x40023c00

080037bc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	220f      	movs	r2, #15
 80037c8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80037ca:	f000 f897 	bl	80038fc <FLASH_OB_GetWRP>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80037d6:	f000 f89d 	bl	8003914 <FLASH_OB_GetRDP>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80037e2:	f000 f87b 	bl	80038dc <FLASH_OB_GetUser>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80037ee:	f000 f8b1 	bl	8003954 <FLASH_OB_GetBOR>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	615a      	str	r2, [r3, #20]
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <FLASH_MassErase+0x44>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <FLASH_MassErase+0x44>)
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <FLASH_MassErase+0x44>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <FLASH_MassErase+0x44>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <FLASH_MassErase+0x44>)
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	4a05      	ldr	r2, [pc, #20]	; (8003848 <FLASH_MassErase+0x44>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6113      	str	r3, [r2, #16]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00

0800384c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e010      	b.n	800388a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d103      	bne.n	8003876 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e009      	b.n	800388a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d103      	bne.n	8003884 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800387c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e002      	b.n	800388a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003888:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	490f      	ldr	r1, [pc, #60]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4313      	orrs	r3, r2
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <FLASH_Erase_Sector+0x8c>)
 80038c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ca:	6113      	str	r3, [r2, #16]
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40023c00 	.word	0x40023c00

080038dc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <FLASH_OB_GetUser+0x1c>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f023 031f 	bic.w	r3, r3, #31
 80038ea:	b2db      	uxtb	r3, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00

080038fc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <FLASH_OB_GetWRP+0x14>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40023c16 	.word	0x40023c16

08003914 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800391a:	23aa      	movs	r3, #170	; 0xaa
 800391c:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <FLASH_OB_GetRDP+0x3c>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2bcc      	cmp	r3, #204	; 0xcc
 8003926:	d102      	bne.n	800392e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8003928:	23cc      	movs	r3, #204	; 0xcc
 800392a:	71fb      	strb	r3, [r7, #7]
 800392c:	e009      	b.n	8003942 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <FLASH_OB_GetRDP+0x3c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2baa      	cmp	r3, #170	; 0xaa
 8003936:	d102      	bne.n	800393e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8003938:	23aa      	movs	r3, #170	; 0xaa
 800393a:	71fb      	strb	r3, [r7, #7]
 800393c:	e001      	b.n	8003942 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800393e:	2355      	movs	r3, #85	; 0x55
 8003940:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8003942:	79fb      	ldrb	r3, [r7, #7]
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40023c15 	.word	0x40023c15

08003954 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <FLASH_OB_GetBOR+0x1c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	b2db      	uxtb	r3, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023c14 	.word	0x40023c14

08003974 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <FLASH_FlushCaches+0x88>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	2b00      	cmp	r3, #0
 8003982:	d017      	beq.n	80039b4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <FLASH_FlushCaches+0x88>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <FLASH_FlushCaches+0x88>)
 800398a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800398e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <FLASH_FlushCaches+0x88>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <FLASH_FlushCaches+0x88>)
 8003996:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b17      	ldr	r3, [pc, #92]	; (80039fc <FLASH_FlushCaches+0x88>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d017      	beq.n	80039f0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a07      	ldr	r2, [pc, #28]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <FLASH_FlushCaches+0x88>)
 80039ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ee:	6013      	str	r3, [r2, #0]
  }
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	e16b      	b.n	8003cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	f040 815a 	bne.w	8003cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d005      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d130      	bne.n	8003ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d017      	beq.n	8003af0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d123      	bne.n	8003b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	08da      	lsrs	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3208      	adds	r2, #8
 8003b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	220f      	movs	r2, #15
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	69b9      	ldr	r1, [r7, #24]
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0203 	and.w	r2, r3, #3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b4 	beq.w	8003cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b60      	ldr	r3, [pc, #384]	; (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a5f      	ldr	r2, [pc, #380]	; (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba2:	4a5b      	ldr	r2, [pc, #364]	; (8003d10 <HAL_GPIO_Init+0x310>)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	3302      	adds	r3, #2
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	; (8003d14 <HAL_GPIO_Init+0x314>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02b      	beq.n	8003c26 <HAL_GPIO_Init+0x226>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	; (8003d18 <HAL_GPIO_Init+0x318>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d025      	beq.n	8003c22 <HAL_GPIO_Init+0x222>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a50      	ldr	r2, [pc, #320]	; (8003d1c <HAL_GPIO_Init+0x31c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <HAL_GPIO_Init+0x21e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4f      	ldr	r2, [pc, #316]	; (8003d20 <HAL_GPIO_Init+0x320>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d019      	beq.n	8003c1a <HAL_GPIO_Init+0x21a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <HAL_GPIO_Init+0x324>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_GPIO_Init+0x216>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4d      	ldr	r2, [pc, #308]	; (8003d28 <HAL_GPIO_Init+0x328>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <HAL_GPIO_Init+0x32c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <HAL_GPIO_Init+0x20e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	; (8003d30 <HAL_GPIO_Init+0x330>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_GPIO_Init+0x20a>
 8003c06:	2307      	movs	r3, #7
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	; (8003d10 <HAL_GPIO_Init+0x310>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c46:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c6a:	4a32      	ldr	r2, [pc, #200]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <HAL_GPIO_Init+0x334>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae90 	bls.w	8003a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40013c00 	.word	0x40013c00

08003d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	e001      	b.n	8003d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d84:	e003      	b.n	8003d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	041a      	lsls	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e264      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4ba3      	ldr	r3, [pc, #652]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b99      	ldr	r3, [pc, #612]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e23f      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b91      	ldr	r3, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a90      	ldr	r2, [pc, #576]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b8b      	ldr	r3, [pc, #556]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a8a      	ldr	r2, [pc, #552]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd ffde 	bl	8001e14 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd ffda 	bl	8001e14 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e204      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ffca 	bl	8001e14 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd ffc6 	bl	8001e14 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1f0      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1c4      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4952      	ldr	r1, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd ff7f 	bl	8001e14 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd ff7b 	bl	8001e14 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1a5      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd ff5e 	bl	8001e14 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd ff5a 	bl	8001e14 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e184      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd ff3e 	bl	8001e14 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd ff3a 	bl	8001e14 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e164      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd ff27 	bl	8001e14 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd ff23 	bl	8001e14 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e14d      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd fee9 	bl	8001e14 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e011      	b.n	800406a <HAL_RCC_OscConfig+0x2ce>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
 8004054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fd fedc 	bl	8001e14 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e106      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b85      	ldr	r3, [pc, #532]	; (8004280 <HAL_RCC_OscConfig+0x4e4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a80      	ldr	r2, [pc, #512]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x312>
 8004094:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a7a      	ldr	r2, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	4b78      	ldr	r3, [pc, #480]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a77      	ldr	r2, [pc, #476]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 80040ae:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a74      	ldr	r2, [pc, #464]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	4b72      	ldr	r3, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a71      	ldr	r2, [pc, #452]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fea1 	bl	8001e14 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fe9d 	bl	8001e14 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0c5      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b65      	ldr	r3, [pc, #404]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x33a>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fe8b 	bl	8001e14 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fe87 	bl	8001e14 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0af      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b5a      	ldr	r3, [pc, #360]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b56      	ldr	r3, [pc, #344]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 809b 	beq.w	8004276 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d05c      	beq.n	8004206 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d141      	bne.n	80041d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd fe5b 	bl	8001e14 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd fe57 	bl	8001e14 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e081      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	019b      	lsls	r3, r3, #6
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041aa:	4b37      	ldr	r3, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd fe30 	bl	8001e14 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fd fe2c 	bl	8001e14 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e056      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x41c>
 80041d6:	e04e      	b.n	8004276 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x4ec>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd fe19 	bl	8001e14 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fd fe15 	bl	8001e14 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e03f      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x44a>
 8004204:	e037      	b.n	8004276 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e032      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCC_OscConfig+0x4e8>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d028      	beq.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d121      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d11a      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004248:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	3b01      	subs	r3, #1
 800425c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40007000 	.word	0x40007000
 8004284:	40023800 	.word	0x40023800
 8004288:	42470060 	.word	0x42470060

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0cc      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a0:	4b68      	ldr	r3, [pc, #416]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90c      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d044      	beq.n	80043ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d119      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	2b03      	cmp	r3, #3
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b3b      	ldr	r3, [pc, #236]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e067      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4934      	ldr	r1, [pc, #208]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800437c:	f7fd fd4a 	bl	8001e14 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fd fd46 	bl	8001e14 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b2b      	ldr	r3, [pc, #172]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d20c      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd fcaa 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	0800cf04 	.word	0x0800cf04
 8004450:	20000000 	.word	0x20000000
 8004454:	20000004 	.word	0x20000004

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	2300      	movs	r3, #0
 800446a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004470:	4b67      	ldr	r3, [pc, #412]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d00d      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x40>
 800447c:	2b08      	cmp	r3, #8
 800447e:	f200 80bd 	bhi.w	80045fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x34>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x3a>
 800448a:	e0b7      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448c:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800448e:	60bb      	str	r3, [r7, #8]
       break;
 8004490:	e0b7      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004492:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004494:	60bb      	str	r3, [r7, #8]
      break;
 8004496:	e0b4      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004498:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b5b      	ldr	r3, [pc, #364]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04d      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b58      	ldr	r3, [pc, #352]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	461a      	mov	r2, r3
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	ea02 0800 	and.w	r8, r2, r0
 80044c6:	ea03 0901 	and.w	r9, r3, r1
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	014b      	lsls	r3, r1, #5
 80044d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044dc:	0142      	lsls	r2, r0, #5
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	ebb0 0008 	subs.w	r0, r0, r8
 80044e6:	eb61 0109 	sbc.w	r1, r1, r9
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	018b      	lsls	r3, r1, #6
 80044f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044f8:	0182      	lsls	r2, r0, #6
 80044fa:	1a12      	subs	r2, r2, r0
 80044fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	00d9      	lsls	r1, r3, #3
 800450a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450e:	00d0      	lsls	r0, r2, #3
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	eb12 0208 	adds.w	r2, r2, r8
 8004518:	eb43 0309 	adc.w	r3, r3, r9
 800451c:	f04f 0000 	mov.w	r0, #0
 8004520:	f04f 0100 	mov.w	r1, #0
 8004524:	0259      	lsls	r1, r3, #9
 8004526:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800452a:	0250      	lsls	r0, r2, #9
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	f7fb fea0 	bl	8000280 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e04a      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	461a      	mov	r2, r3
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	ea02 0400 	and.w	r4, r2, r0
 8004562:	ea03 0501 	and.w	r5, r3, r1
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	014b      	lsls	r3, r1, #5
 8004574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004578:	0142      	lsls	r2, r0, #5
 800457a:	4610      	mov	r0, r2
 800457c:	4619      	mov	r1, r3
 800457e:	1b00      	subs	r0, r0, r4
 8004580:	eb61 0105 	sbc.w	r1, r1, r5
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	018b      	lsls	r3, r1, #6
 800458e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004592:	0182      	lsls	r2, r0, #6
 8004594:	1a12      	subs	r2, r2, r0
 8004596:	eb63 0301 	sbc.w	r3, r3, r1
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	00d9      	lsls	r1, r3, #3
 80045a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a8:	00d0      	lsls	r0, r2, #3
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	1912      	adds	r2, r2, r4
 80045b0:	eb45 0303 	adc.w	r3, r5, r3
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	0299      	lsls	r1, r3, #10
 80045be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045c2:	0290      	lsls	r0, r2, #10
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	f7fb fe54 	bl	8000280 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	60bb      	str	r3, [r7, #8]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045fe:	60bb      	str	r3, [r7, #8]
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	68bb      	ldr	r3, [r7, #8]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800463a:	4b8d      	ldr	r3, [pc, #564]	; (8004870 <MX_LWIP_Init+0x23c>)
 800463c:	22c0      	movs	r2, #192	; 0xc0
 800463e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004640:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <MX_LWIP_Init+0x23c>)
 8004642:	22a8      	movs	r2, #168	; 0xa8
 8004644:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004646:	4b8a      	ldr	r3, [pc, #552]	; (8004870 <MX_LWIP_Init+0x23c>)
 8004648:	2201      	movs	r2, #1
 800464a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800464c:	4b88      	ldr	r3, [pc, #544]	; (8004870 <MX_LWIP_Init+0x23c>)
 800464e:	220a      	movs	r2, #10
 8004650:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004652:	4b88      	ldr	r3, [pc, #544]	; (8004874 <MX_LWIP_Init+0x240>)
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004658:	4b86      	ldr	r3, [pc, #536]	; (8004874 <MX_LWIP_Init+0x240>)
 800465a:	22ff      	movs	r2, #255	; 0xff
 800465c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800465e:	4b85      	ldr	r3, [pc, #532]	; (8004874 <MX_LWIP_Init+0x240>)
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004664:	4b83      	ldr	r3, [pc, #524]	; (8004874 <MX_LWIP_Init+0x240>)
 8004666:	2200      	movs	r2, #0
 8004668:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800466a:	4b83      	ldr	r3, [pc, #524]	; (8004878 <MX_LWIP_Init+0x244>)
 800466c:	22c0      	movs	r2, #192	; 0xc0
 800466e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004670:	4b81      	ldr	r3, [pc, #516]	; (8004878 <MX_LWIP_Init+0x244>)
 8004672:	22a8      	movs	r2, #168	; 0xa8
 8004674:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004676:	4b80      	ldr	r3, [pc, #512]	; (8004878 <MX_LWIP_Init+0x244>)
 8004678:	2201      	movs	r2, #1
 800467a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800467c:	4b7e      	ldr	r3, [pc, #504]	; (8004878 <MX_LWIP_Init+0x244>)
 800467e:	2201      	movs	r2, #1
 8004680:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004682:	f001 f81e 	bl	80056c2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004686:	4b7a      	ldr	r3, [pc, #488]	; (8004870 <MX_LWIP_Init+0x23c>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	061a      	lsls	r2, r3, #24
 800468c:	4b78      	ldr	r3, [pc, #480]	; (8004870 <MX_LWIP_Init+0x23c>)
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	4b76      	ldr	r3, [pc, #472]	; (8004870 <MX_LWIP_Init+0x23c>)
 8004696:	789b      	ldrb	r3, [r3, #2]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	4313      	orrs	r3, r2
 800469c:	4a74      	ldr	r2, [pc, #464]	; (8004870 <MX_LWIP_Init+0x23c>)
 800469e:	78d2      	ldrb	r2, [r2, #3]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	061a      	lsls	r2, r3, #24
 80046a4:	4b72      	ldr	r3, [pc, #456]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	0619      	lsls	r1, r3, #24
 80046aa:	4b71      	ldr	r3, [pc, #452]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	4319      	orrs	r1, r3
 80046b2:	4b6f      	ldr	r3, [pc, #444]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046b4:	789b      	ldrb	r3, [r3, #2]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	430b      	orrs	r3, r1
 80046ba:	496d      	ldr	r1, [pc, #436]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046bc:	78c9      	ldrb	r1, [r1, #3]
 80046be:	430b      	orrs	r3, r1
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046c6:	431a      	orrs	r2, r3
 80046c8:	4b69      	ldr	r3, [pc, #420]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	0619      	lsls	r1, r3, #24
 80046ce:	4b68      	ldr	r3, [pc, #416]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	4319      	orrs	r1, r3
 80046d6:	4b66      	ldr	r3, [pc, #408]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046d8:	789b      	ldrb	r3, [r3, #2]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	430b      	orrs	r3, r1
 80046de:	4964      	ldr	r1, [pc, #400]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046e0:	78c9      	ldrb	r1, [r1, #3]
 80046e2:	430b      	orrs	r3, r1
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046ea:	431a      	orrs	r2, r3
 80046ec:	4b60      	ldr	r3, [pc, #384]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0619      	lsls	r1, r3, #24
 80046f2:	4b5f      	ldr	r3, [pc, #380]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	4319      	orrs	r1, r3
 80046fa:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <MX_LWIP_Init+0x23c>)
 80046fc:	789b      	ldrb	r3, [r3, #2]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	430b      	orrs	r3, r1
 8004702:	495b      	ldr	r1, [pc, #364]	; (8004870 <MX_LWIP_Init+0x23c>)
 8004704:	78c9      	ldrb	r1, [r1, #3]
 8004706:	430b      	orrs	r3, r1
 8004708:	0e1b      	lsrs	r3, r3, #24
 800470a:	4313      	orrs	r3, r2
 800470c:	4a5b      	ldr	r2, [pc, #364]	; (800487c <MX_LWIP_Init+0x248>)
 800470e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004710:	4b58      	ldr	r3, [pc, #352]	; (8004874 <MX_LWIP_Init+0x240>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	061a      	lsls	r2, r3, #24
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <MX_LWIP_Init+0x240>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	431a      	orrs	r2, r3
 800471e:	4b55      	ldr	r3, [pc, #340]	; (8004874 <MX_LWIP_Init+0x240>)
 8004720:	789b      	ldrb	r3, [r3, #2]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	4313      	orrs	r3, r2
 8004726:	4a53      	ldr	r2, [pc, #332]	; (8004874 <MX_LWIP_Init+0x240>)
 8004728:	78d2      	ldrb	r2, [r2, #3]
 800472a:	4313      	orrs	r3, r2
 800472c:	061a      	lsls	r2, r3, #24
 800472e:	4b51      	ldr	r3, [pc, #324]	; (8004874 <MX_LWIP_Init+0x240>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	0619      	lsls	r1, r3, #24
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <MX_LWIP_Init+0x240>)
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	4319      	orrs	r1, r3
 800473c:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <MX_LWIP_Init+0x240>)
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	430b      	orrs	r3, r1
 8004744:	494b      	ldr	r1, [pc, #300]	; (8004874 <MX_LWIP_Init+0x240>)
 8004746:	78c9      	ldrb	r1, [r1, #3]
 8004748:	430b      	orrs	r3, r1
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004750:	431a      	orrs	r2, r3
 8004752:	4b48      	ldr	r3, [pc, #288]	; (8004874 <MX_LWIP_Init+0x240>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	0619      	lsls	r1, r3, #24
 8004758:	4b46      	ldr	r3, [pc, #280]	; (8004874 <MX_LWIP_Init+0x240>)
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	4319      	orrs	r1, r3
 8004760:	4b44      	ldr	r3, [pc, #272]	; (8004874 <MX_LWIP_Init+0x240>)
 8004762:	789b      	ldrb	r3, [r3, #2]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	430b      	orrs	r3, r1
 8004768:	4942      	ldr	r1, [pc, #264]	; (8004874 <MX_LWIP_Init+0x240>)
 800476a:	78c9      	ldrb	r1, [r1, #3]
 800476c:	430b      	orrs	r3, r1
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004774:	431a      	orrs	r2, r3
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <MX_LWIP_Init+0x240>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	0619      	lsls	r1, r3, #24
 800477c:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <MX_LWIP_Init+0x240>)
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	4319      	orrs	r1, r3
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <MX_LWIP_Init+0x240>)
 8004786:	789b      	ldrb	r3, [r3, #2]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	430b      	orrs	r3, r1
 800478c:	4939      	ldr	r1, [pc, #228]	; (8004874 <MX_LWIP_Init+0x240>)
 800478e:	78c9      	ldrb	r1, [r1, #3]
 8004790:	430b      	orrs	r3, r1
 8004792:	0e1b      	lsrs	r3, r3, #24
 8004794:	4313      	orrs	r3, r2
 8004796:	4a3a      	ldr	r2, [pc, #232]	; (8004880 <MX_LWIP_Init+0x24c>)
 8004798:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <MX_LWIP_Init+0x244>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	061a      	lsls	r2, r3, #24
 80047a0:	4b35      	ldr	r3, [pc, #212]	; (8004878 <MX_LWIP_Init+0x244>)
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	4b33      	ldr	r3, [pc, #204]	; (8004878 <MX_LWIP_Init+0x244>)
 80047aa:	789b      	ldrb	r3, [r3, #2]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	4313      	orrs	r3, r2
 80047b0:	4a31      	ldr	r2, [pc, #196]	; (8004878 <MX_LWIP_Init+0x244>)
 80047b2:	78d2      	ldrb	r2, [r2, #3]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	061a      	lsls	r2, r3, #24
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <MX_LWIP_Init+0x244>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	0619      	lsls	r1, r3, #24
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <MX_LWIP_Init+0x244>)
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	4319      	orrs	r1, r3
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <MX_LWIP_Init+0x244>)
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	430b      	orrs	r3, r1
 80047ce:	492a      	ldr	r1, [pc, #168]	; (8004878 <MX_LWIP_Init+0x244>)
 80047d0:	78c9      	ldrb	r1, [r1, #3]
 80047d2:	430b      	orrs	r3, r1
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047da:	431a      	orrs	r2, r3
 80047dc:	4b26      	ldr	r3, [pc, #152]	; (8004878 <MX_LWIP_Init+0x244>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	0619      	lsls	r1, r3, #24
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <MX_LWIP_Init+0x244>)
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	4319      	orrs	r1, r3
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <MX_LWIP_Init+0x244>)
 80047ec:	789b      	ldrb	r3, [r3, #2]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	430b      	orrs	r3, r1
 80047f2:	4921      	ldr	r1, [pc, #132]	; (8004878 <MX_LWIP_Init+0x244>)
 80047f4:	78c9      	ldrb	r1, [r1, #3]
 80047f6:	430b      	orrs	r3, r1
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047fe:	431a      	orrs	r2, r3
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <MX_LWIP_Init+0x244>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	0619      	lsls	r1, r3, #24
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <MX_LWIP_Init+0x244>)
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	4319      	orrs	r1, r3
 800480e:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <MX_LWIP_Init+0x244>)
 8004810:	789b      	ldrb	r3, [r3, #2]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	430b      	orrs	r3, r1
 8004816:	4918      	ldr	r1, [pc, #96]	; (8004878 <MX_LWIP_Init+0x244>)
 8004818:	78c9      	ldrb	r1, [r1, #3]
 800481a:	430b      	orrs	r3, r1
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	4313      	orrs	r3, r2
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <MX_LWIP_Init+0x250>)
 8004822:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <MX_LWIP_Init+0x254>)
 8004826:	9302      	str	r3, [sp, #8]
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <MX_LWIP_Init+0x258>)
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	2300      	movs	r3, #0
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4b14      	ldr	r3, [pc, #80]	; (8004884 <MX_LWIP_Init+0x250>)
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <MX_LWIP_Init+0x24c>)
 8004834:	4911      	ldr	r1, [pc, #68]	; (800487c <MX_LWIP_Init+0x248>)
 8004836:	4816      	ldr	r0, [pc, #88]	; (8004890 <MX_LWIP_Init+0x25c>)
 8004838:	f001 fbe6 	bl	8006008 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800483c:	4814      	ldr	r0, [pc, #80]	; (8004890 <MX_LWIP_Init+0x25c>)
 800483e:	f001 fd91 	bl	8006364 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <MX_LWIP_Init+0x25c>)
 8004844:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004854:	480e      	ldr	r0, [pc, #56]	; (8004890 <MX_LWIP_Init+0x25c>)
 8004856:	f001 fd95 	bl	8006384 <netif_set_up>
 800485a:	e002      	b.n	8004862 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800485c:	480c      	ldr	r0, [pc, #48]	; (8004890 <MX_LWIP_Init+0x25c>)
 800485e:	f001 fdfd 	bl	800645c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004862:	490c      	ldr	r1, [pc, #48]	; (8004894 <MX_LWIP_Init+0x260>)
 8004864:	480a      	ldr	r0, [pc, #40]	; (8004890 <MX_LWIP_Init+0x25c>)
 8004866:	f001 fe2b 	bl	80064c0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200002a0 	.word	0x200002a0
 8004874:	2000029c 	.word	0x2000029c
 8004878:	20000260 	.word	0x20000260
 800487c:	20000298 	.word	0x20000298
 8004880:	200002a4 	.word	0x200002a4
 8004884:	200002a8 	.word	0x200002a8
 8004888:	0800a519 	.word	0x0800a519
 800488c:	08004e3d 	.word	0x08004e3d
 8004890:	20000264 	.word	0x20000264
 8004894:	08004ea9 	.word	0x08004ea9

08004898 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <MX_LWIP_Process+0x14>)
 800489e:	f000 faad 	bl	8004dfc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80048a2:	f002 fe9f 	bl	80075e4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000264 	.word	0x20000264

080048b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a46      	ldr	r2, [pc, #280]	; (80049e8 <HAL_ETH_MspInit+0x138>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	f040 8085 	bne.w	80049de <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	4b44      	ldr	r3, [pc, #272]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	4a43      	ldr	r2, [pc, #268]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 80048de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048e2:	6313      	str	r3, [r2, #48]	; 0x30
 80048e4:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	2300      	movs	r3, #0
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	4a3c      	ldr	r2, [pc, #240]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 80048fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004900:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2300      	movs	r3, #0
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800491a:	6313      	str	r3, [r2, #48]	; 0x30
 800491c:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	4a2e      	ldr	r2, [pc, #184]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	6313      	str	r3, [r2, #48]	; 0x30
 8004938:	4b2c      	ldr	r3, [pc, #176]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	4b28      	ldr	r3, [pc, #160]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6313      	str	r3, [r2, #48]	; 0x30
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	6313      	str	r3, [r2, #48]	; 0x30
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_ETH_MspInit+0x13c>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800497c:	2332      	movs	r3, #50	; 0x32
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004980:	2302      	movs	r3, #2
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004988:	2303      	movs	r3, #3
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800498c:	230b      	movs	r3, #11
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004994:	4619      	mov	r1, r3
 8004996:	4816      	ldr	r0, [pc, #88]	; (80049f0 <HAL_ETH_MspInit+0x140>)
 8004998:	f7ff f832 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800499c:	2386      	movs	r3, #134	; 0x86
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a0:	2302      	movs	r3, #2
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a8:	2303      	movs	r3, #3
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049ac:	230b      	movs	r3, #11
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049b4:	4619      	mov	r1, r3
 80049b6:	480f      	ldr	r0, [pc, #60]	; (80049f4 <HAL_ETH_MspInit+0x144>)
 80049b8:	f7ff f822 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80049bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c2:	2302      	movs	r3, #2
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ca:	2303      	movs	r3, #3
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049ce:	230b      	movs	r3, #11
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d6:	4619      	mov	r1, r3
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <HAL_ETH_MspInit+0x148>)
 80049da:	f7ff f811 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049de:	bf00      	nop
 80049e0:	3738      	adds	r7, #56	; 0x38
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40028000 	.word	0x40028000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400

080049fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a08:	4b4d      	ldr	r3, [pc, #308]	; (8004b40 <low_level_init+0x144>)
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <low_level_init+0x148>)
 8004a0c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004a0e:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <low_level_init+0x144>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004a14:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <low_level_init+0x144>)
 8004a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a1a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a1c:	4b48      	ldr	r3, [pc, #288]	; (8004b40 <low_level_init+0x144>)
 8004a1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a22:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004a24:	4b46      	ldr	r3, [pc, #280]	; (8004b40 <low_level_init+0x144>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004a32:	23e1      	movs	r3, #225	; 0xe1
 8004a34:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004a36:	2300      	movs	r3, #0
 8004a38:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004a42:	4a3f      	ldr	r2, [pc, #252]	; (8004b40 <low_level_init+0x144>)
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <low_level_init+0x144>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <low_level_init+0x144>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004a56:	4b3a      	ldr	r3, [pc, #232]	; (8004b40 <low_level_init+0x144>)
 8004a58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a5c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a5e:	4838      	ldr	r0, [pc, #224]	; (8004b40 <low_level_init+0x144>)
 8004a60:	f7fd fb34 	bl	80020cc <HAL_ETH_Init>
 8004a64:	4603      	mov	r3, r0
 8004a66:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004a80:	2304      	movs	r3, #4
 8004a82:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <low_level_init+0x14c>)
 8004a84:	4931      	ldr	r1, [pc, #196]	; (8004b4c <low_level_init+0x150>)
 8004a86:	482e      	ldr	r0, [pc, #184]	; (8004b40 <low_level_init+0x144>)
 8004a88:	f7fd fcbc 	bl	8002404 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <low_level_init+0x154>)
 8004a90:	4930      	ldr	r1, [pc, #192]	; (8004b54 <low_level_init+0x158>)
 8004a92:	482b      	ldr	r0, [pc, #172]	; (8004b40 <low_level_init+0x144>)
 8004a94:	f7fd fd1f 	bl	80024d6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2206      	movs	r2, #6
 8004a9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <low_level_init+0x144>)
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <low_level_init+0x144>)
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	785a      	ldrb	r2, [r3, #1]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <low_level_init+0x144>)
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	789a      	ldrb	r2, [r3, #2]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <low_level_init+0x144>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	78da      	ldrb	r2, [r3, #3]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <low_level_init+0x144>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	791a      	ldrb	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <low_level_init+0x144>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	795a      	ldrb	r2, [r3, #5]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004aee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af6:	f043 030a 	orr.w	r3, r3, #10
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004b02:	480f      	ldr	r0, [pc, #60]	; (8004b40 <low_level_init+0x144>)
 8004b04:	f7fd ff90 	bl	8002a28 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	211d      	movs	r1, #29
 8004b10:	480b      	ldr	r0, [pc, #44]	; (8004b40 <low_level_init+0x144>)
 8004b12:	f7fd febb 	bl	800288c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f043 030b 	orr.w	r3, r3, #11
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	461a      	mov	r2, r3
 8004b22:	211d      	movs	r1, #29
 8004b24:	4806      	ldr	r0, [pc, #24]	; (8004b40 <low_level_init+0x144>)
 8004b26:	f7fd ff19 	bl	800295c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004b2a:	f107 0310 	add.w	r3, r7, #16
 8004b2e:	461a      	mov	r2, r3
 8004b30:	211d      	movs	r1, #29
 8004b32:	4803      	ldr	r0, [pc, #12]	; (8004b40 <low_level_init+0x144>)
 8004b34:	f7fd feaa 	bl	800288c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b38:	bf00      	nop
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20001b7c 	.word	0x20001b7c
 8004b44:	40028000 	.word	0x40028000
 8004b48:	20001bc4 	.word	0x20001bc4
 8004b4c:	200002ac 	.word	0x200002ac
 8004b50:	2000032c 	.word	0x2000032c
 8004b54:	20001afc 	.word	0x20001afc

08004b58 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004b62:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <low_level_output+0x138>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004b7a:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <low_level_output+0x138>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	e05a      	b.n	8004c40 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da03      	bge.n	8004b9a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004b92:	23f8      	movs	r3, #248	; 0xf8
 8004b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004b98:	e05c      	b.n	8004c54 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	895b      	ldrh	r3, [r3, #10]
 8004b9e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ba4:	e02f      	b.n	8004c06 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	18d0      	adds	r0, r2, r3
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	18d1      	adds	r1, r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004bba:	3304      	adds	r3, #4
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f005 fdc3 	bl	800a748 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da03      	bge.n	8004bd8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004bd0:	23f8      	movs	r3, #248	; 0xf8
 8004bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004bd6:	e03d      	b.n	8004c54 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004be8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004bf4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c00:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d8c8      	bhi.n	8004ba6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	18d0      	adds	r0, r2, r3
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4413      	add	r3, r2
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4619      	mov	r1, r3
 8004c26:	f005 fd8f 	bl	800a748 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1a1      	bne.n	8004b8a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004c46:	6979      	ldr	r1, [r7, #20]
 8004c48:	4811      	ldr	r0, [pc, #68]	; (8004c90 <low_level_output+0x138>)
 8004c4a:	f7fd fcb1 	bl	80025b0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <low_level_output+0x138>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <low_level_output+0x138>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	3314      	adds	r3, #20
 8004c72:	2220      	movs	r2, #32
 8004c74:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <low_level_output+0x138>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	3304      	adds	r3, #4
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3728      	adds	r7, #40	; 0x28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20001b7c 	.word	0x20001b7c

08004c94 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004cb8:	484f      	ldr	r0, [pc, #316]	; (8004df8 <low_level_input+0x164>)
 8004cba:	f7fd fd63 	bl	8002784 <HAL_ETH_GetReceivedFrame>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <low_level_input+0x34>

    return NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e092      	b.n	8004dee <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004cc8:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <low_level_input+0x164>)
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004cce:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <low_level_input+0x164>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f001 fc5c 	bl	80065a0 <pbuf_alloc>
 8004ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d04b      	beq.n	8004d88 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004cf0:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <low_level_input+0x164>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfe:	e040      	b.n	8004d82 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	895b      	ldrh	r3, [r3, #10]
 8004d04:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004d0a:	e021      	b.n	8004d50 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	18d0      	adds	r0, r2, r3
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	18d1      	adds	r1, r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d20:	3304      	adds	r3, #4
 8004d22:	461a      	mov	r2, r3
 8004d24:	f005 fd10 	bl	800a748 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004d3e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d4a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d8d6      	bhi.n	8004d0c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	18d0      	adds	r0, r2, r3
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f005 fcea 	bl	800a748 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1bb      	bne.n	8004d00 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <low_level_input+0x164>)
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e00b      	b.n	8004dac <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <low_level_input+0x164>)
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3ee      	bcc.n	8004d94 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <low_level_input+0x164>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004dbc:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <low_level_input+0x164>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <low_level_input+0x164>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd8:	3314      	adds	r3, #20
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <low_level_input+0x164>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de6:	3308      	adds	r3, #8
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20001b7c 	.word	0x20001b7c

08004dfc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ff45 	bl	8004c94 <low_level_input>
 8004e0a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	4798      	blx	r3
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004e20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d006      	beq.n	8004e36 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f001 fe9b 	bl	8006b64 <pbuf_free>
    p = NULL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e000      	b.n	8004e36 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004e34:	bf00      	nop
  }
}
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <ethernetif_init+0x1c>
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <ethernetif_init+0x48>)
 8004e4c:	f240 2207 	movw	r2, #519	; 0x207
 8004e50:	490d      	ldr	r1, [pc, #52]	; (8004e88 <ethernetif_init+0x4c>)
 8004e52:	480e      	ldr	r0, [pc, #56]	; (8004e8c <ethernetif_init+0x50>)
 8004e54:	f005 fd38 	bl	800a8c8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2273      	movs	r2, #115	; 0x73
 8004e5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2274      	movs	r2, #116	; 0x74
 8004e64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <ethernetif_init+0x54>)
 8004e6c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <ethernetif_init+0x58>)
 8004e72:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff fdc1 	bl	80049fc <low_level_init>

  return ERR_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0800b7c8 	.word	0x0800b7c8
 8004e88:	0800b7e4 	.word	0x0800b7e4
 8004e8c:	0800b7f4 	.word	0x0800b7f4
 8004e90:	080089f1 	.word	0x080089f1
 8004e94:	08004b59 	.word	0x08004b59

08004e98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e9c:	f7fc ffba 	bl	8001e14 <HAL_GetTick>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ebe:	089b      	lsrs	r3, r3, #2
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d05d      	beq.n	8004f86 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d03f      	beq.n	8004f52 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4830      	ldr	r0, [pc, #192]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004eda:	f7fd fd3f 	bl	800295c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004ede:	f7fc ff99 	bl	8001e14 <HAL_GetTick>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	461a      	mov	r2, r3
 8004eec:	2101      	movs	r1, #1
 8004eee:	482b      	ldr	r0, [pc, #172]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004ef0:	f7fd fccc 	bl	800288c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004ef4:	f7fc ff8e 	bl	8001e14 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f02:	d828      	bhi.n	8004f56 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0eb      	beq.n	8004ee6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	461a      	mov	r2, r3
 8004f14:	2110      	movs	r1, #16
 8004f16:	4821      	ldr	r0, [pc, #132]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f18:	f7fd fcb8 	bl	800288c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004f26:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	e002      	b.n	8004f36 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
 8004f46:	e016      	b.n	8004f76 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e011      	b.n	8004f76 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004f52:	bf00      	nop
 8004f54:	e000      	b.n	8004f58 <ethernetif_update_config+0xb0>
          goto error;
 8004f56:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2100      	movs	r1, #0
 8004f70:	480a      	ldr	r0, [pc, #40]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f72:	f7fd fcf3 	bl	800295c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004f76:	2100      	movs	r1, #0
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f7a:	f7fd fdb3 	bl	8002ae4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004f7e:	4807      	ldr	r0, [pc, #28]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f80:	f7fd fd52 	bl	8002a28 <HAL_ETH_Start>
 8004f84:	e002      	b.n	8004f8c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004f86:	4805      	ldr	r0, [pc, #20]	; (8004f9c <ethernetif_update_config+0xf4>)
 8004f88:	f7fd fd7d 	bl	8002a86 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f807 	bl	8004fa0 <ethernetif_notify_conn_changed>
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20001b7c 	.word	0x20001b7c

08004fa0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <close_handle+0x50>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <close_handle+0x50>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <close_handle+0x50>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <close_handle+0x50>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fdc7 	bl	8006b64 <pbuf_free>
    tftp_state.last_data = NULL;
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <close_handle+0x50>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	480a      	ldr	r0, [pc, #40]	; (8005008 <close_handle+0x54>)
 8004fe0:	f002 fac6 	bl	8007570 <sys_untimeout>

  if (tftp_state.handle) {
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <close_handle+0x50>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <close_handle+0x4c>
    tftp_state.ctx->close(tftp_state.handle);
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <close_handle+0x50>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a04      	ldr	r2, [pc, #16]	; (8005004 <close_handle+0x50>)
 8004ff4:	6852      	ldr	r2, [r2, #4]
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4798      	blx	r3
    tftp_state.handle = NULL;
 8004ffa:	4b02      	ldr	r3, [pc, #8]	; (8005004 <close_handle+0x50>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 8005000:	bf00      	nop
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000098 	.word	0x20000098
 8005008:	080055a1 	.word	0x080055a1

0800500c <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	817b      	strh	r3, [r7, #10]
 800501a:	4613      	mov	r3, r2
 800501c:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fb f8d6 	bl	80001d0 <strlen>
 8005024:	4603      	mov	r3, r0
 8005026:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	b29b      	uxth	r3, r3
 800502c:	3305      	adds	r3, #5
 800502e:	b29b      	uxth	r3, r3
 8005030:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005034:	4619      	mov	r1, r3
 8005036:	2036      	movs	r0, #54	; 0x36
 8005038:	f001 fab2 	bl	80065a0 <pbuf_alloc>
 800503c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d022      	beq.n	800508a <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005050:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 8005052:	7a7b      	ldrb	r3, [r7, #9]
 8005054:	b29a      	uxth	r2, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1c9c      	adds	r4, r3, #2
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fb1c 	bl	8005698 <lwip_htons>
 8005060:	4603      	mov	r3, r0
 8005062:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	3301      	adds	r3, #1
 800506c:	461a      	mov	r2, r3
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	f005 fb6a 	bl	800a748 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <send_error+0x88>)
 8005076:	68d8      	ldr	r0, [r3, #12]
 8005078:	897b      	ldrh	r3, [r7, #10]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	f002 fce1 	bl	8007a44 <udp_sendto>
  pbuf_free(p);
 8005082:	69b8      	ldr	r0, [r7, #24]
 8005084:	f001 fd6e 	bl	8006b64 <pbuf_free>
 8005088:	e000      	b.n	800508c <send_error+0x80>
    return;
 800508a:	bf00      	nop
}
 800508c:	3724      	adds	r7, #36	; 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20000098 	.word	0x20000098

08005098 <send_ack>:

static void
send_ack(u16_t blknum)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 80050a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80050a6:	2104      	movs	r1, #4
 80050a8:	2036      	movs	r0, #54	; 0x36
 80050aa:	f001 fa79 	bl	80065a0 <pbuf_alloc>
 80050ae:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01a      	beq.n	80050ec <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050c2:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	1c9c      	adds	r4, r3, #2
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fae4 	bl	8005698 <lwip_htons>
 80050d0:	4603      	mov	r3, r0
 80050d2:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 80050d4:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <send_ack+0x5c>)
 80050d6:	68d8      	ldr	r0, [r3, #12]
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <send_ack+0x5c>)
 80050da:	8a9b      	ldrh	r3, [r3, #20]
 80050dc:	4a06      	ldr	r2, [pc, #24]	; (80050f8 <send_ack+0x60>)
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	f002 fcb0 	bl	8007a44 <udp_sendto>
  pbuf_free(p);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f001 fd3d 	bl	8006b64 <pbuf_free>
 80050ea:	e000      	b.n	80050ee <send_ack+0x56>
    return;
 80050ec:	bf00      	nop
}
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd90      	pop	{r4, r7, pc}
 80050f4:	20000098 	.word	0x20000098
 80050f8:	200000a8 	.word	0x200000a8

080050fc <resend_data>:

static void
resend_data(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <resend_data+0x5c>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	895b      	ldrh	r3, [r3, #10]
 8005108:	f44f 7220 	mov.w	r2, #640	; 0x280
 800510c:	4619      	mov	r1, r3
 800510e:	2036      	movs	r0, #54	; 0x36
 8005110:	f001 fa46 	bl	80065a0 <pbuf_alloc>
 8005114:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d018      	beq.n	800514e <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <resend_data+0x5c>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fe46 	bl	8006db4 <pbuf_copy>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <resend_data+0x3a>
    pbuf_free(p);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fd18 	bl	8006b64 <pbuf_free>
    return;
 8005134:	e00c      	b.n	8005150 <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <resend_data+0x5c>)
 8005138:	68d8      	ldr	r0, [r3, #12]
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <resend_data+0x5c>)
 800513c:	8a9b      	ldrh	r3, [r3, #20]
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <resend_data+0x60>)
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	f002 fc7f 	bl	8007a44 <udp_sendto>
  pbuf_free(p);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fd0c 	bl	8006b64 <pbuf_free>
 800514c:	e000      	b.n	8005150 <resend_data+0x54>
    return;
 800514e:	bf00      	nop
}
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000098 	.word	0x20000098
 800515c:	200000a8 	.word	0x200000a8

08005160 <send_data>:

static void
send_data(void)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 8005166:	4b28      	ldr	r3, [pc, #160]	; (8005208 <send_data+0xa8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <send_data+0xa8>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fcf6 	bl	8006b64 <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 8005178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800517c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005180:	2036      	movs	r0, #54	; 0x36
 8005182:	f001 fa0d 	bl	80065a0 <pbuf_alloc>
 8005186:	4603      	mov	r3, r0
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <send_data+0xa8>)
 800518a:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 800518c:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <send_data+0xa8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d035      	beq.n	8005200 <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 8005194:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <send_data+0xa8>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80051a2:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <send_data+0xa8>)
 80051a6:	8c1a      	ldrh	r2, [r3, #32]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1c9c      	adds	r4, r3, #2
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 fa73 	bl	8005698 <lwip_htons>
 80051b2:	4603      	mov	r3, r0
 80051b4:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <send_data+0xa8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a12      	ldr	r2, [pc, #72]	; (8005208 <send_data+0xa8>)
 80051be:	6850      	ldr	r0, [r2, #4]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	1d11      	adds	r1, r2, #4
 80051c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c8:	4798      	blx	r3
 80051ca:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da09      	bge.n	80051e6 <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <send_data+0xa8>)
 80051d4:	8a99      	ldrh	r1, [r3, #20]
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <send_data+0xac>)
 80051d8:	2202      	movs	r2, #2
 80051da:	480d      	ldr	r0, [pc, #52]	; (8005210 <send_data+0xb0>)
 80051dc:	f7ff ff16 	bl	800500c <send_error>
    close_handle();
 80051e0:	f7ff fee8 	bl	8004fb4 <close_handle>
    return;
 80051e4:	e00d      	b.n	8005202 <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <send_data+0xa8>)
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3304      	adds	r3, #4
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f001 fb2f 	bl	8006858 <pbuf_realloc>
  resend_data();
 80051fa:	f7ff ff7f 	bl	80050fc <resend_data>
 80051fe:	e000      	b.n	8005202 <send_data+0xa2>
    return;
 8005200:	bf00      	nop
}
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	20000098 	.word	0x20000098
 800520c:	0800b81c 	.word	0x0800b81c
 8005210:	200000a8 	.word	0x200000a8

08005214 <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b092      	sub	sp, #72	; 0x48
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	643b      	str	r3, [r7, #64]	; 0x40
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8005228:	4ba7      	ldr	r3, [pc, #668]	; (80054c8 <recv+0x2b4>)
 800522a:	8a9b      	ldrh	r3, [r3, #20]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <recv+0x28>
 8005230:	4ba5      	ldr	r3, [pc, #660]	; (80054c8 <recv+0x2b4>)
 8005232:	8a9b      	ldrh	r3, [r3, #20]
 8005234:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005238:	429a      	cmp	r2, r3
 800523a:	d109      	bne.n	8005250 <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800523c:	4ba2      	ldr	r3, [pc, #648]	; (80054c8 <recv+0x2b4>)
 800523e:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8005244:	4ba0      	ldr	r3, [pc, #640]	; (80054c8 <recv+0x2b4>)
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d00a      	beq.n	8005266 <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8005250:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005254:	4b9d      	ldr	r3, [pc, #628]	; (80054cc <recv+0x2b8>)
 8005256:	2202      	movs	r2, #2
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f7ff fed7 	bl	800500c <send_error>
    pbuf_free(p);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fc80 	bl	8006b64 <pbuf_free>
    return;
 8005264:	e190      	b.n	8005588 <recv+0x374>
  }

  opcode = sbuf[0];
 8005266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c

  tftp_state.last_pkt = tftp_state.timer;
 800526c:	4b96      	ldr	r3, [pc, #600]	; (80054c8 <recv+0x2b4>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4a95      	ldr	r2, [pc, #596]	; (80054c8 <recv+0x2b4>)
 8005272:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 8005274:	4b94      	ldr	r3, [pc, #592]	; (80054c8 <recv+0x2b4>)
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  switch (opcode) {
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	f000 8114 	beq.w	80054ae <recv+0x29a>
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528c:	f300 8171 	bgt.w	8005572 <recv+0x35e>
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005296:	f000 80a3 	beq.w	80053e0 <recv+0x1cc>
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a0:	f300 8167 	bgt.w	8005572 <recv+0x35e>
 80052a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d004      	beq.n	80052b6 <recv+0xa2>
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	f040 815e 	bne.w	8005572 <recv+0x35e>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 80052bc:	4b82      	ldr	r3, [pc, #520]	; (80054c8 <recv+0x2b4>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 80052c4:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80052c8:	4b80      	ldr	r3, [pc, #512]	; (80054cc <recv+0x2b8>)
 80052ca:	2202      	movs	r2, #2
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f7ff fe9d 	bl	800500c <send_error>
        break;
 80052d2:	e156      	b.n	8005582 <recv+0x36e>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 80052d4:	2200      	movs	r2, #0
 80052d6:	497e      	ldr	r1, [pc, #504]	; (80054d0 <recv+0x2bc>)
 80052d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052dc:	f002 f922 	bl	8007524 <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 80052e0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80052e4:	2302      	movs	r3, #2
 80052e6:	2201      	movs	r2, #1
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 f823 	bl	8007334 <pbuf_memfind>
 80052ee:	4603      	mov	r3, r0
 80052f0:	867b      	strh	r3, [r7, #50]	; 0x32
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 80052f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b15      	cmp	r3, #21
 80052fa:	d907      	bls.n	800530c <recv+0xf8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 80052fc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005300:	4b74      	ldr	r3, [pc, #464]	; (80054d4 <recv+0x2c0>)
 8005302:	2202      	movs	r2, #2
 8005304:	6838      	ldr	r0, [r7, #0]
 8005306:	f7ff fe81 	bl	800500c <send_error>
        break;
 800530a:	e13a      	b.n	8005582 <recv+0x36e>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 800530c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	f107 0118 	add.w	r1, r7, #24
 8005316:	2302      	movs	r3, #2
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 fe1d 	bl	8006f58 <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 800531e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005320:	3301      	adds	r3, #1
 8005322:	b29b      	uxth	r3, r3
 8005324:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8005328:	2201      	movs	r2, #1
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f002 f802 	bl	8007334 <pbuf_memfind>
 8005330:	4603      	mov	r3, r0
 8005332:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 8005334:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005336:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b08      	cmp	r3, #8
 800533e:	d907      	bls.n	8005350 <recv+0x13c>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 8005340:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005344:	4b64      	ldr	r3, [pc, #400]	; (80054d8 <recv+0x2c4>)
 8005346:	2202      	movs	r2, #2
 8005348:	6838      	ldr	r0, [r7, #0]
 800534a:	f7ff fe5f 	bl	800500c <send_error>
        break;
 800534e:	e118      	b.n	8005582 <recv+0x36e>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 8005350:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005352:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	b29a      	uxth	r2, r3
 8005358:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800535a:	3301      	adds	r3, #1
 800535c:	b29b      	uxth	r3, r3
 800535e:	f107 0110 	add.w	r1, r7, #16
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 fdf8 	bl	8006f58 <pbuf_copy_partial>

      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 8005368:	4b57      	ldr	r3, [pc, #348]	; (80054c8 <recv+0x2b4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005370:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005374:	bf0c      	ite	eq
 8005376:	2201      	moveq	r2, #1
 8005378:	2200      	movne	r2, #0
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	f107 0110 	add.w	r1, r7, #16
 8005380:	f107 0018 	add.w	r0, r7, #24
 8005384:	4798      	blx	r3
 8005386:	4603      	mov	r3, r0
 8005388:	4a4f      	ldr	r2, [pc, #316]	; (80054c8 <recv+0x2b4>)
 800538a:	6053      	str	r3, [r2, #4]
      tftp_state.blknum = 1;
 800538c:	4b4e      	ldr	r3, [pc, #312]	; (80054c8 <recv+0x2b4>)
 800538e:	2201      	movs	r2, #1
 8005390:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 8005392:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <recv+0x2b4>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <recv+0x196>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 800539a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800539e:	4b4f      	ldr	r3, [pc, #316]	; (80054dc <recv+0x2c8>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f7ff fe32 	bl	800500c <send_error>
        break;
 80053a8:	e0eb      	b.n	8005582 <recv+0x36e>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a46      	ldr	r2, [pc, #280]	; (80054c8 <recv+0x2b4>)
 80053b0:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 80053b2:	4a45      	ldr	r2, [pc, #276]	; (80054c8 <recv+0x2b4>)
 80053b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80053b8:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c0:	d107      	bne.n	80053d2 <recv+0x1be>
        tftp_state.mode_write = 1;
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <recv+0x2b4>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_ack(0);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7ff fe64 	bl	8005098 <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 80053d0:	e0d7      	b.n	8005582 <recv+0x36e>
        tftp_state.mode_write = 0;
 80053d2:	4b3d      	ldr	r3, [pc, #244]	; (80054c8 <recv+0x2b4>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_data();
 80053da:	f7ff fec1 	bl	8005160 <send_data>
      break;
 80053de:	e0d0      	b.n	8005582 <recv+0x36e>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 80053e0:	4b39      	ldr	r3, [pc, #228]	; (80054c8 <recv+0x2b4>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <recv+0x1e4>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80053e8:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <recv+0x2cc>)
 80053ee:	2202      	movs	r2, #2
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	f7ff fe0b 	bl	800500c <send_error>
        break;
 80053f6:	e0c4      	b.n	8005582 <recv+0x36e>
      }

      if (tftp_state.mode_write != 1) {
 80053f8:	4b33      	ldr	r3, [pc, #204]	; (80054c8 <recv+0x2b4>)
 80053fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d007      	beq.n	8005412 <recv+0x1fe>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 8005402:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005406:	4b37      	ldr	r3, [pc, #220]	; (80054e4 <recv+0x2d0>)
 8005408:	2202      	movs	r2, #2
 800540a:	6838      	ldr	r0, [r7, #0]
 800540c:	f7ff fdfe 	bl	800500c <send_error>
        break;
 8005410:	e0b7      	b.n	8005582 <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 8005412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005414:	3302      	adds	r3, #2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f93d 	bl	8005698 <lwip_htons>
 800541e:	4603      	mov	r3, r0
 8005420:	873b      	strh	r3, [r7, #56]	; 0x38
      if (blknum == tftp_state.blknum) {
 8005422:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <recv+0x2b4>)
 8005424:	8c1b      	ldrh	r3, [r3, #32]
 8005426:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005428:	429a      	cmp	r2, r3
 800542a:	d12c      	bne.n	8005486 <recv+0x272>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 800542c:	2104      	movs	r1, #4
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fb12 	bl	8006a58 <pbuf_remove_header>

        ret = tftp_state.ctx->write(tftp_state.handle, p);
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <recv+0x2b4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <recv+0x2b4>)
 800543c:	6852      	ldr	r2, [r2, #4]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
 8005444:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret < 0) {
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	da09      	bge.n	8005460 <recv+0x24c>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 800544c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <recv+0x2d4>)
 8005452:	2202      	movs	r2, #2
 8005454:	6838      	ldr	r0, [r7, #0]
 8005456:	f7ff fdd9 	bl	800500c <send_error>
          close_handle();
 800545a:	f7ff fdab 	bl	8004fb4 <close_handle>
 800545e:	e003      	b.n	8005468 <recv+0x254>
        } else {
          send_ack(blknum);
 8005460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe18 	bl	8005098 <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	891b      	ldrh	r3, [r3, #8]
 800546c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005470:	d202      	bcs.n	8005478 <recv+0x264>
          close_handle();
 8005472:	f7ff fd9f 	bl	8004fb4 <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 8005476:	e084      	b.n	8005582 <recv+0x36e>
          tftp_state.blknum++;
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <recv+0x2b4>)
 800547a:	8c1b      	ldrh	r3, [r3, #32]
 800547c:	3301      	adds	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <recv+0x2b4>)
 8005482:	841a      	strh	r2, [r3, #32]
      break;
 8005484:	e07d      	b.n	8005582 <recv+0x36e>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 8005486:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005488:	3301      	adds	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <recv+0x2b4>)
 800548e:	8c1b      	ldrh	r3, [r3, #32]
 8005490:	429a      	cmp	r2, r3
 8005492:	d104      	bne.n	800549e <recv+0x28a>
        send_ack(blknum);
 8005494:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fdfe 	bl	8005098 <send_ack>
      break;
 800549c:	e071      	b.n	8005582 <recv+0x36e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800549e:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <recv+0x2d8>)
 80054a4:	2205      	movs	r2, #5
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f7ff fdb0 	bl	800500c <send_error>
      break;
 80054ac:	e069      	b.n	8005582 <recv+0x36e>

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <recv+0x2b4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11c      	bne.n	80054f0 <recv+0x2dc>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80054b6:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <recv+0x2cc>)
 80054bc:	2202      	movs	r2, #2
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f7ff fda4 	bl	800500c <send_error>
        break;
 80054c4:	e05d      	b.n	8005582 <recv+0x36e>
 80054c6:	bf00      	nop
 80054c8:	20000098 	.word	0x20000098
 80054cc:	0800b844 	.word	0x0800b844
 80054d0:	080055a1 	.word	0x080055a1
 80054d4:	0800b870 	.word	0x0800b870
 80054d8:	0800b898 	.word	0x0800b898
 80054dc:	0800b8bc 	.word	0x0800b8bc
 80054e0:	0800b8dc 	.word	0x0800b8dc
 80054e4:	0800b8ec 	.word	0x0800b8ec
 80054e8:	0800b904 	.word	0x0800b904
 80054ec:	0800b918 	.word	0x0800b918
      }

      if (tftp_state.mode_write != 0) {
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <recv+0x37c>)
 80054f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d007      	beq.n	800550a <recv+0x2f6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 80054fa:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80054fe:	4b25      	ldr	r3, [pc, #148]	; (8005594 <recv+0x380>)
 8005500:	2202      	movs	r2, #2
 8005502:	6838      	ldr	r0, [r7, #0]
 8005504:	f7ff fd82 	bl	800500c <send_error>
        break;
 8005508:	e03b      	b.n	8005582 <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 800550a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550c:	3302      	adds	r3, #2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f8c1 	bl	8005698 <lwip_htons>
 8005516:	4603      	mov	r3, r0
 8005518:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (blknum != tftp_state.blknum) {
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <recv+0x37c>)
 800551c:	8c1b      	ldrh	r3, [r3, #32]
 800551e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005520:	429a      	cmp	r2, r3
 8005522:	d007      	beq.n	8005534 <recv+0x320>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 8005524:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <recv+0x384>)
 800552a:	2205      	movs	r2, #5
 800552c:	6838      	ldr	r0, [r7, #0]
 800552e:	f7ff fd6d 	bl	800500c <send_error>
        break;
 8005532:	e026      	b.n	8005582 <recv+0x36e>
      }

      lastpkt = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	647b      	str	r3, [r7, #68]	; 0x44

      if (tftp_state.last_data != NULL) {
 8005538:	4b15      	ldr	r3, [pc, #84]	; (8005590 <recv+0x37c>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <recv+0x340>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <recv+0x37c>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	891b      	ldrh	r3, [r3, #8]
 8005546:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
      }

      if (!lastpkt) {
 8005554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <recv+0x358>
        tftp_state.blknum++;
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <recv+0x37c>)
 800555c:	8c1b      	ldrh	r3, [r3, #32]
 800555e:	3301      	adds	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <recv+0x37c>)
 8005564:	841a      	strh	r2, [r3, #32]
        send_data();
 8005566:	f7ff fdfb 	bl	8005160 <send_data>
      } else {
        close_handle();
      }

      break;
 800556a:	e00a      	b.n	8005582 <recv+0x36e>
        close_handle();
 800556c:	f7ff fd22 	bl	8004fb4 <close_handle>
      break;
 8005570:	e007      	b.n	8005582 <recv+0x36e>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 8005572:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <recv+0x388>)
 8005578:	2204      	movs	r2, #4
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f7ff fd46 	bl	800500c <send_error>
      break;
 8005580:	bf00      	nop
  }

  pbuf_free(p);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 faee 	bl	8006b64 <pbuf_free>
}
 8005588:	3748      	adds	r7, #72	; 0x48
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000098 	.word	0x20000098
 8005594:	0800b92c 	.word	0x0800b92c
 8005598:	0800b918 	.word	0x0800b918
 800559c:	0800b944 	.word	0x0800b944

080055a0 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <tftp_tmr+0x6c>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	3301      	adds	r3, #1
 80055ae:	4a17      	ldr	r2, [pc, #92]	; (800560c <tftp_tmr+0x6c>)
 80055b0:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <tftp_tmr+0x6c>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d023      	beq.n	8005602 <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 80055ba:	2200      	movs	r2, #0
 80055bc:	4914      	ldr	r1, [pc, #80]	; (8005610 <tftp_tmr+0x70>)
 80055be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055c2:	f001 ffaf 	bl	8007524 <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 80055c6:	4b11      	ldr	r3, [pc, #68]	; (800560c <tftp_tmr+0x6c>)
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <tftp_tmr+0x6c>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b0a      	cmp	r3, #10
 80055d2:	dd17      	ble.n	8005604 <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 80055d4:	4b0d      	ldr	r3, [pc, #52]	; (800560c <tftp_tmr+0x6c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00f      	beq.n	80055fc <tftp_tmr+0x5c>
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <tftp_tmr+0x6c>)
 80055de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d80a      	bhi.n	80055fc <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 80055e6:	f7ff fd89 	bl	80050fc <resend_data>
      tftp_state.retries++;
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <tftp_tmr+0x6c>)
 80055ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80055f0:	3301      	adds	r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <tftp_tmr+0x6c>)
 80055f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80055fa:	e003      	b.n	8005604 <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 80055fc:	f7ff fcda 	bl	8004fb4 <close_handle>
 8005600:	e000      	b.n	8005604 <tftp_tmr+0x64>
    return;
 8005602:	bf00      	nop
    }
  }
}
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000098 	.word	0x20000098
 8005610:	080055a1 	.word	0x080055a1

08005614 <tftp_init>:
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init(const struct tftp_context *ctx)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800561c:	202e      	movs	r0, #46	; 0x2e
 800561e:	f002 fd5e 	bl	80080de <udp_new_ip_type>
 8005622:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <tftp_init+0x1c>
    return ERR_MEM;
 800562a:	f04f 33ff 	mov.w	r3, #4294967295
 800562e:	e028      	b.n	8005682 <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 8005630:	2245      	movs	r2, #69	; 0x45
 8005632:	4916      	ldr	r1, [pc, #88]	; (800568c <tftp_init+0x78>)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f002 fbbb 	bl	8007db0 <udp_bind>
 800563a:	4603      	mov	r3, r0
 800563c:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 800563e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <tftp_init+0x3e>
    udp_remove(pcb);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f002 fcf0 	bl	800802c <udp_remove>
    return ret;
 800564c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005650:	e017      	b.n	8005682 <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <tftp_init+0x7c>)
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <tftp_init+0x7c>)
 800565a:	2200      	movs	r2, #0
 800565c:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 800565e:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <tftp_init+0x7c>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <tftp_init+0x7c>)
 8005666:	2200      	movs	r2, #0
 8005668:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <tftp_init+0x7c>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 8005670:	4a07      	ldr	r2, [pc, #28]	; (8005690 <tftp_init+0x7c>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 8005676:	2200      	movs	r2, #0
 8005678:	4906      	ldr	r1, [pc, #24]	; (8005694 <tftp_init+0x80>)
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f002 fcb6 	bl	8007fec <udp_recv>

  return ERR_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	0800cf84 	.word	0x0800cf84
 8005690:	20000098 	.word	0x20000098
 8005694:	08005215 	.word	0x08005215

08005698 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	b21a      	sxth	r2, r3
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	0a1b      	lsrs	r3, r3, #8
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	b21b      	sxth	r3, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b21b      	sxth	r3, r3
 80056b4:	b29b      	uxth	r3, r3
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80056cc:	f000 f8d2 	bl	8005874 <mem_init>
  memp_init();
 80056d0:	f000 fbd8 	bl	8005e84 <memp_init>
  pbuf_init();
  netif_init();
 80056d4:	f000 fc90 	bl	8005ff8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80056d8:	f001 ffbe 	bl	8007658 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80056dc:	f001 ff00 	bl	80074e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <ptr_to_mem+0x20>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	4413      	add	r3, r2
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	200000bc 	.word	0x200000bc

0800570c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <mem_to_ptr+0x20>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	b29b      	uxth	r3, r3
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	200000bc 	.word	0x200000bc

08005730 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <plug_holes+0x120>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d206      	bcs.n	8005750 <plug_holes+0x20>
 8005742:	4b44      	ldr	r3, [pc, #272]	; (8005854 <plug_holes+0x124>)
 8005744:	f240 12df 	movw	r2, #479	; 0x1df
 8005748:	4943      	ldr	r1, [pc, #268]	; (8005858 <plug_holes+0x128>)
 800574a:	4844      	ldr	r0, [pc, #272]	; (800585c <plug_holes+0x12c>)
 800574c:	f005 f8bc 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <plug_holes+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d306      	bcc.n	8005768 <plug_holes+0x38>
 800575a:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <plug_holes+0x124>)
 800575c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005760:	4940      	ldr	r1, [pc, #256]	; (8005864 <plug_holes+0x134>)
 8005762:	483e      	ldr	r0, [pc, #248]	; (800585c <plug_holes+0x12c>)
 8005764:	f005 f8b0 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	791b      	ldrb	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d006      	beq.n	800577e <plug_holes+0x4e>
 8005770:	4b38      	ldr	r3, [pc, #224]	; (8005854 <plug_holes+0x124>)
 8005772:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005776:	493c      	ldr	r1, [pc, #240]	; (8005868 <plug_holes+0x138>)
 8005778:	4838      	ldr	r0, [pc, #224]	; (800585c <plug_holes+0x12c>)
 800577a:	f005 f8a5 	bl	800a8c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005786:	d906      	bls.n	8005796 <plug_holes+0x66>
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <plug_holes+0x124>)
 800578a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800578e:	4937      	ldr	r1, [pc, #220]	; (800586c <plug_holes+0x13c>)
 8005790:	4832      	ldr	r0, [pc, #200]	; (800585c <plug_holes+0x12c>)
 8005792:	f005 f899 	bl	800a8c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff ffa4 	bl	80056e8 <ptr_to_mem>
 80057a0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d024      	beq.n	80057f4 <plug_holes+0xc4>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	791b      	ldrb	r3, [r3, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d120      	bne.n	80057f4 <plug_holes+0xc4>
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <plug_holes+0x130>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d01b      	beq.n	80057f4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80057bc:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <plug_holes+0x140>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d102      	bne.n	80057cc <plug_holes+0x9c>
      lfree = mem;
 80057c6:	4a2a      	ldr	r2, [pc, #168]	; (8005870 <plug_holes+0x140>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80057dc:	d00a      	beq.n	80057f4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ff80 	bl	80056e8 <ptr_to_mem>
 80057e8:	4604      	mov	r4, r0
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff ff8e 	bl	800570c <mem_to_ptr>
 80057f0:	4603      	mov	r3, r0
 80057f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	885b      	ldrh	r3, [r3, #2]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff ff75 	bl	80056e8 <ptr_to_mem>
 80057fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d01f      	beq.n	8005848 <plug_holes+0x118>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	791b      	ldrb	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11b      	bne.n	8005848 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <plug_holes+0x140>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d102      	bne.n	8005820 <plug_holes+0xf0>
      lfree = pmem;
 800581a:	4a15      	ldr	r2, [pc, #84]	; (8005870 <plug_holes+0x140>)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	881a      	ldrh	r2, [r3, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005830:	d00a      	beq.n	8005848 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff56 	bl	80056e8 <ptr_to_mem>
 800583c:	4604      	mov	r4, r0
 800583e:	68b8      	ldr	r0, [r7, #8]
 8005840:	f7ff ff64 	bl	800570c <mem_to_ptr>
 8005844:	4603      	mov	r3, r0
 8005846:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}
 8005850:	200000bc 	.word	0x200000bc
 8005854:	0800b9e4 	.word	0x0800b9e4
 8005858:	0800ba14 	.word	0x0800ba14
 800585c:	0800ba2c 	.word	0x0800ba2c
 8005860:	200000c0 	.word	0x200000c0
 8005864:	0800ba54 	.word	0x0800ba54
 8005868:	0800ba70 	.word	0x0800ba70
 800586c:	0800ba8c 	.word	0x0800ba8c
 8005870:	200000c4 	.word	0x200000c4

08005874 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <mem_init+0x68>)
 800587c:	3303      	adds	r3, #3
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	461a      	mov	r2, r3
 8005884:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <mem_init+0x6c>)
 8005886:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <mem_init+0x6c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005894:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80058a2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80058a6:	f7ff ff1f 	bl	80056e8 <ptr_to_mem>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <mem_init+0x70>)
 80058ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <mem_init+0x70>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <mem_init+0x70>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80058c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <mem_init+0x70>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80058ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <mem_init+0x6c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a05      	ldr	r2, [pc, #20]	; (80058e8 <mem_init+0x74>)
 80058d2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	200033ac 	.word	0x200033ac
 80058e0:	200000bc 	.word	0x200000bc
 80058e4:	200000c0 	.word	0x200000c0
 80058e8:	200000c4 	.word	0x200000c4

080058ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff09 	bl	800570c <mem_to_ptr>
 80058fa:	4603      	mov	r3, r0
 80058fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fef0 	bl	80056e8 <ptr_to_mem>
 8005908:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	885b      	ldrh	r3, [r3, #2]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff feea 	bl	80056e8 <ptr_to_mem>
 8005914:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800591e:	d818      	bhi.n	8005952 <mem_link_valid+0x66>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	885b      	ldrh	r3, [r3, #2]
 8005924:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005928:	d813      	bhi.n	8005952 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800592e:	8afa      	ldrh	r2, [r7, #22]
 8005930:	429a      	cmp	r2, r3
 8005932:	d004      	beq.n	800593e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	8afa      	ldrh	r2, [r7, #22]
 800593a:	429a      	cmp	r2, r3
 800593c:	d109      	bne.n	8005952 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <mem_link_valid+0x74>)
 8005940:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	429a      	cmp	r2, r3
 8005946:	d006      	beq.n	8005956 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	885b      	ldrh	r3, [r3, #2]
 800594c:	8afa      	ldrh	r2, [r7, #22]
 800594e:	429a      	cmp	r2, r3
 8005950:	d001      	beq.n	8005956 <mem_link_valid+0x6a>
    return 0;
 8005952:	2300      	movs	r3, #0
 8005954:	e000      	b.n	8005958 <mem_link_valid+0x6c>
  }
  return 1;
 8005956:	2301      	movs	r3, #1
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200000c0 	.word	0x200000c0

08005964 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04c      	beq.n	8005a0c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <mem_free+0xb0>)
 800597e:	f240 2273 	movw	r2, #627	; 0x273
 8005982:	4925      	ldr	r1, [pc, #148]	; (8005a18 <mem_free+0xb4>)
 8005984:	4825      	ldr	r0, [pc, #148]	; (8005a1c <mem_free+0xb8>)
 8005986:	f004 ff9f 	bl	800a8c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800598a:	e040      	b.n	8005a0e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b08      	subs	r3, #8
 8005990:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <mem_free+0xbc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	429a      	cmp	r2, r3
 800599a:	d306      	bcc.n	80059aa <mem_free+0x46>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f103 020c 	add.w	r2, r3, #12
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <mem_free+0xc0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d907      	bls.n	80059ba <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80059aa:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <mem_free+0xb0>)
 80059ac:	f240 227f 	movw	r2, #639	; 0x27f
 80059b0:	491d      	ldr	r1, [pc, #116]	; (8005a28 <mem_free+0xc4>)
 80059b2:	481a      	ldr	r0, [pc, #104]	; (8005a1c <mem_free+0xb8>)
 80059b4:	f004 ff88 	bl	800a8c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059b8:	e029      	b.n	8005a0e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	791b      	ldrb	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <mem_free+0xb0>)
 80059c4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80059c8:	4918      	ldr	r1, [pc, #96]	; (8005a2c <mem_free+0xc8>)
 80059ca:	4814      	ldr	r0, [pc, #80]	; (8005a1c <mem_free+0xb8>)
 80059cc:	f004 ff7c 	bl	800a8c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059d0:	e01d      	b.n	8005a0e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f7ff ff8a 	bl	80058ec <mem_link_valid>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <mem_free+0xb0>)
 80059e0:	f240 2295 	movw	r2, #661	; 0x295
 80059e4:	4912      	ldr	r1, [pc, #72]	; (8005a30 <mem_free+0xcc>)
 80059e6:	480d      	ldr	r0, [pc, #52]	; (8005a1c <mem_free+0xb8>)
 80059e8:	f004 ff6e 	bl	800a8c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059ec:	e00f      	b.n	8005a0e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <mem_free+0xd0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d202      	bcs.n	8005a04 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80059fe:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <mem_free+0xd0>)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fe93 	bl	8005730 <plug_holes>
 8005a0a:	e000      	b.n	8005a0e <mem_free+0xaa>
    return;
 8005a0c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0800b9e4 	.word	0x0800b9e4
 8005a18:	0800bab8 	.word	0x0800bab8
 8005a1c:	0800ba2c 	.word	0x0800ba2c
 8005a20:	200000bc 	.word	0x200000bc
 8005a24:	200000c0 	.word	0x200000c0
 8005a28:	0800badc 	.word	0x0800badc
 8005a2c:	0800baf8 	.word	0x0800baf8
 8005a30:	0800bb20 	.word	0x0800bb20
 8005a34:	200000c4 	.word	0x200000c4

08005a38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005a44:	887b      	ldrh	r3, [r7, #2]
 8005a46:	3303      	adds	r3, #3
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005a50:	8bfb      	ldrh	r3, [r7, #30]
 8005a52:	2b0b      	cmp	r3, #11
 8005a54:	d801      	bhi.n	8005a5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005a56:	230c      	movs	r3, #12
 8005a58:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005a5a:	8bfb      	ldrh	r3, [r7, #30]
 8005a5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005a60:	d803      	bhi.n	8005a6a <mem_trim+0x32>
 8005a62:	8bfa      	ldrh	r2, [r7, #30]
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d201      	bcs.n	8005a6e <mem_trim+0x36>
    return NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e0cc      	b.n	8005c08 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005a6e:	4b68      	ldr	r3, [pc, #416]	; (8005c10 <mem_trim+0x1d8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d304      	bcc.n	8005a82 <mem_trim+0x4a>
 8005a78:	4b66      	ldr	r3, [pc, #408]	; (8005c14 <mem_trim+0x1dc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d306      	bcc.n	8005a90 <mem_trim+0x58>
 8005a82:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <mem_trim+0x1e0>)
 8005a84:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005a88:	4964      	ldr	r1, [pc, #400]	; (8005c1c <mem_trim+0x1e4>)
 8005a8a:	4865      	ldr	r0, [pc, #404]	; (8005c20 <mem_trim+0x1e8>)
 8005a8c:	f004 ff1c 	bl	800a8c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005a90:	4b5f      	ldr	r3, [pc, #380]	; (8005c10 <mem_trim+0x1d8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d304      	bcc.n	8005aa4 <mem_trim+0x6c>
 8005a9a:	4b5e      	ldr	r3, [pc, #376]	; (8005c14 <mem_trim+0x1dc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d301      	bcc.n	8005aa8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	e0af      	b.n	8005c08 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b08      	subs	r3, #8
 8005aac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005aae:	69b8      	ldr	r0, [r7, #24]
 8005ab0:	f7ff fe2c 	bl	800570c <mem_to_ptr>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	8afb      	ldrh	r3, [r7, #22]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b08      	subs	r3, #8
 8005ac4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005ac6:	8bfa      	ldrh	r2, [r7, #30]
 8005ac8:	8abb      	ldrh	r3, [r7, #20]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d906      	bls.n	8005adc <mem_trim+0xa4>
 8005ace:	4b52      	ldr	r3, [pc, #328]	; (8005c18 <mem_trim+0x1e0>)
 8005ad0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005ad4:	4953      	ldr	r1, [pc, #332]	; (8005c24 <mem_trim+0x1ec>)
 8005ad6:	4852      	ldr	r0, [pc, #328]	; (8005c20 <mem_trim+0x1e8>)
 8005ad8:	f004 fef6 	bl	800a8c8 <iprintf>
  if (newsize > size) {
 8005adc:	8bfa      	ldrh	r2, [r7, #30]
 8005ade:	8abb      	ldrh	r3, [r7, #20]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d901      	bls.n	8005ae8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e08f      	b.n	8005c08 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005ae8:	8bfa      	ldrh	r2, [r7, #30]
 8005aea:	8abb      	ldrh	r3, [r7, #20]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d101      	bne.n	8005af4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	e089      	b.n	8005c08 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fdf5 	bl	80056e8 <ptr_to_mem>
 8005afe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	791b      	ldrb	r3, [r3, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13f      	bne.n	8005b88 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b10:	d106      	bne.n	8005b20 <mem_trim+0xe8>
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <mem_trim+0x1e0>)
 8005b14:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005b18:	4943      	ldr	r1, [pc, #268]	; (8005c28 <mem_trim+0x1f0>)
 8005b1a:	4841      	ldr	r0, [pc, #260]	; (8005c20 <mem_trim+0x1e8>)
 8005b1c:	f004 fed4 	bl	800a8c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b26:	8afa      	ldrh	r2, [r7, #22]
 8005b28:	8bfb      	ldrh	r3, [r7, #30]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3308      	adds	r3, #8
 8005b30:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <mem_trim+0x1f4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d106      	bne.n	8005b4a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005b3c:	89fb      	ldrh	r3, [r7, #14]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fdd2 	bl	80056e8 <ptr_to_mem>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a39      	ldr	r2, [pc, #228]	; (8005c2c <mem_trim+0x1f4>)
 8005b48:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005b4a:	89fb      	ldrh	r3, [r7, #14]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fdcb 	bl	80056e8 <ptr_to_mem>
 8005b52:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2200      	movs	r2, #0
 8005b58:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	89ba      	ldrh	r2, [r7, #12]
 8005b5e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	8afa      	ldrh	r2, [r7, #22]
 8005b64:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	89fa      	ldrh	r2, [r7, #14]
 8005b6a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b74:	d047      	beq.n	8005c06 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fdb4 	bl	80056e8 <ptr_to_mem>
 8005b80:	4602      	mov	r2, r0
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	8053      	strh	r3, [r2, #2]
 8005b86:	e03e      	b.n	8005c06 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005b88:	8bfb      	ldrh	r3, [r7, #30]
 8005b8a:	f103 0214 	add.w	r2, r3, #20
 8005b8e:	8abb      	ldrh	r3, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d838      	bhi.n	8005c06 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b94:	8afa      	ldrh	r2, [r7, #22]
 8005b96:	8bfb      	ldrh	r3, [r7, #30]
 8005b98:	4413      	add	r3, r2
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ba8:	d106      	bne.n	8005bb8 <mem_trim+0x180>
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <mem_trim+0x1e0>)
 8005bac:	f240 3216 	movw	r2, #790	; 0x316
 8005bb0:	491d      	ldr	r1, [pc, #116]	; (8005c28 <mem_trim+0x1f0>)
 8005bb2:	481b      	ldr	r0, [pc, #108]	; (8005c20 <mem_trim+0x1e8>)
 8005bb4:	f004 fe88 	bl	800a8c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005bb8:	89fb      	ldrh	r3, [r7, #14]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fd94 	bl	80056e8 <ptr_to_mem>
 8005bc0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <mem_trim+0x1f4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d202      	bcs.n	8005bd2 <mem_trim+0x19a>
      lfree = mem2;
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <mem_trim+0x1f4>)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	8afa      	ldrh	r2, [r7, #22]
 8005be4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	89fa      	ldrh	r2, [r7, #14]
 8005bea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005bf4:	d007      	beq.n	8005c06 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fd74 	bl	80056e8 <ptr_to_mem>
 8005c00:	4602      	mov	r2, r0
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005c06:	687b      	ldr	r3, [r7, #4]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200000bc 	.word	0x200000bc
 8005c14:	200000c0 	.word	0x200000c0
 8005c18:	0800b9e4 	.word	0x0800b9e4
 8005c1c:	0800bb54 	.word	0x0800bb54
 8005c20:	0800ba2c 	.word	0x0800ba2c
 8005c24:	0800bb6c 	.word	0x0800bb6c
 8005c28:	0800bb8c 	.word	0x0800bb8c
 8005c2c:	200000c4 	.word	0x200000c4

08005c30 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <mem_malloc+0x14>
    return NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e0d9      	b.n	8005df8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	3303      	adds	r3, #3
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005c50:	8bbb      	ldrh	r3, [r7, #28]
 8005c52:	2b0b      	cmp	r3, #11
 8005c54:	d801      	bhi.n	8005c5a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005c56:	230c      	movs	r3, #12
 8005c58:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005c5a:	8bbb      	ldrh	r3, [r7, #28]
 8005c5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c60:	d803      	bhi.n	8005c6a <mem_malloc+0x3a>
 8005c62:	8bba      	ldrh	r2, [r7, #28]
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d201      	bcs.n	8005c6e <mem_malloc+0x3e>
    return NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e0c4      	b.n	8005df8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005c6e:	4b64      	ldr	r3, [pc, #400]	; (8005e00 <mem_malloc+0x1d0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fd4a 	bl	800570c <mem_to_ptr>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	83fb      	strh	r3, [r7, #30]
 8005c7c:	e0b4      	b.n	8005de8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005c7e:	8bfb      	ldrh	r3, [r7, #30]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fd31 	bl	80056e8 <ptr_to_mem>
 8005c86:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 80a4 	bne.w	8005dda <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	8bfb      	ldrh	r3, [r7, #30]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f1a3 0208 	sub.w	r2, r3, #8
 8005ca0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	f0c0 8099 	bcc.w	8005dda <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	8bfb      	ldrh	r3, [r7, #30]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f1a3 0208 	sub.w	r2, r3, #8
 8005cb6:	8bbb      	ldrh	r3, [r7, #28]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d333      	bcc.n	8005d26 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005cbe:	8bfa      	ldrh	r2, [r7, #30]
 8005cc0:	8bbb      	ldrh	r3, [r7, #28]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005cca:	8a7b      	ldrh	r3, [r7, #18]
 8005ccc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005cd0:	d106      	bne.n	8005ce0 <mem_malloc+0xb0>
 8005cd2:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <mem_malloc+0x1d4>)
 8005cd4:	f240 3287 	movw	r2, #903	; 0x387
 8005cd8:	494b      	ldr	r1, [pc, #300]	; (8005e08 <mem_malloc+0x1d8>)
 8005cda:	484c      	ldr	r0, [pc, #304]	; (8005e0c <mem_malloc+0x1dc>)
 8005cdc:	f004 fdf4 	bl	800a8c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005ce0:	8a7b      	ldrh	r3, [r7, #18]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fd00 	bl	80056e8 <ptr_to_mem>
 8005ce8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	881a      	ldrh	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8bfa      	ldrh	r2, [r7, #30]
 8005cfc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	8a7a      	ldrh	r2, [r7, #18]
 8005d02:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2201      	movs	r2, #1
 8005d08:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d12:	d00b      	beq.n	8005d2c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fce5 	bl	80056e8 <ptr_to_mem>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	8a7b      	ldrh	r3, [r7, #18]
 8005d22:	8053      	strh	r3, [r2, #2]
 8005d24:	e002      	b.n	8005d2c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005d2c:	4b34      	ldr	r3, [pc, #208]	; (8005e00 <mem_malloc+0x1d0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d127      	bne.n	8005d86 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005d36:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <mem_malloc+0x1d0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005d3c:	e005      	b.n	8005d4a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fcd0 	bl	80056e8 <ptr_to_mem>
 8005d48:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <mem_malloc+0x12c>
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <mem_malloc+0x1e0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d1f0      	bne.n	8005d3e <mem_malloc+0x10e>
          }
          lfree = cur;
 8005d5c:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <mem_malloc+0x1d0>)
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005d62:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <mem_malloc+0x1d0>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <mem_malloc+0x1e0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d00b      	beq.n	8005d86 <mem_malloc+0x156>
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <mem_malloc+0x1d0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	791b      	ldrb	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <mem_malloc+0x156>
 8005d78:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <mem_malloc+0x1d4>)
 8005d7a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005d7e:	4925      	ldr	r1, [pc, #148]	; (8005e14 <mem_malloc+0x1e4>)
 8005d80:	4822      	ldr	r0, [pc, #136]	; (8005e0c <mem_malloc+0x1dc>)
 8005d82:	f004 fda1 	bl	800a8c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005d86:	8bba      	ldrh	r2, [r7, #28]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <mem_malloc+0x1e0>)
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d906      	bls.n	8005da4 <mem_malloc+0x174>
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <mem_malloc+0x1d4>)
 8005d98:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005d9c:	491e      	ldr	r1, [pc, #120]	; (8005e18 <mem_malloc+0x1e8>)
 8005d9e:	481b      	ldr	r0, [pc, #108]	; (8005e0c <mem_malloc+0x1dc>)
 8005da0:	f004 fd92 	bl	800a8c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <mem_malloc+0x18c>
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <mem_malloc+0x1d4>)
 8005db0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005db4:	4919      	ldr	r1, [pc, #100]	; (8005e1c <mem_malloc+0x1ec>)
 8005db6:	4815      	ldr	r0, [pc, #84]	; (8005e0c <mem_malloc+0x1dc>)
 8005db8:	f004 fd86 	bl	800a8c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d006      	beq.n	8005dd4 <mem_malloc+0x1a4>
 8005dc6:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <mem_malloc+0x1d4>)
 8005dc8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005dcc:	4914      	ldr	r1, [pc, #80]	; (8005e20 <mem_malloc+0x1f0>)
 8005dce:	480f      	ldr	r0, [pc, #60]	; (8005e0c <mem_malloc+0x1dc>)
 8005dd0:	f004 fd7a 	bl	800a8c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	e00e      	b.n	8005df8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005dda:	8bfb      	ldrh	r3, [r7, #30]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fc83 	bl	80056e8 <ptr_to_mem>
 8005de2:	4603      	mov	r3, r0
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005de8:	8bfa      	ldrh	r2, [r7, #30]
 8005dea:	8bbb      	ldrh	r3, [r7, #28]
 8005dec:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005df0:	429a      	cmp	r2, r3
 8005df2:	f4ff af44 	bcc.w	8005c7e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	200000c4 	.word	0x200000c4
 8005e04:	0800b9e4 	.word	0x0800b9e4
 8005e08:	0800bb8c 	.word	0x0800bb8c
 8005e0c:	0800ba2c 	.word	0x0800ba2c
 8005e10:	200000c0 	.word	0x200000c0
 8005e14:	0800bba0 	.word	0x0800bba0
 8005e18:	0800bbbc 	.word	0x0800bbbc
 8005e1c:	0800bbec 	.word	0x0800bbec
 8005e20:	0800bc1c 	.word	0x0800bc1c

08005e24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	3303      	adds	r3, #3
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e011      	b.n	8005e6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4413      	add	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4293      	cmp	r3, r2
 8005e74:	dbe7      	blt.n	8005e46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	80fb      	strh	r3, [r7, #6]
 8005e8e:	e009      	b.n	8005ea4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <memp_init+0x30>)
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ffc3 	bl	8005e24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	80fb      	strh	r3, [r7, #6]
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d9f2      	bls.n	8005e90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	0800cf5c 	.word	0x0800cf5c

08005eb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <do_memp_malloc_pool+0x38>
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <do_memp_malloc_pool+0x48>)
 8005ee4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005ee8:	4906      	ldr	r1, [pc, #24]	; (8005f04 <do_memp_malloc_pool+0x4c>)
 8005eea:	4807      	ldr	r0, [pc, #28]	; (8005f08 <do_memp_malloc_pool+0x50>)
 8005eec:	f004 fcec 	bl	800a8c8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e000      	b.n	8005ef6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	0800bc40 	.word	0x0800bc40
 8005f04:	0800bc70 	.word	0x0800bc70
 8005f08:	0800bc94 	.word	0x0800bc94

08005f0c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d908      	bls.n	8005f2e <memp_malloc+0x22>
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <memp_malloc+0x3c>)
 8005f1e:	f240 1257 	movw	r2, #343	; 0x157
 8005f22:	490a      	ldr	r1, [pc, #40]	; (8005f4c <memp_malloc+0x40>)
 8005f24:	480a      	ldr	r0, [pc, #40]	; (8005f50 <memp_malloc+0x44>)
 8005f26:	f004 fccf 	bl	800a8c8 <iprintf>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e008      	b.n	8005f40 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <memp_malloc+0x48>)
 8005f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ffbe 	bl	8005eb8 <do_memp_malloc_pool>
 8005f3c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	0800bc40 	.word	0x0800bc40
 8005f4c:	0800bcd0 	.word	0x0800bcd0
 8005f50:	0800bc94 	.word	0x0800bc94
 8005f54:	0800cf5c 	.word	0x0800cf5c

08005f58 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <do_memp_free_pool+0x22>
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <do_memp_free_pool+0x40>)
 8005f6e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005f72:	490a      	ldr	r1, [pc, #40]	; (8005f9c <do_memp_free_pool+0x44>)
 8005f74:	480a      	ldr	r0, [pc, #40]	; (8005fa0 <do_memp_free_pool+0x48>)
 8005f76:	f004 fca7 	bl	800a8c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	0800bc40 	.word	0x0800bc40
 8005f9c:	0800bcf0 	.word	0x0800bcf0
 8005fa0:	0800bc94 	.word	0x0800bc94

08005fa4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	6039      	str	r1, [r7, #0]
 8005fae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d907      	bls.n	8005fc6 <memp_free+0x22>
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <memp_free+0x44>)
 8005fb8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005fbc:	490b      	ldr	r1, [pc, #44]	; (8005fec <memp_free+0x48>)
 8005fbe:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <memp_free+0x4c>)
 8005fc0:	f004 fc82 	bl	800a8c8 <iprintf>
 8005fc4:	e00c      	b.n	8005fe0 <memp_free+0x3c>

  if (mem == NULL) {
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <memp_free+0x50>)
 8005fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ffbe 	bl	8005f58 <do_memp_free_pool>
 8005fdc:	e000      	b.n	8005fe0 <memp_free+0x3c>
    return;
 8005fde:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800bc40 	.word	0x0800bc40
 8005fec:	0800bd10 	.word	0x0800bd10
 8005ff0:	0800bc94 	.word	0x0800bc94
 8005ff4:	0800cf5c 	.word	0x0800cf5c

08005ff8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d108      	bne.n	800602e <netif_add+0x26>
 800601c:	4b57      	ldr	r3, [pc, #348]	; (800617c <netif_add+0x174>)
 800601e:	f240 1227 	movw	r2, #295	; 0x127
 8006022:	4957      	ldr	r1, [pc, #348]	; (8006180 <netif_add+0x178>)
 8006024:	4857      	ldr	r0, [pc, #348]	; (8006184 <netif_add+0x17c>)
 8006026:	f004 fc4f 	bl	800a8c8 <iprintf>
 800602a:	2300      	movs	r3, #0
 800602c:	e0a2      	b.n	8006174 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <netif_add+0x3e>
 8006034:	4b51      	ldr	r3, [pc, #324]	; (800617c <netif_add+0x174>)
 8006036:	f44f 7294 	mov.w	r2, #296	; 0x128
 800603a:	4953      	ldr	r1, [pc, #332]	; (8006188 <netif_add+0x180>)
 800603c:	4851      	ldr	r0, [pc, #324]	; (8006184 <netif_add+0x17c>)
 800603e:	f004 fc43 	bl	800a8c8 <iprintf>
 8006042:	2300      	movs	r3, #0
 8006044:	e096      	b.n	8006174 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800604c:	4b4f      	ldr	r3, [pc, #316]	; (800618c <netif_add+0x184>)
 800604e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006056:	4b4d      	ldr	r3, [pc, #308]	; (800618c <netif_add+0x184>)
 8006058:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006060:	4b4a      	ldr	r3, [pc, #296]	; (800618c <netif_add+0x184>)
 8006062:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a45      	ldr	r2, [pc, #276]	; (8006190 <netif_add+0x188>)
 800607a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006096:	4b3f      	ldr	r3, [pc, #252]	; (8006194 <netif_add+0x18c>)
 8006098:	781a      	ldrb	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f90f 	bl	80062d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	4798      	blx	r3
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <netif_add+0xba>
    return NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	e058      	b.n	8006174 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060c8:	2bff      	cmp	r3, #255	; 0xff
 80060ca:	d103      	bne.n	80060d4 <netif_add+0xcc>
        netif->num = 0;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80060d8:	4b2f      	ldr	r3, [pc, #188]	; (8006198 <netif_add+0x190>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	e02b      	b.n	8006138 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d106      	bne.n	80060f6 <netif_add+0xee>
 80060e8:	4b24      	ldr	r3, [pc, #144]	; (800617c <netif_add+0x174>)
 80060ea:	f240 128b 	movw	r2, #395	; 0x18b
 80060ee:	492b      	ldr	r1, [pc, #172]	; (800619c <netif_add+0x194>)
 80060f0:	4824      	ldr	r0, [pc, #144]	; (8006184 <netif_add+0x17c>)
 80060f2:	f004 fbe9 	bl	800a8c8 <iprintf>
        num_netifs++;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2bff      	cmp	r3, #255	; 0xff
 8006100:	dd06      	ble.n	8006110 <netif_add+0x108>
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <netif_add+0x174>)
 8006104:	f240 128d 	movw	r2, #397	; 0x18d
 8006108:	4925      	ldr	r1, [pc, #148]	; (80061a0 <netif_add+0x198>)
 800610a:	481e      	ldr	r0, [pc, #120]	; (8006184 <netif_add+0x17c>)
 800610c:	f004 fbdc 	bl	800a8c8 <iprintf>
        if (netif2->num == netif->num) {
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800611c:	429a      	cmp	r2, r3
 800611e:	d108      	bne.n	8006132 <netif_add+0x12a>
          netif->num++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006126:	3301      	adds	r3, #1
 8006128:	b2da      	uxtb	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006130:	e005      	b.n	800613e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1d0      	bne.n	80060e0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1be      	bne.n	80060c2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800614a:	2bfe      	cmp	r3, #254	; 0xfe
 800614c:	d103      	bne.n	8006156 <netif_add+0x14e>
    netif_num = 0;
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <netif_add+0x18c>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e006      	b.n	8006164 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800615c:	3301      	adds	r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <netif_add+0x18c>)
 8006162:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <netif_add+0x190>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <netif_add+0x190>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	0800bd2c 	.word	0x0800bd2c
 8006180:	0800bdc0 	.word	0x0800bdc0
 8006184:	0800bd7c 	.word	0x0800bd7c
 8006188:	0800bddc 	.word	0x0800bddc
 800618c:	0800cf84 	.word	0x0800cf84
 8006190:	080064e3 	.word	0x080064e3
 8006194:	200000e0 	.word	0x200000e0
 8006198:	20008580 	.word	0x20008580
 800619c:	0800be00 	.word	0x0800be00
 80061a0:	0800be14 	.word	0x0800be14

080061a4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 ffa1 	bl	80080f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <netif_do_set_ipaddr+0x20>
 80061d2:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <netif_do_set_ipaddr+0x88>)
 80061d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80061d8:	491c      	ldr	r1, [pc, #112]	; (800624c <netif_do_set_ipaddr+0x8c>)
 80061da:	481d      	ldr	r0, [pc, #116]	; (8006250 <netif_do_set_ipaddr+0x90>)
 80061dc:	f004 fb74 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <netif_do_set_ipaddr+0x34>
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <netif_do_set_ipaddr+0x88>)
 80061e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80061ec:	4917      	ldr	r1, [pc, #92]	; (800624c <netif_do_set_ipaddr+0x8c>)
 80061ee:	4818      	ldr	r0, [pc, #96]	; (8006250 <netif_do_set_ipaddr+0x90>)
 80061f0:	f004 fb6a 	bl	800a8c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3304      	adds	r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d01c      	beq.n	800623c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3304      	adds	r3, #4
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ffc3 	bl	80061a4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <netif_do_set_ipaddr+0x6a>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	e000      	b.n	800622c <netif_do_set_ipaddr+0x6c>
 800622a:	2300      	movs	r3, #0
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006230:	2101      	movs	r1, #1
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f8d2 	bl	80063dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	0800bd2c 	.word	0x0800bd2c
 800624c:	0800be44 	.word	0x0800be44
 8006250:	0800bd7c 	.word	0x0800bd7c

08006254 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3308      	adds	r3, #8
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d00a      	beq.n	8006284 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <netif_do_set_netmask+0x26>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	e000      	b.n	800627c <netif_do_set_netmask+0x28>
 800627a:	2300      	movs	r3, #0
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	330c      	adds	r3, #12
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d00a      	beq.n	80062c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <netif_do_set_gw+0x26>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	e000      	b.n	80062ba <netif_do_set_gw+0x28>
 80062b8:	2300      	movs	r3, #0
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80062ec:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <netif_set_addr+0x90>)
 80062ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <netif_set_addr+0x90>)
 80062f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006300:	4b17      	ldr	r3, [pc, #92]	; (8006360 <netif_set_addr+0x90>)
 8006302:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <netif_set_addr+0x42>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <netif_set_addr+0x46>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <netif_set_addr+0x48>
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
  if (remove) {
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006320:	f107 0310 	add.w	r3, r7, #16
 8006324:	461a      	mov	r2, r3
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f7ff ff49 	bl	80061c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff8e 	bl	8006254 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ffa8 	bl	8006292 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006348:	f107 0310 	add.w	r3, r7, #16
 800634c:	461a      	mov	r2, r3
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff ff35 	bl	80061c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006356:	bf00      	nop
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	0800cf84 	.word	0x0800cf84

08006364 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800636c:	4a04      	ldr	r2, [pc, #16]	; (8006380 <netif_set_default+0x1c>)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20008584 	.word	0x20008584

08006384 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <netif_set_up+0x1e>
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <netif_set_up+0x4c>)
 8006394:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006398:	490e      	ldr	r1, [pc, #56]	; (80063d4 <netif_set_up+0x50>)
 800639a:	480f      	ldr	r0, [pc, #60]	; (80063d8 <netif_set_up+0x54>)
 800639c:	f004 fa94 	bl	800a8c8 <iprintf>
 80063a0:	e013      	b.n	80063ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10c      	bne.n	80063ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80063c2:	2103      	movs	r1, #3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f809 	bl	80063dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	0800bd2c 	.word	0x0800bd2c
 80063d4:	0800beb4 	.word	0x0800beb4
 80063d8:	0800bd7c 	.word	0x0800bd7c

080063dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <netif_issue_reports+0x20>
 80063ee:	4b18      	ldr	r3, [pc, #96]	; (8006450 <netif_issue_reports+0x74>)
 80063f0:	f240 326d 	movw	r2, #877	; 0x36d
 80063f4:	4917      	ldr	r1, [pc, #92]	; (8006454 <netif_issue_reports+0x78>)
 80063f6:	4818      	ldr	r0, [pc, #96]	; (8006458 <netif_issue_reports+0x7c>)
 80063f8:	f004 fa66 	bl	800a8c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01e      	beq.n	8006448 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006410:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006414:	2b00      	cmp	r3, #0
 8006416:	d017      	beq.n	8006448 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 fdc3 	bl	8008fcc <etharp_request>
 8006446:	e000      	b.n	800644a <netif_issue_reports+0x6e>
    return;
 8006448:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	0800bd2c 	.word	0x0800bd2c
 8006454:	0800bed0 	.word	0x0800bed0
 8006458:	0800bd7c 	.word	0x0800bd7c

0800645c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d107      	bne.n	800647a <netif_set_down+0x1e>
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <netif_set_down+0x58>)
 800646c:	f240 329b 	movw	r2, #923	; 0x39b
 8006470:	4911      	ldr	r1, [pc, #68]	; (80064b8 <netif_set_down+0x5c>)
 8006472:	4812      	ldr	r0, [pc, #72]	; (80064bc <netif_set_down+0x60>)
 8006474:	f004 fa28 	bl	800a8c8 <iprintf>
 8006478:	e019      	b.n	80064ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d012      	beq.n	80064ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800648e:	f023 0301 	bic.w	r3, r3, #1
 8006492:	b2da      	uxtb	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f002 f94d 	bl	8008748 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800bd2c 	.word	0x0800bd2c
 80064b8:	0800bef4 	.word	0x0800bef4
 80064bc:	0800bd7c 	.word	0x0800bd7c

080064c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	61da      	str	r2, [r3, #28]
  }
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80064ee:	f06f 030b 	mvn.w	r3, #11
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d013      	beq.n	8006538 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <netif_get_by_index+0x48>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e00c      	b.n	8006532 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800651e:	3301      	adds	r3, #1
 8006520:	b2db      	uxtb	r3, r3
 8006522:	79fa      	ldrb	r2, [r7, #7]
 8006524:	429a      	cmp	r2, r3
 8006526:	d101      	bne.n	800652c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	e006      	b.n	800653a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ef      	bne.n	8006518 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20008580 	.word	0x20008580

0800654c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4611      	mov	r1, r2
 8006558:	461a      	mov	r2, r3
 800655a:	460b      	mov	r3, r1
 800655c:	80fb      	strh	r3, [r7, #6]
 800655e:	4613      	mov	r3, r2
 8006560:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88ba      	ldrh	r2, [r7, #4]
 8006578:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800657a:	8b3b      	ldrh	r3, [r7, #24]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	7f3a      	ldrb	r2, [r7, #28]
 8006586:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	73da      	strb	r2, [r3, #15]
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
 80065aa:	460b      	mov	r3, r1
 80065ac:	80bb      	strh	r3, [r7, #4]
 80065ae:	4613      	mov	r3, r2
 80065b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80065bc:	d07d      	beq.n	80066ba <pbuf_alloc+0x11a>
 80065be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80065c2:	f300 80c6 	bgt.w	8006752 <pbuf_alloc+0x1b2>
 80065c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80065ca:	d010      	beq.n	80065ee <pbuf_alloc+0x4e>
 80065cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80065d0:	f300 80bf 	bgt.w	8006752 <pbuf_alloc+0x1b2>
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d002      	beq.n	80065de <pbuf_alloc+0x3e>
 80065d8:	2b41      	cmp	r3, #65	; 0x41
 80065da:	f040 80ba 	bne.w	8006752 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80065de:	887a      	ldrh	r2, [r7, #2]
 80065e0:	88bb      	ldrh	r3, [r7, #4]
 80065e2:	4619      	mov	r1, r3
 80065e4:	2000      	movs	r0, #0
 80065e6:	f000 f8cf 	bl	8006788 <pbuf_alloc_reference>
 80065ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80065ec:	e0bb      	b.n	8006766 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80065f6:	88bb      	ldrh	r3, [r7, #4]
 80065f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80065fa:	2005      	movs	r0, #5
 80065fc:	f7ff fc86 	bl	8005f0c <memp_malloc>
 8006600:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <pbuf_alloc+0x74>
            pbuf_free(p);
 800660e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006610:	f000 faa8 	bl	8006b64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006614:	2300      	movs	r3, #0
 8006616:	e0a7      	b.n	8006768 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800661a:	3303      	adds	r3, #3
 800661c:	b29b      	uxth	r3, r3
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	b29b      	uxth	r3, r3
 8006624:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006628:	b29b      	uxth	r3, r3
 800662a:	8b7a      	ldrh	r2, [r7, #26]
 800662c:	4293      	cmp	r3, r2
 800662e:	bf28      	it	cs
 8006630:	4613      	movcs	r3, r2
 8006632:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006636:	3310      	adds	r3, #16
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	3303      	adds	r3, #3
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	4618      	mov	r0, r3
 8006644:	89f9      	ldrh	r1, [r7, #14]
 8006646:	8b7a      	ldrh	r2, [r7, #26]
 8006648:	2300      	movs	r3, #0
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	460b      	mov	r3, r1
 8006652:	4601      	mov	r1, r0
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f7ff ff79 	bl	800654c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <pbuf_alloc+0xd4>
 8006666:	4b42      	ldr	r3, [pc, #264]	; (8006770 <pbuf_alloc+0x1d0>)
 8006668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800666c:	4941      	ldr	r1, [pc, #260]	; (8006774 <pbuf_alloc+0x1d4>)
 800666e:	4842      	ldr	r0, [pc, #264]	; (8006778 <pbuf_alloc+0x1d8>)
 8006670:	f004 f92a 	bl	800a8c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006674:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006676:	3303      	adds	r3, #3
 8006678:	f023 0303 	bic.w	r3, r3, #3
 800667c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006680:	d106      	bne.n	8006690 <pbuf_alloc+0xf0>
 8006682:	4b3b      	ldr	r3, [pc, #236]	; (8006770 <pbuf_alloc+0x1d0>)
 8006684:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006688:	493c      	ldr	r1, [pc, #240]	; (800677c <pbuf_alloc+0x1dc>)
 800668a:	483b      	ldr	r0, [pc, #236]	; (8006778 <pbuf_alloc+0x1d8>)
 800668c:	f004 f91c 	bl	800a8c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
 800669a:	e002      	b.n	80066a2 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80066a6:	8b7a      	ldrh	r2, [r7, #26]
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80066b2:	8b7b      	ldrh	r3, [r7, #26]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1a0      	bne.n	80065fa <pbuf_alloc+0x5a>
      break;
 80066b8:	e055      	b.n	8006766 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80066ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066bc:	3303      	adds	r3, #3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f023 0303 	bic.w	r3, r3, #3
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	88bb      	ldrh	r3, [r7, #4]
 80066c8:	3303      	adds	r3, #3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f023 0303 	bic.w	r3, r3, #3
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80066d6:	8b3b      	ldrh	r3, [r7, #24]
 80066d8:	3310      	adds	r3, #16
 80066da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80066dc:	8b3a      	ldrh	r2, [r7, #24]
 80066de:	88bb      	ldrh	r3, [r7, #4]
 80066e0:	3303      	adds	r3, #3
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d306      	bcc.n	80066f8 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80066ea:	8afa      	ldrh	r2, [r7, #22]
 80066ec:	88bb      	ldrh	r3, [r7, #4]
 80066ee:	3303      	adds	r3, #3
 80066f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d201      	bcs.n	80066fc <pbuf_alloc+0x15c>
        return NULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e035      	b.n	8006768 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80066fc:	8afb      	ldrh	r3, [r7, #22]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fa96 	bl	8005c30 <mem_malloc>
 8006704:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <pbuf_alloc+0x170>
        return NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	e02b      	b.n	8006768 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006712:	3310      	adds	r3, #16
 8006714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006716:	4413      	add	r3, r2
 8006718:	3303      	adds	r3, #3
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	4618      	mov	r0, r3
 8006720:	88b9      	ldrh	r1, [r7, #4]
 8006722:	88ba      	ldrh	r2, [r7, #4]
 8006724:	2300      	movs	r3, #0
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	887b      	ldrh	r3, [r7, #2]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	460b      	mov	r3, r1
 800672e:	4601      	mov	r1, r0
 8006730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006732:	f7ff ff0b 	bl	800654c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d010      	beq.n	8006764 <pbuf_alloc+0x1c4>
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <pbuf_alloc+0x1d0>)
 8006744:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006748:	490d      	ldr	r1, [pc, #52]	; (8006780 <pbuf_alloc+0x1e0>)
 800674a:	480b      	ldr	r0, [pc, #44]	; (8006778 <pbuf_alloc+0x1d8>)
 800674c:	f004 f8bc 	bl	800a8c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006750:	e008      	b.n	8006764 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <pbuf_alloc+0x1d0>)
 8006754:	f240 1227 	movw	r2, #295	; 0x127
 8006758:	490a      	ldr	r1, [pc, #40]	; (8006784 <pbuf_alloc+0x1e4>)
 800675a:	4807      	ldr	r0, [pc, #28]	; (8006778 <pbuf_alloc+0x1d8>)
 800675c:	f004 f8b4 	bl	800a8c8 <iprintf>
      return NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	e001      	b.n	8006768 <pbuf_alloc+0x1c8>
      break;
 8006764:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006768:	4618      	mov	r0, r3
 800676a:	3728      	adds	r7, #40	; 0x28
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	0800bf5c 	.word	0x0800bf5c
 8006774:	0800bf8c 	.word	0x0800bf8c
 8006778:	0800bfbc 	.word	0x0800bfbc
 800677c:	0800bfe4 	.word	0x0800bfe4
 8006780:	0800c018 	.word	0x0800c018
 8006784:	0800c044 	.word	0x0800c044

08006788 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
 8006794:	4613      	mov	r3, r2
 8006796:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006798:	883b      	ldrh	r3, [r7, #0]
 800679a:	2b41      	cmp	r3, #65	; 0x41
 800679c:	d009      	beq.n	80067b2 <pbuf_alloc_reference+0x2a>
 800679e:	883b      	ldrh	r3, [r7, #0]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d006      	beq.n	80067b2 <pbuf_alloc_reference+0x2a>
 80067a4:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <pbuf_alloc_reference+0x5c>)
 80067a6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80067aa:	490f      	ldr	r1, [pc, #60]	; (80067e8 <pbuf_alloc_reference+0x60>)
 80067ac:	480f      	ldr	r0, [pc, #60]	; (80067ec <pbuf_alloc_reference+0x64>)
 80067ae:	f004 f88b 	bl	800a8c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80067b2:	2004      	movs	r0, #4
 80067b4:	f7ff fbaa 	bl	8005f0c <memp_malloc>
 80067b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e00b      	b.n	80067dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80067c4:	8879      	ldrh	r1, [r7, #2]
 80067c6:	887a      	ldrh	r2, [r7, #2]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	883b      	ldrh	r3, [r7, #0]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	460b      	mov	r3, r1
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff feb9 	bl	800654c <pbuf_init_alloced_pbuf>
  return p;
 80067da:	68fb      	ldr	r3, [r7, #12]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	0800bf5c 	.word	0x0800bf5c
 80067e8:	0800c060 	.word	0x0800c060
 80067ec:	0800bfbc 	.word	0x0800bfbc

080067f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	4603      	mov	r3, r0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	460b      	mov	r3, r1
 80067fe:	81bb      	strh	r3, [r7, #12]
 8006800:	4613      	mov	r3, r2
 8006802:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006808:	8a7b      	ldrh	r3, [r7, #18]
 800680a:	3303      	adds	r3, #3
 800680c:	f023 0203 	bic.w	r2, r3, #3
 8006810:	89bb      	ldrh	r3, [r7, #12]
 8006812:	441a      	add	r2, r3
 8006814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006816:	429a      	cmp	r2, r3
 8006818:	d901      	bls.n	800681e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	e018      	b.n	8006850 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006824:	8a7b      	ldrh	r3, [r7, #18]
 8006826:	3303      	adds	r3, #3
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	4413      	add	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e001      	b.n	8006838 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	89b9      	ldrh	r1, [r7, #12]
 800683c:	89ba      	ldrh	r2, [r7, #12]
 800683e:	2302      	movs	r3, #2
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	897b      	ldrh	r3, [r7, #10]
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	460b      	mov	r3, r1
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	f7ff fe7f 	bl	800654c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800684e:	687b      	ldr	r3, [r7, #4]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d106      	bne.n	8006878 <pbuf_realloc+0x20>
 800686a:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <pbuf_realloc+0xfc>)
 800686c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006870:	4939      	ldr	r1, [pc, #228]	; (8006958 <pbuf_realloc+0x100>)
 8006872:	483a      	ldr	r0, [pc, #232]	; (800695c <pbuf_realloc+0x104>)
 8006874:	f004 f828 	bl	800a8c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	891b      	ldrh	r3, [r3, #8]
 800687c:	887a      	ldrh	r2, [r7, #2]
 800687e:	429a      	cmp	r2, r3
 8006880:	d263      	bcs.n	800694a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	891a      	ldrh	r2, [r3, #8]
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800688c:	887b      	ldrh	r3, [r7, #2]
 800688e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006894:	e018      	b.n	80068c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	895b      	ldrh	r3, [r3, #10]
 800689a:	897a      	ldrh	r2, [r7, #10]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	891a      	ldrh	r2, [r3, #8]
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <pbuf_realloc+0x70>
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <pbuf_realloc+0xfc>)
 80068bc:	f240 12af 	movw	r2, #431	; 0x1af
 80068c0:	4927      	ldr	r1, [pc, #156]	; (8006960 <pbuf_realloc+0x108>)
 80068c2:	4826      	ldr	r0, [pc, #152]	; (800695c <pbuf_realloc+0x104>)
 80068c4:	f004 f800 	bl	800a8c8 <iprintf>
  while (rem_len > q->len) {
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	895b      	ldrh	r3, [r3, #10]
 80068cc:	897a      	ldrh	r2, [r7, #10]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d8e1      	bhi.n	8006896 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	7b1b      	ldrb	r3, [r3, #12]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d121      	bne.n	8006922 <pbuf_realloc+0xca>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	895b      	ldrh	r3, [r3, #10]
 80068e2:	897a      	ldrh	r2, [r7, #10]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d01c      	beq.n	8006922 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	7b5b      	ldrb	r3, [r3, #13]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d116      	bne.n	8006922 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	897b      	ldrh	r3, [r7, #10]
 8006900:	4413      	add	r3, r2
 8006902:	b29b      	uxth	r3, r3
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff f896 	bl	8005a38 <mem_trim>
 800690c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <pbuf_realloc+0xca>
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <pbuf_realloc+0xfc>)
 8006916:	f240 12bd 	movw	r2, #445	; 0x1bd
 800691a:	4912      	ldr	r1, [pc, #72]	; (8006964 <pbuf_realloc+0x10c>)
 800691c:	480f      	ldr	r0, [pc, #60]	; (800695c <pbuf_realloc+0x104>)
 800691e:	f003 ffd3 	bl	800a8c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	897a      	ldrh	r2, [r7, #10]
 8006926:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	895a      	ldrh	r2, [r3, #10]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 f911 	bl	8006b64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e000      	b.n	800694c <pbuf_realloc+0xf4>
    return;
 800694a:	bf00      	nop

}
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	0800bf5c 	.word	0x0800bf5c
 8006958:	0800c074 	.word	0x0800c074
 800695c:	0800bfbc 	.word	0x0800bfbc
 8006960:	0800c08c 	.word	0x0800c08c
 8006964:	0800c0a4 	.word	0x0800c0a4

08006968 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <pbuf_add_header_impl+0x22>
 800697c:	4b2b      	ldr	r3, [pc, #172]	; (8006a2c <pbuf_add_header_impl+0xc4>)
 800697e:	f240 12df 	movw	r2, #479	; 0x1df
 8006982:	492b      	ldr	r1, [pc, #172]	; (8006a30 <pbuf_add_header_impl+0xc8>)
 8006984:	482b      	ldr	r0, [pc, #172]	; (8006a34 <pbuf_add_header_impl+0xcc>)
 8006986:	f003 ff9f 	bl	800a8c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <pbuf_add_header_impl+0x30>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006996:	d301      	bcc.n	800699c <pbuf_add_header_impl+0x34>
    return 1;
 8006998:	2301      	movs	r3, #1
 800699a:	e043      	b.n	8006a24 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e03e      	b.n	8006a24 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	891a      	ldrh	r2, [r3, #8]
 80069ae:	8a7b      	ldrh	r3, [r7, #18]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8a7a      	ldrh	r2, [r7, #18]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d901      	bls.n	80069be <pbuf_add_header_impl+0x56>
    return 1;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e032      	b.n	8006a24 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	7b1b      	ldrb	r3, [r3, #12]
 80069c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80069c4:	8a3b      	ldrh	r3, [r7, #16]
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00c      	beq.n	80069e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	425b      	negs	r3, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3310      	adds	r3, #16
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d20d      	bcs.n	8006a00 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e01d      	b.n	8006a24 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	425b      	negs	r3, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e001      	b.n	8006a00 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e011      	b.n	8006a24 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	895a      	ldrh	r2, [r3, #10]
 8006a0a:	8a7b      	ldrh	r3, [r7, #18]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	891a      	ldrh	r2, [r3, #8]
 8006a18:	8a7b      	ldrh	r3, [r7, #18]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	811a      	strh	r2, [r3, #8]


  return 0;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	0800bf5c 	.word	0x0800bf5c
 8006a30:	0800c0c0 	.word	0x0800c0c0
 8006a34:	0800bfbc 	.word	0x0800bfbc

08006a38 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006a42:	2200      	movs	r2, #0
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ff8e 	bl	8006968 <pbuf_add_header_impl>
 8006a4c:	4603      	mov	r3, r0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <pbuf_remove_header+0x1e>
 8006a68:	4b20      	ldr	r3, [pc, #128]	; (8006aec <pbuf_remove_header+0x94>)
 8006a6a:	f240 224b 	movw	r2, #587	; 0x24b
 8006a6e:	4920      	ldr	r1, [pc, #128]	; (8006af0 <pbuf_remove_header+0x98>)
 8006a70:	4820      	ldr	r0, [pc, #128]	; (8006af4 <pbuf_remove_header+0x9c>)
 8006a72:	f003 ff29 	bl	800a8c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <pbuf_remove_header+0x2c>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a82:	d301      	bcc.n	8006a88 <pbuf_remove_header+0x30>
    return 1;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e02c      	b.n	8006ae2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <pbuf_remove_header+0x3a>
    return 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	e027      	b.n	8006ae2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	895b      	ldrh	r3, [r3, #10]
 8006a9a:	89fa      	ldrh	r2, [r7, #14]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d908      	bls.n	8006ab2 <pbuf_remove_header+0x5a>
 8006aa0:	4b12      	ldr	r3, [pc, #72]	; (8006aec <pbuf_remove_header+0x94>)
 8006aa2:	f240 2255 	movw	r2, #597	; 0x255
 8006aa6:	4914      	ldr	r1, [pc, #80]	; (8006af8 <pbuf_remove_header+0xa0>)
 8006aa8:	4812      	ldr	r0, [pc, #72]	; (8006af4 <pbuf_remove_header+0x9c>)
 8006aaa:	f003 ff0d 	bl	800a8c8 <iprintf>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e017      	b.n	8006ae2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	441a      	add	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	895a      	ldrh	r2, [r3, #10]
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	891a      	ldrh	r2, [r3, #8]
 8006ad6:	89fb      	ldrh	r3, [r7, #14]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	0800bf5c 	.word	0x0800bf5c
 8006af0:	0800c0c0 	.word	0x0800c0c0
 8006af4:	0800bfbc 	.word	0x0800bfbc
 8006af8:	0800c0cc 	.word	0x0800c0cc

08006afc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	da08      	bge.n	8006b26 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b18:	425b      	negs	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff9b 	bl	8006a58 <pbuf_remove_header>
 8006b22:	4603      	mov	r3, r0
 8006b24:	e007      	b.n	8006b36 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006b26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b2a:	787a      	ldrb	r2, [r7, #1]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff1a 	bl	8006968 <pbuf_add_header_impl>
 8006b34:	4603      	mov	r3, r0
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ffd2 	bl	8006afc <pbuf_header_impl>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <pbuf_free+0x22>
 8006b78:	4b38      	ldr	r3, [pc, #224]	; (8006c5c <pbuf_free+0xf8>)
 8006b7a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006b7e:	4938      	ldr	r1, [pc, #224]	; (8006c60 <pbuf_free+0xfc>)
 8006b80:	4838      	ldr	r0, [pc, #224]	; (8006c64 <pbuf_free+0x100>)
 8006b82:	f003 fea1 	bl	800a8c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e063      	b.n	8006c52 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006b8e:	e05c      	b.n	8006c4a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7b9b      	ldrb	r3, [r3, #14]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <pbuf_free+0x42>
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <pbuf_free+0xf8>)
 8006b9a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006b9e:	4932      	ldr	r1, [pc, #200]	; (8006c68 <pbuf_free+0x104>)
 8006ba0:	4830      	ldr	r0, [pc, #192]	; (8006c64 <pbuf_free+0x100>)
 8006ba2:	f003 fe91 	bl	800a8c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7b9b      	ldrb	r3, [r3, #14]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	739a      	strb	r2, [r3, #14]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7b9b      	ldrb	r3, [r3, #14]
 8006bb6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006bb8:	7dbb      	ldrb	r3, [r7, #22]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d143      	bne.n	8006c46 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7b1b      	ldrb	r3, [r3, #12]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7b5b      	ldrb	r3, [r3, #13]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d011      	beq.n	8006bfe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <pbuf_free+0x90>
 8006be6:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <pbuf_free+0xf8>)
 8006be8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <pbuf_free+0x108>)
 8006bee:	481d      	ldr	r0, [pc, #116]	; (8006c64 <pbuf_free+0x100>)
 8006bf0:	f003 fe6a 	bl	800a8c8 <iprintf>
        pc->custom_free_function(p);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
 8006bfc:	e01d      	b.n	8006c3a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d104      	bne.n	8006c0e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	2005      	movs	r0, #5
 8006c08:	f7ff f9cc 	bl	8005fa4 <memp_free>
 8006c0c:	e015      	b.n	8006c3a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d104      	bne.n	8006c1e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	2004      	movs	r0, #4
 8006c18:	f7ff f9c4 	bl	8005fa4 <memp_free>
 8006c1c:	e00d      	b.n	8006c3a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <pbuf_free+0xc8>
          mem_free(p);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fe fe9d 	bl	8005964 <mem_free>
 8006c2a:	e006      	b.n	8006c3a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <pbuf_free+0xf8>)
 8006c2e:	f240 320f 	movw	r2, #783	; 0x30f
 8006c32:	490f      	ldr	r1, [pc, #60]	; (8006c70 <pbuf_free+0x10c>)
 8006c34:	480b      	ldr	r0, [pc, #44]	; (8006c64 <pbuf_free+0x100>)
 8006c36:	f003 fe47 	bl	800a8c8 <iprintf>
        }
      }
      count++;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e001      	b.n	8006c4a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d19f      	bne.n	8006b90 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	0800bf5c 	.word	0x0800bf5c
 8006c60:	0800c0c0 	.word	0x0800c0c0
 8006c64:	0800bfbc 	.word	0x0800bfbc
 8006c68:	0800c0ec 	.word	0x0800c0ec
 8006c6c:	0800c104 	.word	0x0800c104
 8006c70:	0800c128 	.word	0x0800c128

08006c74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006c80:	e005      	b.n	8006c8e <pbuf_clen+0x1a>
    ++len;
 8006c82:	89fb      	ldrh	r3, [r7, #14]
 8006c84:	3301      	adds	r3, #1
 8006c86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f6      	bne.n	8006c82 <pbuf_clen+0xe>
  }
  return len;
 8006c94:	89fb      	ldrh	r3, [r7, #14]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d010      	beq.n	8006cd4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7b9b      	ldrb	r3, [r3, #14]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	7b9b      	ldrb	r3, [r3, #14]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <pbuf_ref+0x30>
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <pbuf_ref+0x38>)
 8006cc8:	f240 3242 	movw	r2, #834	; 0x342
 8006ccc:	4904      	ldr	r1, [pc, #16]	; (8006ce0 <pbuf_ref+0x3c>)
 8006cce:	4805      	ldr	r0, [pc, #20]	; (8006ce4 <pbuf_ref+0x40>)
 8006cd0:	f003 fdfa 	bl	800a8c8 <iprintf>
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	0800bf5c 	.word	0x0800bf5c
 8006ce0:	0800c13c 	.word	0x0800c13c
 8006ce4:	0800bfbc 	.word	0x0800bfbc

08006ce8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <pbuf_cat+0x16>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <pbuf_cat+0x26>
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <pbuf_cat+0x98>)
 8006d00:	f240 3259 	movw	r2, #857	; 0x359
 8006d04:	491f      	ldr	r1, [pc, #124]	; (8006d84 <pbuf_cat+0x9c>)
 8006d06:	4820      	ldr	r0, [pc, #128]	; (8006d88 <pbuf_cat+0xa0>)
 8006d08:	f003 fdde 	bl	800a8c8 <iprintf>
 8006d0c:	e034      	b.n	8006d78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e00a      	b.n	8006d2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	891a      	ldrh	r2, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	891b      	ldrh	r3, [r3, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	891a      	ldrh	r2, [r3, #8]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	895b      	ldrh	r3, [r3, #10]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d006      	beq.n	8006d4c <pbuf_cat+0x64>
 8006d3e:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <pbuf_cat+0x98>)
 8006d40:	f240 3262 	movw	r2, #866	; 0x362
 8006d44:	4911      	ldr	r1, [pc, #68]	; (8006d8c <pbuf_cat+0xa4>)
 8006d46:	4810      	ldr	r0, [pc, #64]	; (8006d88 <pbuf_cat+0xa0>)
 8006d48:	f003 fdbe 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <pbuf_cat+0x7a>
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <pbuf_cat+0x98>)
 8006d56:	f240 3263 	movw	r2, #867	; 0x363
 8006d5a:	490d      	ldr	r1, [pc, #52]	; (8006d90 <pbuf_cat+0xa8>)
 8006d5c:	480a      	ldr	r0, [pc, #40]	; (8006d88 <pbuf_cat+0xa0>)
 8006d5e:	f003 fdb3 	bl	800a8c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	891a      	ldrh	r2, [r3, #8]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	891b      	ldrh	r3, [r3, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	0800bf5c 	.word	0x0800bf5c
 8006d84:	0800c150 	.word	0x0800c150
 8006d88:	0800bfbc 	.word	0x0800bfbc
 8006d8c:	0800c188 	.word	0x0800c188
 8006d90:	0800c1b8 	.word	0x0800c1b8

08006d94 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff ffa1 	bl	8006ce8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006da6:	6838      	ldr	r0, [r7, #0]
 8006da8:	f7ff ff7c 	bl	8006ca4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <pbuf_copy+0x2a>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <pbuf_copy+0x2a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	891a      	ldrh	r2, [r3, #8]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	891b      	ldrh	r3, [r3, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d209      	bcs.n	8006df2 <pbuf_copy+0x3e>
 8006dde:	4b57      	ldr	r3, [pc, #348]	; (8006f3c <pbuf_copy+0x188>)
 8006de0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006de4:	4956      	ldr	r1, [pc, #344]	; (8006f40 <pbuf_copy+0x18c>)
 8006de6:	4857      	ldr	r0, [pc, #348]	; (8006f44 <pbuf_copy+0x190>)
 8006de8:	f003 fd6e 	bl	800a8c8 <iprintf>
 8006dec:	f06f 030f 	mvn.w	r3, #15
 8006df0:	e09f      	b.n	8006f32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	895b      	ldrh	r3, [r3, #10]
 8006df6:	461a      	mov	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	1ad2      	subs	r2, r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	895b      	ldrh	r3, [r3, #10]
 8006e00:	4619      	mov	r1, r3
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1acb      	subs	r3, r1, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d306      	bcc.n	8006e18 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	895b      	ldrh	r3, [r3, #10]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e005      	b.n	8006e24 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	895b      	ldrh	r3, [r3, #10]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	18d0      	adds	r0, r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4619      	mov	r1, r3
 8006e38:	f003 fc86 	bl	800a748 <memcpy>
    offset_to += len;
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	895b      	ldrh	r3, [r3, #10]
 8006e50:	461a      	mov	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d906      	bls.n	8006e66 <pbuf_copy+0xb2>
 8006e58:	4b38      	ldr	r3, [pc, #224]	; (8006f3c <pbuf_copy+0x188>)
 8006e5a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006e5e:	493a      	ldr	r1, [pc, #232]	; (8006f48 <pbuf_copy+0x194>)
 8006e60:	4838      	ldr	r0, [pc, #224]	; (8006f44 <pbuf_copy+0x190>)
 8006e62:	f003 fd31 	bl	800a8c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	895b      	ldrh	r3, [r3, #10]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d906      	bls.n	8006e80 <pbuf_copy+0xcc>
 8006e72:	4b32      	ldr	r3, [pc, #200]	; (8006f3c <pbuf_copy+0x188>)
 8006e74:	f240 32da 	movw	r2, #986	; 0x3da
 8006e78:	4934      	ldr	r1, [pc, #208]	; (8006f4c <pbuf_copy+0x198>)
 8006e7a:	4832      	ldr	r0, [pc, #200]	; (8006f44 <pbuf_copy+0x190>)
 8006e7c:	f003 fd24 	bl	800a8c8 <iprintf>
    if (offset_from >= p_from->len) {
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	461a      	mov	r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d304      	bcc.n	8006e96 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	895b      	ldrh	r3, [r3, #10]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d114      	bne.n	8006ecc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10c      	bne.n	8006ecc <pbuf_copy+0x118>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <pbuf_copy+0x118>
 8006eb8:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <pbuf_copy+0x188>)
 8006eba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006ebe:	4924      	ldr	r1, [pc, #144]	; (8006f50 <pbuf_copy+0x19c>)
 8006ec0:	4820      	ldr	r0, [pc, #128]	; (8006f44 <pbuf_copy+0x190>)
 8006ec2:	f003 fd01 	bl	800a8c8 <iprintf>
 8006ec6:	f06f 030f 	mvn.w	r3, #15
 8006eca:	e032      	b.n	8006f32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <pbuf_copy+0x146>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	895a      	ldrh	r2, [r3, #10]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	891b      	ldrh	r3, [r3, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d10d      	bne.n	8006efa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <pbuf_copy+0x146>
 8006ee6:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <pbuf_copy+0x188>)
 8006ee8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006eec:	4919      	ldr	r1, [pc, #100]	; (8006f54 <pbuf_copy+0x1a0>)
 8006eee:	4815      	ldr	r0, [pc, #84]	; (8006f44 <pbuf_copy+0x190>)
 8006ef0:	f003 fcea 	bl	800a8c8 <iprintf>
 8006ef4:	f06f 0305 	mvn.w	r3, #5
 8006ef8:	e01b      	b.n	8006f32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d013      	beq.n	8006f28 <pbuf_copy+0x174>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	895a      	ldrh	r2, [r3, #10]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	891b      	ldrh	r3, [r3, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d10d      	bne.n	8006f28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <pbuf_copy+0x174>
 8006f14:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <pbuf_copy+0x188>)
 8006f16:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006f1a:	490e      	ldr	r1, [pc, #56]	; (8006f54 <pbuf_copy+0x1a0>)
 8006f1c:	4809      	ldr	r0, [pc, #36]	; (8006f44 <pbuf_copy+0x190>)
 8006f1e:	f003 fcd3 	bl	800a8c8 <iprintf>
 8006f22:	f06f 0305 	mvn.w	r3, #5
 8006f26:	e004      	b.n	8006f32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f47f af61 	bne.w	8006df2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	0800bf5c 	.word	0x0800bf5c
 8006f40:	0800c204 	.word	0x0800c204
 8006f44:	0800bfbc 	.word	0x0800bfbc
 8006f48:	0800c234 	.word	0x0800c234
 8006f4c:	0800c24c 	.word	0x0800c24c
 8006f50:	0800c268 	.word	0x0800c268
 8006f54:	0800c278 	.word	0x0800c278

08006f58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4611      	mov	r1, r2
 8006f64:	461a      	mov	r2, r3
 8006f66:	460b      	mov	r3, r1
 8006f68:	80fb      	strh	r3, [r7, #6]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d108      	bne.n	8006f8e <pbuf_copy_partial+0x36>
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	; (800702c <pbuf_copy_partial+0xd4>)
 8006f7e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006f82:	492b      	ldr	r1, [pc, #172]	; (8007030 <pbuf_copy_partial+0xd8>)
 8006f84:	482b      	ldr	r0, [pc, #172]	; (8007034 <pbuf_copy_partial+0xdc>)
 8006f86:	f003 fc9f 	bl	800a8c8 <iprintf>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e04a      	b.n	8007024 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d108      	bne.n	8006fa6 <pbuf_copy_partial+0x4e>
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <pbuf_copy_partial+0xd4>)
 8006f96:	f240 420b 	movw	r2, #1035	; 0x40b
 8006f9a:	4927      	ldr	r1, [pc, #156]	; (8007038 <pbuf_copy_partial+0xe0>)
 8006f9c:	4825      	ldr	r0, [pc, #148]	; (8007034 <pbuf_copy_partial+0xdc>)
 8006f9e:	f003 fc93 	bl	800a8c8 <iprintf>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e03e      	b.n	8007024 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e034      	b.n	8007016 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006fac:	88bb      	ldrh	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <pbuf_copy_partial+0x70>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	895b      	ldrh	r3, [r3, #10]
 8006fb6:	88ba      	ldrh	r2, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d305      	bcc.n	8006fc8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	895b      	ldrh	r3, [r3, #10]
 8006fc0:	88ba      	ldrh	r2, [r7, #4]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	80bb      	strh	r3, [r7, #4]
 8006fc6:	e023      	b.n	8007010 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	895a      	ldrh	r2, [r3, #10]
 8006fcc:	88bb      	ldrh	r3, [r7, #4]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006fd2:	8b3a      	ldrh	r2, [r7, #24]
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d901      	bls.n	8006fde <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006fde:	8b7b      	ldrh	r3, [r7, #26]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	18d0      	adds	r0, r2, r3
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	88bb      	ldrh	r3, [r7, #4]
 8006fea:	4413      	add	r3, r2
 8006fec:	8b3a      	ldrh	r2, [r7, #24]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	f003 fbaa 	bl	800a748 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006ff4:	8afa      	ldrh	r2, [r7, #22]
 8006ff6:	8b3b      	ldrh	r3, [r7, #24]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006ffc:	8b7a      	ldrh	r2, [r7, #26]
 8006ffe:	8b3b      	ldrh	r3, [r7, #24]
 8007000:	4413      	add	r3, r2
 8007002:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007004:	88fa      	ldrh	r2, [r7, #6]
 8007006:	8b3b      	ldrh	r3, [r7, #24]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <pbuf_copy_partial+0xca>
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1c4      	bne.n	8006fac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007022:	8afb      	ldrh	r3, [r7, #22]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	0800bf5c 	.word	0x0800bf5c
 8007030:	0800c2a4 	.word	0x0800c2a4
 8007034:	0800bfbc 	.word	0x0800bfbc
 8007038:	0800c2c4 	.word	0x0800c2c4

0800703c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	460b      	mov	r3, r1
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007052:	e007      	b.n	8007064 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	895b      	ldrh	r3, [r3, #10]
 8007058:	8afa      	ldrh	r2, [r7, #22]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <pbuf_skip_const+0x38>
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	895b      	ldrh	r3, [r3, #10]
 800706e:	8afa      	ldrh	r2, [r7, #22]
 8007070:	429a      	cmp	r2, r3
 8007072:	d2ef      	bcs.n	8007054 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	8afa      	ldrh	r2, [r7, #22]
 800707e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8007080:	693b      	ldr	r3, [r7, #16]
}
 8007082:	4618      	mov	r0, r3
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <pbuf_take+0x30>
 80070ac:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <pbuf_take+0x108>)
 80070ae:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80070b2:	493a      	ldr	r1, [pc, #232]	; (800719c <pbuf_take+0x10c>)
 80070b4:	483a      	ldr	r0, [pc, #232]	; (80071a0 <pbuf_take+0x110>)
 80070b6:	f003 fc07 	bl	800a8c8 <iprintf>
 80070ba:	f06f 030f 	mvn.w	r3, #15
 80070be:	e067      	b.n	8007190 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <pbuf_take+0x4a>
 80070c6:	4b34      	ldr	r3, [pc, #208]	; (8007198 <pbuf_take+0x108>)
 80070c8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80070cc:	4935      	ldr	r1, [pc, #212]	; (80071a4 <pbuf_take+0x114>)
 80070ce:	4834      	ldr	r0, [pc, #208]	; (80071a0 <pbuf_take+0x110>)
 80070d0:	f003 fbfa 	bl	800a8c8 <iprintf>
 80070d4:	f06f 030f 	mvn.w	r3, #15
 80070d8:	e05a      	b.n	8007190 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	891b      	ldrh	r3, [r3, #8]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d909      	bls.n	80070f8 <pbuf_take+0x68>
 80070e4:	4b2c      	ldr	r3, [pc, #176]	; (8007198 <pbuf_take+0x108>)
 80070e6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80070ea:	492f      	ldr	r1, [pc, #188]	; (80071a8 <pbuf_take+0x118>)
 80070ec:	482c      	ldr	r0, [pc, #176]	; (80071a0 <pbuf_take+0x110>)
 80070ee:	f003 fbeb 	bl	800a8c8 <iprintf>
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	e04b      	b.n	8007190 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <pbuf_take+0x7e>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <pbuf_take+0x7e>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	891b      	ldrh	r3, [r3, #8]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	429a      	cmp	r2, r3
 800710c:	d902      	bls.n	8007114 <pbuf_take+0x84>
    return ERR_ARG;
 800710e:	f06f 030f 	mvn.w	r3, #15
 8007112:	e03d      	b.n	8007190 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	e028      	b.n	800716c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <pbuf_take+0x9e>
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <pbuf_take+0x108>)
 8007122:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007126:	4921      	ldr	r1, [pc, #132]	; (80071ac <pbuf_take+0x11c>)
 8007128:	481d      	ldr	r0, [pc, #116]	; (80071a0 <pbuf_take+0x110>)
 800712a:	f003 fbcd 	bl	800a8c8 <iprintf>
    buf_copy_len = total_copy_len;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	895b      	ldrh	r3, [r3, #10]
 8007136:	461a      	mov	r2, r3
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	4293      	cmp	r3, r2
 800713c:	d902      	bls.n	8007144 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	895b      	ldrh	r3, [r3, #10]
 8007142:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	6858      	ldr	r0, [r3, #4]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	4413      	add	r3, r2
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4619      	mov	r1, r3
 8007152:	f003 faf9 	bl	800a748 <memcpy>
    total_copy_len -= buf_copy_len;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	4413      	add	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1d3      	bne.n	800711a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d103      	bne.n	8007180 <pbuf_take+0xf0>
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d006      	beq.n	800718e <pbuf_take+0xfe>
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <pbuf_take+0x108>)
 8007182:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8007186:	490a      	ldr	r1, [pc, #40]	; (80071b0 <pbuf_take+0x120>)
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <pbuf_take+0x110>)
 800718a:	f003 fb9d 	bl	800a8c8 <iprintf>
  return ERR_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	0800bf5c 	.word	0x0800bf5c
 800719c:	0800c334 	.word	0x0800c334
 80071a0:	0800bfbc 	.word	0x0800bfbc
 80071a4:	0800c34c 	.word	0x0800c34c
 80071a8:	0800c368 	.word	0x0800c368
 80071ac:	0800c388 	.word	0x0800c388
 80071b0:	0800c3a0 	.word	0x0800c3a0

080071b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	603a      	str	r2, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
 80071c0:	460b      	mov	r3, r1
 80071c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	8919      	ldrh	r1, [r3, #8]
 80071c8:	88ba      	ldrh	r2, [r7, #4]
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff f9e7 	bl	80065a0 <pbuf_alloc>
 80071d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <pbuf_clone+0x2a>
    return NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	e011      	b.n	8007202 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fde7 	bl	8006db4 <pbuf_copy>
 80071e6:	4603      	mov	r3, r0
 80071e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80071ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <pbuf_clone+0x4c>
 80071f2:	4b06      	ldr	r3, [pc, #24]	; (800720c <pbuf_clone+0x58>)
 80071f4:	f240 5224 	movw	r2, #1316	; 0x524
 80071f8:	4905      	ldr	r1, [pc, #20]	; (8007210 <pbuf_clone+0x5c>)
 80071fa:	4806      	ldr	r0, [pc, #24]	; (8007214 <pbuf_clone+0x60>)
 80071fc:	f003 fb64 	bl	800a8c8 <iprintf>
  return q;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	0800bf5c 	.word	0x0800bf5c
 8007210:	0800c3d0 	.word	0x0800c3d0
 8007214:	0800bfbc 	.word	0x0800bfbc

08007218 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007224:	887b      	ldrh	r3, [r7, #2]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f80c 	bl	8007246 <pbuf_try_get_at>
 800722e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	db02      	blt.n	800723c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	e000      	b.n	800723e <pbuf_get_at+0x26>
  }
  return 0;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007252:	f107 020a 	add.w	r2, r7, #10
 8007256:	887b      	ldrh	r3, [r7, #2]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff feee 	bl	800703c <pbuf_skip_const>
 8007260:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <pbuf_try_get_at+0x38>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	895a      	ldrh	r2, [r3, #10]
 800726c:	897b      	ldrh	r3, [r7, #10]
 800726e:	429a      	cmp	r2, r3
 8007270:	d905      	bls.n	800727e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	897a      	ldrh	r2, [r7, #10]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	e001      	b.n	8007282 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800727e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b088      	sub	sp, #32
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	461a      	mov	r2, r3
 8007296:	460b      	mov	r3, r1
 8007298:	817b      	strh	r3, [r7, #10]
 800729a:	4613      	mov	r3, r2
 800729c:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800729e:	897b      	ldrh	r3, [r7, #10]
 80072a0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	891b      	ldrh	r3, [r3, #8]
 80072aa:	4619      	mov	r1, r3
 80072ac:	897a      	ldrh	r2, [r7, #10]
 80072ae:	893b      	ldrh	r3, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	4299      	cmp	r1, r3
 80072b4:	da0a      	bge.n	80072cc <pbuf_memcmp+0x42>
    return 0xffff;
 80072b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072ba:	e037      	b.n	800732c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	895b      	ldrh	r3, [r3, #10]
 80072c0:	8bfa      	ldrh	r2, [r7, #30]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d004      	beq.n	80072dc <pbuf_memcmp+0x52>
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	895b      	ldrh	r3, [r3, #10]
 80072d6:	8bfa      	ldrh	r2, [r7, #30]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d2ef      	bcs.n	80072bc <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 80072dc:	2300      	movs	r3, #0
 80072de:	82fb      	strh	r3, [r7, #22]
 80072e0:	e01f      	b.n	8007322 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 80072e2:	8bfa      	ldrh	r2, [r7, #30]
 80072e4:	8afb      	ldrh	r3, [r7, #22]
 80072e6:	4413      	add	r3, r2
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	69b8      	ldr	r0, [r7, #24]
 80072ee:	f7ff ff93 	bl	8007218 <pbuf_get_at>
 80072f2:	4603      	mov	r3, r0
 80072f4:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8007300:	7d7a      	ldrb	r2, [r7, #21]
 8007302:	7d3b      	ldrb	r3, [r7, #20]
 8007304:	429a      	cmp	r2, r3
 8007306:	d009      	beq.n	800731c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8007308:	8afb      	ldrh	r3, [r7, #22]
 800730a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800730e:	4293      	cmp	r3, r2
 8007310:	bf28      	it	cs
 8007312:	4613      	movcs	r3, r2
 8007314:	b29b      	uxth	r3, r3
 8007316:	3301      	adds	r3, #1
 8007318:	b29b      	uxth	r3, r3
 800731a:	e007      	b.n	800732c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800731c:	8afb      	ldrh	r3, [r7, #22]
 800731e:	3301      	adds	r3, #1
 8007320:	82fb      	strh	r3, [r7, #22]
 8007322:	8afa      	ldrh	r2, [r7, #22]
 8007324:	893b      	ldrh	r3, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	d3db      	bcc.n	80072e2 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	460b      	mov	r3, r1
 8007344:	80fb      	strh	r3, [r7, #6]
 8007346:	4613      	mov	r3, r2
 8007348:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	891a      	ldrh	r2, [r3, #8]
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	891b      	ldrh	r3, [r3, #8]
 8007358:	4619      	mov	r1, r3
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	88bb      	ldrh	r3, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	4299      	cmp	r1, r3
 8007362:	db16      	blt.n	8007392 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007364:	88bb      	ldrh	r3, [r7, #4]
 8007366:	82fb      	strh	r3, [r7, #22]
 8007368:	e00f      	b.n	800738a <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	8af9      	ldrh	r1, [r7, #22]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff ff8a 	bl	800728a <pbuf_memcmp>
 8007376:	4603      	mov	r3, r0
 8007378:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800737a:	8a7b      	ldrh	r3, [r7, #18]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <pbuf_memfind+0x50>
        return i;
 8007380:	8afb      	ldrh	r3, [r7, #22]
 8007382:	e008      	b.n	8007396 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007384:	8afb      	ldrh	r3, [r7, #22]
 8007386:	3301      	adds	r3, #1
 8007388:	82fb      	strh	r3, [r7, #22]
 800738a:	8afa      	ldrh	r2, [r7, #22]
 800738c:	8abb      	ldrh	r3, [r7, #20]
 800738e:	429a      	cmp	r2, r3
 8007390:	d9eb      	bls.n	800736a <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 8007392:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80073ac:	2003      	movs	r0, #3
 80073ae:	f7fe fdad 	bl	8005f0c <memp_malloc>
 80073b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d151      	bne.n	8007464 <sys_timeout_abs+0xc4>
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <sys_timeout_abs+0xcc>)
 80073c2:	22be      	movs	r2, #190	; 0xbe
 80073c4:	492a      	ldr	r1, [pc, #168]	; (8007470 <sys_timeout_abs+0xd0>)
 80073c6:	482b      	ldr	r0, [pc, #172]	; (8007474 <sys_timeout_abs+0xd4>)
 80073c8:	f003 fa7e 	bl	800a8c8 <iprintf>
    return;
 80073cc:	e04a      	b.n	8007464 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80073e6:	4b24      	ldr	r3, [pc, #144]	; (8007478 <sys_timeout_abs+0xd8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80073ee:	4a22      	ldr	r2, [pc, #136]	; (8007478 <sys_timeout_abs+0xd8>)
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	6013      	str	r3, [r2, #0]
    return;
 80073f4:	e037      	b.n	8007466 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	4b1f      	ldr	r3, [pc, #124]	; (8007478 <sys_timeout_abs+0xd8>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	0fdb      	lsrs	r3, r3, #31
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <sys_timeout_abs+0xd8>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <sys_timeout_abs+0xd8>)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	e023      	b.n	8007466 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800741e:	4b16      	ldr	r3, [pc, #88]	; (8007478 <sys_timeout_abs+0xd8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	e01a      	b.n	800745c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <sys_timeout_abs+0xa6>
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	0fdb      	lsrs	r3, r3, #31
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	601a      	str	r2, [r3, #0]
        break;
 8007454:	e007      	b.n	8007466 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e1      	bne.n	8007426 <sys_timeout_abs+0x86>
 8007462:	e000      	b.n	8007466 <sys_timeout_abs+0xc6>
    return;
 8007464:	bf00      	nop
      }
    }
  }
}
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	0800c3e4 	.word	0x0800c3e4
 8007470:	0800c418 	.word	0x0800c418
 8007474:	0800c458 	.word	0x0800c458
 8007478:	200000e4 	.word	0x200000e4

0800747c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4798      	blx	r3

  now = sys_now();
 800748e:	f7fd fd03 	bl	8004e98 <sys_now>
 8007492:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <lwip_cyclic_timer+0x5c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4413      	add	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	0fdb      	lsrs	r3, r3, #31
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4413      	add	r3, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <lwip_cyclic_timer+0x60>)
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff ff6e 	bl	80073a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80074c4:	e004      	b.n	80074d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <lwip_cyclic_timer+0x60>)
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff ff68 	bl	80073a0 <sys_timeout_abs>
}
 80074d0:	bf00      	nop
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	200000e8 	.word	0x200000e8
 80074dc:	0800747d 	.word	0x0800747d

080074e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e00e      	b.n	800750a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80074ec:	4a0b      	ldr	r2, [pc, #44]	; (800751c <sys_timeouts_init+0x3c>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <sys_timeouts_init+0x3c>)
 80074fa:	4413      	add	r3, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4908      	ldr	r1, [pc, #32]	; (8007520 <sys_timeouts_init+0x40>)
 8007500:	f000 f810 	bl	8007524 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d9ed      	bls.n	80074ec <sys_timeouts_init+0xc>
  }
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	0800cf74 	.word	0x0800cf74
 8007520:	0800747d 	.word	0x0800747d

08007524 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007536:	d306      	bcc.n	8007546 <sys_timeout+0x22>
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <sys_timeout+0x40>)
 800753a:	f240 1229 	movw	r2, #297	; 0x129
 800753e:	490a      	ldr	r1, [pc, #40]	; (8007568 <sys_timeout+0x44>)
 8007540:	480a      	ldr	r0, [pc, #40]	; (800756c <sys_timeout+0x48>)
 8007542:	f003 f9c1 	bl	800a8c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8007546:	f7fd fca7 	bl	8004e98 <sys_now>
 800754a:	4602      	mov	r2, r0
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	6978      	ldr	r0, [r7, #20]
 8007558:	f7ff ff22 	bl	80073a0 <sys_timeout_abs>
#endif
}
 800755c:	bf00      	nop
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	0800c3e4 	.word	0x0800c3e4
 8007568:	0800c480 	.word	0x0800c480
 800756c:	0800c458 	.word	0x0800c458

08007570 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800757a:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <sys_untimeout+0x70>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d029      	beq.n	80075d6 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8007582:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <sys_untimeout+0x70>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60bb      	str	r3, [r7, #8]
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	e01f      	b.n	80075ce <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	d115      	bne.n	80075c4 <sys_untimeout+0x54>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d110      	bne.n	80075c4 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <sys_untimeout+0x42>
        next_timeout = t->next;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <sys_untimeout+0x70>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e003      	b.n	80075ba <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	2003      	movs	r0, #3
 80075be:	f7fe fcf1 	bl	8005fa4 <memp_free>
      return;
 80075c2:	e009      	b.n	80075d8 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1dc      	bne.n	800758e <sys_untimeout+0x1e>
    }
  }
  return;
 80075d4:	e000      	b.n	80075d8 <sys_untimeout+0x68>
    return;
 80075d6:	bf00      	nop
}
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200000e4 	.word	0x200000e4

080075e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80075ea:	f7fd fc55 	bl	8004e98 <sys_now>
 80075ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <sys_check_timeouts+0x6c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d022      	beq.n	8007642 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	0fdb      	lsrs	r3, r3, #31
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11a      	bne.n	8007646 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0e      	ldr	r2, [pc, #56]	; (8007650 <sys_check_timeouts+0x6c>)
 8007616:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <sys_check_timeouts+0x70>)
 800762a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	2003      	movs	r0, #3
 8007630:	f7fe fcb8 	bl	8005fa4 <memp_free>
    if (handler != NULL) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0da      	beq.n	80075f0 <sys_check_timeouts+0xc>
      handler(arg);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6838      	ldr	r0, [r7, #0]
 800763e:	4798      	blx	r3
  do {
 8007640:	e7d6      	b.n	80075f0 <sys_check_timeouts+0xc>
      return;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <sys_check_timeouts+0x64>
      return;
 8007646:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	200000e4 	.word	0x200000e4
 8007654:	200000e8 	.word	0x200000e8

08007658 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800765c:	f003 f94c 	bl	800a8f8 <rand>
 8007660:	4603      	mov	r3, r0
 8007662:	b29b      	uxth	r3, r3
 8007664:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007668:	b29b      	uxth	r3, r3
 800766a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800766e:	b29a      	uxth	r2, r3
 8007670:	4b01      	ldr	r3, [pc, #4]	; (8007678 <udp_init+0x20>)
 8007672:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007674:	bf00      	nop
 8007676:	bd80      	pop	{r7, pc}
 8007678:	2000000a 	.word	0x2000000a

0800767c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8007686:	4b17      	ldr	r3, [pc, #92]	; (80076e4 <udp_new_port+0x68>)
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	b291      	uxth	r1, r2
 800768e:	4a15      	ldr	r2, [pc, #84]	; (80076e4 <udp_new_port+0x68>)
 8007690:	8011      	strh	r1, [r2, #0]
 8007692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007696:	4293      	cmp	r3, r2
 8007698:	d103      	bne.n	80076a2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <udp_new_port+0x68>)
 800769c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80076a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80076a2:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <udp_new_port+0x6c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	e011      	b.n	80076ce <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	8a5a      	ldrh	r2, [r3, #18]
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <udp_new_port+0x68>)
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d108      	bne.n	80076c8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	3301      	adds	r3, #1
 80076ba:	80fb      	strh	r3, [r7, #6]
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076c2:	d3e0      	bcc.n	8007686 <udp_new_port+0xa>
        return 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e007      	b.n	80076d8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1ea      	bne.n	80076aa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <udp_new_port+0x68>)
 80076d6:	881b      	ldrh	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	2000000a 	.word	0x2000000a
 80076e8:	20008588 	.word	0x20008588

080076ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <udp_input_local_match+0x20>
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <udp_input_local_match+0xb4>)
 8007702:	2287      	movs	r2, #135	; 0x87
 8007704:	4927      	ldr	r1, [pc, #156]	; (80077a4 <udp_input_local_match+0xb8>)
 8007706:	4828      	ldr	r0, [pc, #160]	; (80077a8 <udp_input_local_match+0xbc>)
 8007708:	f003 f8de 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <udp_input_local_match+0x32>
 8007712:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <udp_input_local_match+0xb4>)
 8007714:	2288      	movs	r2, #136	; 0x88
 8007716:	4925      	ldr	r1, [pc, #148]	; (80077ac <udp_input_local_match+0xc0>)
 8007718:	4823      	ldr	r0, [pc, #140]	; (80077a8 <udp_input_local_match+0xbc>)
 800771a:	f003 f8d5 	bl	800a8c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	7a1b      	ldrb	r3, [r3, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00b      	beq.n	800773e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	7a1a      	ldrb	r2, [r3, #8]
 800772a:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <udp_input_local_match+0xc4>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007732:	3301      	adds	r3, #1
 8007734:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <udp_input_local_match+0x52>
    return 0;
 800773a:	2300      	movs	r3, #0
 800773c:	e02b      	b.n	8007796 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d018      	beq.n	8007776 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d013      	beq.n	8007772 <udp_input_local_match+0x86>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007752:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <udp_input_local_match+0xc4>)
 8007754:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d00a      	beq.n	8007772 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <udp_input_local_match+0xc4>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	405a      	eors	r2, r3
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3308      	adds	r3, #8
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800776e:	2b00      	cmp	r3, #0
 8007770:	d110      	bne.n	8007794 <udp_input_local_match+0xa8>
          return 1;
 8007772:	2301      	movs	r3, #1
 8007774:	e00f      	b.n	8007796 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <udp_input_local_match+0xa4>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <udp_input_local_match+0xa4>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <udp_input_local_match+0xc4>)
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	429a      	cmp	r2, r3
 800778e:	d101      	bne.n	8007794 <udp_input_local_match+0xa8>
        return 1;
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	0800c4cc 	.word	0x0800c4cc
 80077a4:	0800c4fc 	.word	0x0800c4fc
 80077a8:	0800c520 	.word	0x0800c520
 80077ac:	0800c548 	.word	0x0800c548
 80077b0:	20003394 	.word	0x20003394

080077b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b08d      	sub	sp, #52	; 0x34
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <udp_input+0x20>
 80077c8:	4b7c      	ldr	r3, [pc, #496]	; (80079bc <udp_input+0x208>)
 80077ca:	22cf      	movs	r2, #207	; 0xcf
 80077cc:	497c      	ldr	r1, [pc, #496]	; (80079c0 <udp_input+0x20c>)
 80077ce:	487d      	ldr	r0, [pc, #500]	; (80079c4 <udp_input+0x210>)
 80077d0:	f003 f87a 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <udp_input+0x32>
 80077da:	4b78      	ldr	r3, [pc, #480]	; (80079bc <udp_input+0x208>)
 80077dc:	22d0      	movs	r2, #208	; 0xd0
 80077de:	497a      	ldr	r1, [pc, #488]	; (80079c8 <udp_input+0x214>)
 80077e0:	4878      	ldr	r0, [pc, #480]	; (80079c4 <udp_input+0x210>)
 80077e2:	f003 f871 	bl	800a8c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	895b      	ldrh	r3, [r3, #10]
 80077ea:	2b07      	cmp	r3, #7
 80077ec:	d803      	bhi.n	80077f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff f9b8 	bl	8006b64 <pbuf_free>
    goto end;
 80077f4:	e0de      	b.n	80079b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80077fc:	4b73      	ldr	r3, [pc, #460]	; (80079cc <udp_input+0x218>)
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	4a72      	ldr	r2, [pc, #456]	; (80079cc <udp_input+0x218>)
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f002 f80c 	bl	8009824 <ip4_addr_isbroadcast_u32>
 800780c:	4603      	mov	r3, r0
 800780e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd ff3e 	bl	8005698 <lwip_htons>
 800781c:	4603      	mov	r3, r0
 800781e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	885b      	ldrh	r3, [r3, #2]
 8007824:	b29b      	uxth	r3, r3
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd ff36 	bl	8005698 <lwip_htons>
 800782c:	4603      	mov	r3, r0
 800782e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800783c:	4b64      	ldr	r3, [pc, #400]	; (80079d0 <udp_input+0x21c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
 8007842:	e054      	b.n	80078ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	8a5b      	ldrh	r3, [r3, #18]
 8007848:	89fa      	ldrh	r2, [r7, #14]
 800784a:	429a      	cmp	r2, r3
 800784c:	d14a      	bne.n	80078e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800784e:	7cfb      	ldrb	r3, [r7, #19]
 8007850:	461a      	mov	r2, r3
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007856:	f7ff ff49 	bl	80076ec <udp_input_local_match>
 800785a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800785c:	2b00      	cmp	r3, #0
 800785e:	d041      	beq.n	80078e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	7c1b      	ldrb	r3, [r3, #16]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d11d      	bne.n	80078a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	e017      	b.n	80078a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8007878:	7cfb      	ldrb	r3, [r7, #19]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d014      	beq.n	80078a8 <udp_input+0xf4>
 800787e:	4b53      	ldr	r3, [pc, #332]	; (80079cc <udp_input+0x218>)
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d10f      	bne.n	80078a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	3304      	adds	r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d008      	beq.n	80078a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d101      	bne.n	80078a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	8a9b      	ldrh	r3, [r3, #20]
 80078ac:	8a3a      	ldrh	r2, [r7, #16]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d118      	bne.n	80078e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b43      	ldr	r3, [pc, #268]	; (80079cc <udp_input+0x218>)
 80078c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d10e      	bne.n	80078e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d014      	beq.n	80078f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80078d4:	4b3e      	ldr	r3, [pc, #248]	; (80079d0 <udp_input+0x21c>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80078dc:	4a3c      	ldr	r2, [pc, #240]	; (80079d0 <udp_input+0x21c>)
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80078e2:	e008      	b.n	80078f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1a7      	bne.n	8007844 <udp_input+0x90>
 80078f4:	e000      	b.n	80078f8 <udp_input+0x144>
        break;
 80078f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <udp_input+0x14e>
    pcb = uncon_pcb;
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <udp_input+0x15a>
    for_us = 1;
 8007908:	2301      	movs	r3, #1
 800790a:	76fb      	strb	r3, [r7, #27]
 800790c:	e00a      	b.n	8007924 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	3304      	adds	r3, #4
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <udp_input+0x218>)
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8007924:	7efb      	ldrb	r3, [r7, #27]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d041      	beq.n	80079ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800792a:	2108      	movs	r1, #8
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff f893 	bl	8006a58 <pbuf_remove_header>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8007938:	4b20      	ldr	r3, [pc, #128]	; (80079bc <udp_input+0x208>)
 800793a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800793e:	4925      	ldr	r1, [pc, #148]	; (80079d4 <udp_input+0x220>)
 8007940:	4820      	ldr	r0, [pc, #128]	; (80079c4 <udp_input+0x210>)
 8007942:	f002 ffc1 	bl	800a8c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff f90c 	bl	8006b64 <pbuf_free>
      goto end;
 800794c:	e032      	b.n	80079b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d012      	beq.n	800797a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00a      	beq.n	8007972 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	699c      	ldr	r4, [r3, #24]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	69d8      	ldr	r0, [r3, #28]
 8007964:	8a3b      	ldrh	r3, [r7, #16]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <udp_input+0x224>)
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800796e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8007970:	e021      	b.n	80079b6 <udp_input+0x202>
        pbuf_free(p);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff f8f6 	bl	8006b64 <pbuf_free>
        goto end;
 8007978:	e01c      	b.n	80079b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800797a:	7cfb      	ldrb	r3, [r7, #19]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <udp_input+0x1f2>
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <udp_input+0x218>)
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007988:	2be0      	cmp	r3, #224	; 0xe0
 800798a:	d00c      	beq.n	80079a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <udp_input+0x218>)
 800798e:	899b      	ldrh	r3, [r3, #12]
 8007990:	3308      	adds	r3, #8
 8007992:	b29b      	uxth	r3, r3
 8007994:	b21b      	sxth	r3, r3
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff f8d0 	bl	8006b3e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800799e:	2103      	movs	r1, #3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fc29 	bl	80091f8 <icmp_dest_unreach>
      pbuf_free(p);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff f8dc 	bl	8006b64 <pbuf_free>
  return;
 80079ac:	e003      	b.n	80079b6 <udp_input+0x202>
    pbuf_free(p);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f8d8 	bl	8006b64 <pbuf_free>
  return;
 80079b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80079b6:	372c      	adds	r7, #44	; 0x2c
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd90      	pop	{r4, r7, pc}
 80079bc:	0800c4cc 	.word	0x0800c4cc
 80079c0:	0800c570 	.word	0x0800c570
 80079c4:	0800c520 	.word	0x0800c520
 80079c8:	0800c588 	.word	0x0800c588
 80079cc:	20003394 	.word	0x20003394
 80079d0:	20008588 	.word	0x20008588
 80079d4:	0800c5a4 	.word	0x0800c5a4
 80079d8:	200033a4 	.word	0x200033a4

080079dc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <udp_send+0x24>
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <udp_send+0x58>)
 80079ee:	f240 12d5 	movw	r2, #469	; 0x1d5
 80079f2:	4911      	ldr	r1, [pc, #68]	; (8007a38 <udp_send+0x5c>)
 80079f4:	4811      	ldr	r0, [pc, #68]	; (8007a3c <udp_send+0x60>)
 80079f6:	f002 ff67 	bl	800a8c8 <iprintf>
 80079fa:	f06f 030f 	mvn.w	r3, #15
 80079fe:	e015      	b.n	8007a2c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <udp_send+0x3e>
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <udp_send+0x58>)
 8007a08:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8007a0c:	490c      	ldr	r1, [pc, #48]	; (8007a40 <udp_send+0x64>)
 8007a0e:	480b      	ldr	r0, [pc, #44]	; (8007a3c <udp_send+0x60>)
 8007a10:	f002 ff5a 	bl	800a8c8 <iprintf>
 8007a14:	f06f 030f 	mvn.w	r3, #15
 8007a18:	e008      	b.n	8007a2c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	1d1a      	adds	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8a9b      	ldrh	r3, [r3, #20]
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f80d 	bl	8007a44 <udp_sendto>
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	0800c4cc 	.word	0x0800c4cc
 8007a38:	0800c5c0 	.word	0x0800c5c0
 8007a3c:	0800c520 	.word	0x0800c520
 8007a40:	0800c5d8 	.word	0x0800c5d8

08007a44 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d109      	bne.n	8007a6c <udp_sendto+0x28>
 8007a58:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <udp_sendto+0xa4>)
 8007a5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007a5e:	4923      	ldr	r1, [pc, #140]	; (8007aec <udp_sendto+0xa8>)
 8007a60:	4823      	ldr	r0, [pc, #140]	; (8007af0 <udp_sendto+0xac>)
 8007a62:	f002 ff31 	bl	800a8c8 <iprintf>
 8007a66:	f06f 030f 	mvn.w	r3, #15
 8007a6a:	e038      	b.n	8007ade <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <udp_sendto+0x42>
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <udp_sendto+0xa4>)
 8007a74:	f240 2219 	movw	r2, #537	; 0x219
 8007a78:	491e      	ldr	r1, [pc, #120]	; (8007af4 <udp_sendto+0xb0>)
 8007a7a:	481d      	ldr	r0, [pc, #116]	; (8007af0 <udp_sendto+0xac>)
 8007a7c:	f002 ff24 	bl	800a8c8 <iprintf>
 8007a80:	f06f 030f 	mvn.w	r3, #15
 8007a84:	e02b      	b.n	8007ade <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <udp_sendto+0x5c>
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <udp_sendto+0xa4>)
 8007a8e:	f240 221a 	movw	r2, #538	; 0x21a
 8007a92:	4919      	ldr	r1, [pc, #100]	; (8007af8 <udp_sendto+0xb4>)
 8007a94:	4816      	ldr	r0, [pc, #88]	; (8007af0 <udp_sendto+0xac>)
 8007a96:	f002 ff17 	bl	800a8c8 <iprintf>
 8007a9a:	f06f 030f 	mvn.w	r3, #15
 8007a9e:	e01e      	b.n	8007ade <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	7a1b      	ldrb	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	7a1b      	ldrb	r3, [r3, #8]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe fd27 	bl	8006500 <netif_get_by_index>
 8007ab2:	6178      	str	r0, [r7, #20]
 8007ab4:	e003      	b.n	8007abe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fc28 	bl	800930c <ip4_route>
 8007abc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8007ac4:	f06f 0303 	mvn.w	r3, #3
 8007ac8:	e009      	b.n	8007ade <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8007aca:	887a      	ldrh	r2, [r7, #2]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f810 	bl	8007afc <udp_sendto_if>
 8007adc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0800c4cc 	.word	0x0800c4cc
 8007aec:	0800c5f0 	.word	0x0800c5f0
 8007af0:	0800c520 	.word	0x0800c520
 8007af4:	0800c608 	.word	0x0800c608
 8007af8:	0800c624 	.word	0x0800c624

08007afc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <udp_sendto_if+0x28>
 8007b10:	4b2e      	ldr	r3, [pc, #184]	; (8007bcc <udp_sendto_if+0xd0>)
 8007b12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007b16:	492e      	ldr	r1, [pc, #184]	; (8007bd0 <udp_sendto_if+0xd4>)
 8007b18:	482e      	ldr	r0, [pc, #184]	; (8007bd4 <udp_sendto_if+0xd8>)
 8007b1a:	f002 fed5 	bl	800a8c8 <iprintf>
 8007b1e:	f06f 030f 	mvn.w	r3, #15
 8007b22:	e04f      	b.n	8007bc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <udp_sendto_if+0x42>
 8007b2a:	4b28      	ldr	r3, [pc, #160]	; (8007bcc <udp_sendto_if+0xd0>)
 8007b2c:	f240 2281 	movw	r2, #641	; 0x281
 8007b30:	4929      	ldr	r1, [pc, #164]	; (8007bd8 <udp_sendto_if+0xdc>)
 8007b32:	4828      	ldr	r0, [pc, #160]	; (8007bd4 <udp_sendto_if+0xd8>)
 8007b34:	f002 fec8 	bl	800a8c8 <iprintf>
 8007b38:	f06f 030f 	mvn.w	r3, #15
 8007b3c:	e042      	b.n	8007bc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d109      	bne.n	8007b58 <udp_sendto_if+0x5c>
 8007b44:	4b21      	ldr	r3, [pc, #132]	; (8007bcc <udp_sendto_if+0xd0>)
 8007b46:	f240 2282 	movw	r2, #642	; 0x282
 8007b4a:	4924      	ldr	r1, [pc, #144]	; (8007bdc <udp_sendto_if+0xe0>)
 8007b4c:	4821      	ldr	r0, [pc, #132]	; (8007bd4 <udp_sendto_if+0xd8>)
 8007b4e:	f002 febb 	bl	800a8c8 <iprintf>
 8007b52:	f06f 030f 	mvn.w	r3, #15
 8007b56:	e035      	b.n	8007bc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <udp_sendto_if+0x76>
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <udp_sendto_if+0xd0>)
 8007b60:	f240 2283 	movw	r2, #643	; 0x283
 8007b64:	491e      	ldr	r1, [pc, #120]	; (8007be0 <udp_sendto_if+0xe4>)
 8007b66:	481b      	ldr	r0, [pc, #108]	; (8007bd4 <udp_sendto_if+0xd8>)
 8007b68:	f002 feae 	bl	800a8c8 <iprintf>
 8007b6c:	f06f 030f 	mvn.w	r3, #15
 8007b70:	e028      	b.n	8007bc4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <udp_sendto_if+0x90>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007b88:	2be0      	cmp	r3, #224	; 0xe0
 8007b8a:	d103      	bne.n	8007b94 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e00b      	b.n	8007bac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d002      	beq.n	8007ba8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8007ba2:	f06f 0303 	mvn.w	r3, #3
 8007ba6:	e00d      	b.n	8007bc4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8007bac:	887a      	ldrh	r2, [r7, #2]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f811 	bl	8007be4 <udp_sendto_if_src>
 8007bc2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	0800c4cc 	.word	0x0800c4cc
 8007bd0:	0800c640 	.word	0x0800c640
 8007bd4:	0800c520 	.word	0x0800c520
 8007bd8:	0800c65c 	.word	0x0800c65c
 8007bdc:	0800c678 	.word	0x0800c678
 8007be0:	0800c698 	.word	0x0800c698

08007be4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08c      	sub	sp, #48	; 0x30
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <udp_sendto_if_src+0x28>
 8007bf8:	4b65      	ldr	r3, [pc, #404]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007bfa:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007bfe:	4965      	ldr	r1, [pc, #404]	; (8007d94 <udp_sendto_if_src+0x1b0>)
 8007c00:	4865      	ldr	r0, [pc, #404]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007c02:	f002 fe61 	bl	800a8c8 <iprintf>
 8007c06:	f06f 030f 	mvn.w	r3, #15
 8007c0a:	e0bc      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <udp_sendto_if_src+0x42>
 8007c12:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007c14:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007c18:	4960      	ldr	r1, [pc, #384]	; (8007d9c <udp_sendto_if_src+0x1b8>)
 8007c1a:	485f      	ldr	r0, [pc, #380]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007c1c:	f002 fe54 	bl	800a8c8 <iprintf>
 8007c20:	f06f 030f 	mvn.w	r3, #15
 8007c24:	e0af      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d109      	bne.n	8007c40 <udp_sendto_if_src+0x5c>
 8007c2c:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007c2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8007c32:	495b      	ldr	r1, [pc, #364]	; (8007da0 <udp_sendto_if_src+0x1bc>)
 8007c34:	4858      	ldr	r0, [pc, #352]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007c36:	f002 fe47 	bl	800a8c8 <iprintf>
 8007c3a:	f06f 030f 	mvn.w	r3, #15
 8007c3e:	e0a2      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <udp_sendto_if_src+0x76>
 8007c46:	4b52      	ldr	r3, [pc, #328]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007c48:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007c4c:	4955      	ldr	r1, [pc, #340]	; (8007da4 <udp_sendto_if_src+0x1c0>)
 8007c4e:	4852      	ldr	r0, [pc, #328]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007c50:	f002 fe3a 	bl	800a8c8 <iprintf>
 8007c54:	f06f 030f 	mvn.w	r3, #15
 8007c58:	e095      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <udp_sendto_if_src+0x90>
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007c62:	f240 22d5 	movw	r2, #725	; 0x2d5
 8007c66:	4950      	ldr	r1, [pc, #320]	; (8007da8 <udp_sendto_if_src+0x1c4>)
 8007c68:	484b      	ldr	r0, [pc, #300]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007c6a:	f002 fe2d 	bl	800a8c8 <iprintf>
 8007c6e:	f06f 030f 	mvn.w	r3, #15
 8007c72:	e088      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8a5b      	ldrh	r3, [r3, #18]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10f      	bne.n	8007c9c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8a5b      	ldrh	r3, [r3, #18]
 8007c82:	461a      	mov	r2, r3
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f893 	bl	8007db0 <udp_bind>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8007c8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8007c96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007c9a:	e074      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	891b      	ldrh	r3, [r3, #8]
 8007ca0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d902      	bls.n	8007cae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cac:	e06b      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8007cae:	2108      	movs	r1, #8
 8007cb0:	68b8      	ldr	r0, [r7, #8]
 8007cb2:	f7fe fec1 	bl	8006a38 <pbuf_add_header>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d015      	beq.n	8007ce8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8007cbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007cc0:	2108      	movs	r1, #8
 8007cc2:	2022      	movs	r0, #34	; 0x22
 8007cc4:	f7fe fc6c 	bl	80065a0 <pbuf_alloc>
 8007cc8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd4:	e057      	b.n	8007d86 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	891b      	ldrh	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d006      	beq.n	8007cec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	69f8      	ldr	r0, [r7, #28]
 8007ce2:	f7ff f857 	bl	8006d94 <pbuf_chain>
 8007ce6:	e001      	b.n	8007cec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	895b      	ldrh	r3, [r3, #10]
 8007cf0:	2b07      	cmp	r3, #7
 8007cf2:	d806      	bhi.n	8007d02 <udp_sendto_if_src+0x11e>
 8007cf4:	4b26      	ldr	r3, [pc, #152]	; (8007d90 <udp_sendto_if_src+0x1ac>)
 8007cf6:	f240 320d 	movw	r2, #781	; 0x30d
 8007cfa:	492c      	ldr	r1, [pc, #176]	; (8007dac <udp_sendto_if_src+0x1c8>)
 8007cfc:	4826      	ldr	r0, [pc, #152]	; (8007d98 <udp_sendto_if_src+0x1b4>)
 8007cfe:	f002 fde3 	bl	800a8c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8a5b      	ldrh	r3, [r3, #18]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fd fcc3 	bl	8005698 <lwip_htons>
 8007d12:	4603      	mov	r3, r0
 8007d14:	461a      	mov	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8007d1a:	887b      	ldrh	r3, [r7, #2]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd fcbb 	bl	8005698 <lwip_htons>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	719a      	strb	r2, [r3, #6]
 8007d30:	2200      	movs	r2, #0
 8007d32:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	891b      	ldrh	r3, [r3, #8]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd fcad 	bl	8005698 <lwip_htons>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	461a      	mov	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8007d46:	2311      	movs	r3, #17
 8007d48:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7adb      	ldrb	r3, [r3, #11]
 8007d4e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	7a9b      	ldrb	r3, [r3, #10]
 8007d54:	7cb9      	ldrb	r1, [r7, #18]
 8007d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d58:	9202      	str	r2, [sp, #8]
 8007d5a:	7cfa      	ldrb	r2, [r7, #19]
 8007d5c:	9201      	str	r2, [sp, #4]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	460b      	mov	r3, r1
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d66:	69f8      	ldr	r0, [r7, #28]
 8007d68:	f001 fcae 	bl	80096c8 <ip4_output_if_src>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d004      	beq.n	8007d82 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8007d78:	69f8      	ldr	r0, [r7, #28]
 8007d7a:	f7fe fef3 	bl	8006b64 <pbuf_free>
    q = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8007d82:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	0800c4cc 	.word	0x0800c4cc
 8007d94:	0800c6b8 	.word	0x0800c6b8
 8007d98:	0800c520 	.word	0x0800c520
 8007d9c:	0800c6d8 	.word	0x0800c6d8
 8007da0:	0800c6f8 	.word	0x0800c6f8
 8007da4:	0800c71c 	.word	0x0800c71c
 8007da8:	0800c740 	.word	0x0800c740
 8007dac:	0800c764 	.word	0x0800c764

08007db0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8007dc4:	4b39      	ldr	r3, [pc, #228]	; (8007eac <udp_bind+0xfc>)
 8007dc6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d109      	bne.n	8007de2 <udp_bind+0x32>
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <udp_bind+0x100>)
 8007dd0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8007dd4:	4937      	ldr	r1, [pc, #220]	; (8007eb4 <udp_bind+0x104>)
 8007dd6:	4838      	ldr	r0, [pc, #224]	; (8007eb8 <udp_bind+0x108>)
 8007dd8:	f002 fd76 	bl	800a8c8 <iprintf>
 8007ddc:	f06f 030f 	mvn.w	r3, #15
 8007de0:	e060      	b.n	8007ea4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007de6:	4b35      	ldr	r3, [pc, #212]	; (8007ebc <udp_bind+0x10c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e009      	b.n	8007e02 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d102      	bne.n	8007dfc <udp_bind+0x4c>
      rebind = 1;
 8007df6:	2301      	movs	r3, #1
 8007df8:	74fb      	strb	r3, [r7, #19]
      break;
 8007dfa:	e005      	b.n	8007e08 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f2      	bne.n	8007dee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <udp_bind+0x72>
    port = udp_new_port();
 8007e0e:	f7ff fc35 	bl	800767c <udp_new_port>
 8007e12:	4603      	mov	r3, r0
 8007e14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007e16:	88fb      	ldrh	r3, [r7, #6]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d12c      	bne.n	8007e76 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8007e1c:	f06f 0307 	mvn.w	r3, #7
 8007e20:	e040      	b.n	8007ea4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007e22:	4b26      	ldr	r3, [pc, #152]	; (8007ebc <udp_bind+0x10c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e022      	b.n	8007e70 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d01b      	beq.n	8007e6a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	8a5b      	ldrh	r3, [r3, #18]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d116      	bne.n	8007e6a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d00d      	beq.n	8007e64 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <udp_bind+0xb4>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8007e56:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8007e64:	f06f 0307 	mvn.w	r3, #7
 8007e68:	e01c      	b.n	8007ea4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1d9      	bne.n	8007e2a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <udp_bind+0xd2>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	e000      	b.n	8007e84 <udp_bind+0xd4>
 8007e82:	2300      	movs	r3, #0
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8007e8e:	7cfb      	ldrb	r3, [r7, #19]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8007e94:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <udp_bind+0x10c>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8007e9c:	4a07      	ldr	r2, [pc, #28]	; (8007ebc <udp_bind+0x10c>)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	0800cf84 	.word	0x0800cf84
 8007eb0:	0800c4cc 	.word	0x0800c4cc
 8007eb4:	0800c794 	.word	0x0800c794
 8007eb8:	0800c520 	.word	0x0800c520
 8007ebc:	20008588 	.word	0x20008588

08007ec0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <udp_connect+0x28>
 8007ed4:	4b2c      	ldr	r3, [pc, #176]	; (8007f88 <udp_connect+0xc8>)
 8007ed6:	f240 4235 	movw	r2, #1077	; 0x435
 8007eda:	492c      	ldr	r1, [pc, #176]	; (8007f8c <udp_connect+0xcc>)
 8007edc:	482c      	ldr	r0, [pc, #176]	; (8007f90 <udp_connect+0xd0>)
 8007ede:	f002 fcf3 	bl	800a8c8 <iprintf>
 8007ee2:	f06f 030f 	mvn.w	r3, #15
 8007ee6:	e04b      	b.n	8007f80 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <udp_connect+0x42>
 8007eee:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <udp_connect+0xc8>)
 8007ef0:	f240 4236 	movw	r2, #1078	; 0x436
 8007ef4:	4927      	ldr	r1, [pc, #156]	; (8007f94 <udp_connect+0xd4>)
 8007ef6:	4826      	ldr	r0, [pc, #152]	; (8007f90 <udp_connect+0xd0>)
 8007ef8:	f002 fce6 	bl	800a8c8 <iprintf>
 8007efc:	f06f 030f 	mvn.w	r3, #15
 8007f00:	e03e      	b.n	8007f80 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8a5b      	ldrh	r3, [r3, #18]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10f      	bne.n	8007f2a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8a5b      	ldrh	r3, [r3, #18]
 8007f10:	461a      	mov	r2, r3
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff ff4c 	bl	8007db0 <udp_bind>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007f1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <udp_connect+0x6a>
      return err;
 8007f24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f28:	e02a      	b.n	8007f80 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <udp_connect+0x76>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	e000      	b.n	8007f38 <udp_connect+0x78>
 8007f36:	2300      	movs	r3, #0
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	7c1b      	ldrb	r3, [r3, #16]
 8007f46:	f043 0304 	orr.w	r3, r3, #4
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007f50:	4b11      	ldr	r3, [pc, #68]	; (8007f98 <udp_connect+0xd8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	e008      	b.n	8007f6a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d101      	bne.n	8007f64 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e00d      	b.n	8007f80 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1f3      	bne.n	8007f58 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8007f70:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <udp_connect+0xd8>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8007f78:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <udp_connect+0xd8>)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	0800c4cc 	.word	0x0800c4cc
 8007f8c:	0800c7ac 	.word	0x0800c7ac
 8007f90:	0800c520 	.word	0x0800c520
 8007f94:	0800c7c8 	.word	0x0800c7c8
 8007f98:	20008588 	.word	0x20008588

08007f9c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <udp_disconnect+0x1e>
 8007faa:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <udp_disconnect+0x44>)
 8007fac:	f240 426a 	movw	r2, #1130	; 0x46a
 8007fb0:	490c      	ldr	r1, [pc, #48]	; (8007fe4 <udp_disconnect+0x48>)
 8007fb2:	480d      	ldr	r0, [pc, #52]	; (8007fe8 <udp_disconnect+0x4c>)
 8007fb4:	f002 fc88 	bl	800a8c8 <iprintf>
 8007fb8:	e00f      	b.n	8007fda <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	7c1b      	ldrb	r3, [r3, #16]
 8007fd0:	f023 0304 	bic.w	r3, r3, #4
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	741a      	strb	r2, [r3, #16]
}
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	0800c4cc 	.word	0x0800c4cc
 8007fe4:	0800c7e4 	.word	0x0800c7e4
 8007fe8:	0800c520 	.word	0x0800c520

08007fec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d107      	bne.n	800800e <udp_recv+0x22>
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <udp_recv+0x34>)
 8008000:	f240 428a 	movw	r2, #1162	; 0x48a
 8008004:	4907      	ldr	r1, [pc, #28]	; (8008024 <udp_recv+0x38>)
 8008006:	4808      	ldr	r0, [pc, #32]	; (8008028 <udp_recv+0x3c>)
 8008008:	f002 fc5e 	bl	800a8c8 <iprintf>
 800800c:	e005      	b.n	800801a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	61da      	str	r2, [r3, #28]
}
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	0800c4cc 	.word	0x0800c4cc
 8008024:	0800c800 	.word	0x0800c800
 8008028:	0800c520 	.word	0x0800c520

0800802c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d107      	bne.n	800804a <udp_remove+0x1e>
 800803a:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <udp_remove+0x74>)
 800803c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8008040:	4918      	ldr	r1, [pc, #96]	; (80080a4 <udp_remove+0x78>)
 8008042:	4819      	ldr	r0, [pc, #100]	; (80080a8 <udp_remove+0x7c>)
 8008044:	f002 fc40 	bl	800a8c8 <iprintf>
 8008048:	e026      	b.n	8008098 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800804a:	4b18      	ldr	r3, [pc, #96]	; (80080ac <udp_remove+0x80>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d105      	bne.n	8008060 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <udp_remove+0x80>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	4a14      	ldr	r2, [pc, #80]	; (80080ac <udp_remove+0x80>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	e017      	b.n	8008090 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008060:	4b12      	ldr	r3, [pc, #72]	; (80080ac <udp_remove+0x80>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e010      	b.n	800808a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <udp_remove+0x58>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d104      	bne.n	8008084 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	60da      	str	r2, [r3, #12]
        break;
 8008082:	e005      	b.n	8008090 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1eb      	bne.n	8008068 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	2000      	movs	r0, #0
 8008094:	f7fd ff86 	bl	8005fa4 <memp_free>
}
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800c4cc 	.word	0x0800c4cc
 80080a4:	0800c818 	.word	0x0800c818
 80080a8:	0800c520 	.word	0x0800c520
 80080ac:	20008588 	.word	0x20008588

080080b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7fd ff28 	bl	8005f0c <memp_malloc>
 80080bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80080c4:	2220      	movs	r2, #32
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f002 fb4b 	bl	800a764 <memset>
    pcb->ttl = UDP_TTL;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	22ff      	movs	r2, #255	; 0xff
 80080d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80080d4:	687b      	ldr	r3, [r7, #4]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	4603      	mov	r3, r0
 80080e6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80080e8:	f7ff ffe2 	bl	80080b0 <udp_new>
 80080ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80080ee:	68fb      	ldr	r3, [r7, #12]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01e      	beq.n	8008146 <udp_netif_ip_addr_changed+0x4e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01a      	beq.n	8008146 <udp_netif_ip_addr_changed+0x4e>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d017      	beq.n	8008146 <udp_netif_ip_addr_changed+0x4e>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800811e:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <udp_netif_ip_addr_changed+0x5c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e00c      	b.n	8008140 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d103      	bne.n	800813a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1ef      	bne.n	8008126 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20008588 	.word	0x20008588

08008158 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008160:	4915      	ldr	r1, [pc, #84]	; (80081b8 <etharp_free_entry+0x60>)
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	4413      	add	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	440b      	add	r3, r1
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d013      	beq.n	800819c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008174:	4910      	ldr	r1, [pc, #64]	; (80081b8 <etharp_free_entry+0x60>)
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4413      	add	r3, r2
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	440b      	add	r3, r1
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fced 	bl	8006b64 <pbuf_free>
    arp_table[i].q = NULL;
 800818a:	490b      	ldr	r1, [pc, #44]	; (80081b8 <etharp_free_entry+0x60>)
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	4413      	add	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800819c:	4906      	ldr	r1, [pc, #24]	; (80081b8 <etharp_free_entry+0x60>)
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	3314      	adds	r3, #20
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200000ec 	.word	0x200000ec

080081bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	e096      	b.n	80082f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80081c8:	494f      	ldr	r1, [pc, #316]	; (8008308 <etharp_tmr+0x14c>)
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	4413      	add	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	440b      	add	r3, r1
 80081d6:	3314      	adds	r3, #20
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8086 	beq.w	80082f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80081e4:	4948      	ldr	r1, [pc, #288]	; (8008308 <etharp_tmr+0x14c>)
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	4413      	add	r3, r2
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	440b      	add	r3, r1
 80081f2:	3312      	adds	r3, #18
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	3301      	adds	r3, #1
 80081f8:	b298      	uxth	r0, r3
 80081fa:	4943      	ldr	r1, [pc, #268]	; (8008308 <etharp_tmr+0x14c>)
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4613      	mov	r3, r2
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4413      	add	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	440b      	add	r3, r1
 8008208:	3312      	adds	r3, #18
 800820a:	4602      	mov	r2, r0
 800820c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800820e:	493e      	ldr	r1, [pc, #248]	; (8008308 <etharp_tmr+0x14c>)
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4413      	add	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	440b      	add	r3, r1
 800821c:	3312      	adds	r3, #18
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008224:	d215      	bcs.n	8008252 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008226:	4938      	ldr	r1, [pc, #224]	; (8008308 <etharp_tmr+0x14c>)
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	440b      	add	r3, r1
 8008234:	3314      	adds	r3, #20
 8008236:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008238:	2b01      	cmp	r3, #1
 800823a:	d10e      	bne.n	800825a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800823c:	4932      	ldr	r1, [pc, #200]	; (8008308 <etharp_tmr+0x14c>)
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4613      	mov	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	4413      	add	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	440b      	add	r3, r1
 800824a:	3312      	adds	r3, #18
 800824c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800824e:	2b04      	cmp	r3, #4
 8008250:	d903      	bls.n	800825a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff ff80 	bl	8008158 <etharp_free_entry>
 8008258:	e04a      	b.n	80082f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800825a:	492b      	ldr	r1, [pc, #172]	; (8008308 <etharp_tmr+0x14c>)
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	4613      	mov	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	4413      	add	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	440b      	add	r3, r1
 8008268:	3314      	adds	r3, #20
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d10a      	bne.n	8008286 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008270:	4925      	ldr	r1, [pc, #148]	; (8008308 <etharp_tmr+0x14c>)
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4613      	mov	r3, r2
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	4413      	add	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	440b      	add	r3, r1
 800827e:	3314      	adds	r3, #20
 8008280:	2204      	movs	r2, #4
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e034      	b.n	80082f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008286:	4920      	ldr	r1, [pc, #128]	; (8008308 <etharp_tmr+0x14c>)
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	4413      	add	r3, r2
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	440b      	add	r3, r1
 8008294:	3314      	adds	r3, #20
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d10a      	bne.n	80082b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800829c:	491a      	ldr	r1, [pc, #104]	; (8008308 <etharp_tmr+0x14c>)
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4613      	mov	r3, r2
 80082a2:	005b      	lsls	r3, r3, #1
 80082a4:	4413      	add	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	440b      	add	r3, r1
 80082aa:	3314      	adds	r3, #20
 80082ac:	2202      	movs	r2, #2
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	e01e      	b.n	80082f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80082b2:	4915      	ldr	r1, [pc, #84]	; (8008308 <etharp_tmr+0x14c>)
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	440b      	add	r3, r1
 80082c0:	3314      	adds	r3, #20
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d113      	bne.n	80082f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80082c8:	490f      	ldr	r1, [pc, #60]	; (8008308 <etharp_tmr+0x14c>)
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	4413      	add	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	440b      	add	r3, r1
 80082d6:	3308      	adds	r3, #8
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	4413      	add	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4a08      	ldr	r2, [pc, #32]	; (8008308 <etharp_tmr+0x14c>)
 80082e6:	4413      	add	r3, r2
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	f000 fe6e 	bl	8008fcc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3301      	adds	r3, #1
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	f77f af65 	ble.w	80081c8 <etharp_tmr+0xc>
      }
    }
  }
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200000ec 	.word	0x200000ec

0800830c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	460b      	mov	r3, r1
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800831a:	230a      	movs	r3, #10
 800831c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800831e:	230a      	movs	r3, #10
 8008320:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008322:	230a      	movs	r3, #10
 8008324:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800832a:	230a      	movs	r3, #10
 800832c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	83bb      	strh	r3, [r7, #28]
 8008332:	2300      	movs	r3, #0
 8008334:	837b      	strh	r3, [r7, #26]
 8008336:	2300      	movs	r3, #0
 8008338:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800833a:	2300      	movs	r3, #0
 800833c:	843b      	strh	r3, [r7, #32]
 800833e:	e0ae      	b.n	800849e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008340:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008344:	49a6      	ldr	r1, [pc, #664]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	440b      	add	r3, r1
 8008350:	3314      	adds	r3, #20
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008356:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800835a:	2b0a      	cmp	r3, #10
 800835c:	d105      	bne.n	800836a <etharp_find_entry+0x5e>
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008364:	8c3b      	ldrh	r3, [r7, #32]
 8008366:	847b      	strh	r3, [r7, #34]	; 0x22
 8008368:	e095      	b.n	8008496 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800836a:	7dfb      	ldrb	r3, [r7, #23]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8092 	beq.w	8008496 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d009      	beq.n	800838c <etharp_find_entry+0x80>
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d806      	bhi.n	800838c <etharp_find_entry+0x80>
 800837e:	4b99      	ldr	r3, [pc, #612]	; (80085e4 <etharp_find_entry+0x2d8>)
 8008380:	f240 1223 	movw	r2, #291	; 0x123
 8008384:	4998      	ldr	r1, [pc, #608]	; (80085e8 <etharp_find_entry+0x2dc>)
 8008386:	4899      	ldr	r0, [pc, #612]	; (80085ec <etharp_find_entry+0x2e0>)
 8008388:	f002 fa9e 	bl	800a8c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d020      	beq.n	80083d4 <etharp_find_entry+0xc8>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800839a:	4891      	ldr	r0, [pc, #580]	; (80085e0 <etharp_find_entry+0x2d4>)
 800839c:	4613      	mov	r3, r2
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	4413      	add	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4403      	add	r3, r0
 80083a6:	3304      	adds	r3, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d112      	bne.n	80083d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00c      	beq.n	80083ce <etharp_find_entry+0xc2>
 80083b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80083b8:	4989      	ldr	r1, [pc, #548]	; (80085e0 <etharp_find_entry+0x2d4>)
 80083ba:	4613      	mov	r3, r2
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	4413      	add	r3, r2
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	440b      	add	r3, r1
 80083c4:	3308      	adds	r3, #8
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d102      	bne.n	80083d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80083ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80083d2:	e100      	b.n	80085d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d140      	bne.n	800845c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80083da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80083de:	4980      	ldr	r1, [pc, #512]	; (80085e0 <etharp_find_entry+0x2d4>)
 80083e0:	4613      	mov	r3, r2
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	4413      	add	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	440b      	add	r3, r1
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01a      	beq.n	8008426 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80083f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80083f4:	497a      	ldr	r1, [pc, #488]	; (80085e0 <etharp_find_entry+0x2d4>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4413      	add	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	3312      	adds	r3, #18
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	8bba      	ldrh	r2, [r7, #28]
 8008406:	429a      	cmp	r2, r3
 8008408:	d845      	bhi.n	8008496 <etharp_find_entry+0x18a>
            old_queue = i;
 800840a:	8c3b      	ldrh	r3, [r7, #32]
 800840c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800840e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008412:	4973      	ldr	r1, [pc, #460]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	440b      	add	r3, r1
 800841e:	3312      	adds	r3, #18
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	83bb      	strh	r3, [r7, #28]
 8008424:	e037      	b.n	8008496 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800842a:	496d      	ldr	r1, [pc, #436]	; (80085e0 <etharp_find_entry+0x2d4>)
 800842c:	4613      	mov	r3, r2
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	4413      	add	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	440b      	add	r3, r1
 8008436:	3312      	adds	r3, #18
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	8b7a      	ldrh	r2, [r7, #26]
 800843c:	429a      	cmp	r2, r3
 800843e:	d82a      	bhi.n	8008496 <etharp_find_entry+0x18a>
            old_pending = i;
 8008440:	8c3b      	ldrh	r3, [r7, #32]
 8008442:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008444:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008448:	4965      	ldr	r1, [pc, #404]	; (80085e0 <etharp_find_entry+0x2d4>)
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	440b      	add	r3, r1
 8008454:	3312      	adds	r3, #18
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	837b      	strh	r3, [r7, #26]
 800845a:	e01c      	b.n	8008496 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d919      	bls.n	8008496 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008462:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008466:	495e      	ldr	r1, [pc, #376]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008468:	4613      	mov	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	4413      	add	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	440b      	add	r3, r1
 8008472:	3312      	adds	r3, #18
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	8b3a      	ldrh	r2, [r7, #24]
 8008478:	429a      	cmp	r2, r3
 800847a:	d80c      	bhi.n	8008496 <etharp_find_entry+0x18a>
            old_stable = i;
 800847c:	8c3b      	ldrh	r3, [r7, #32]
 800847e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008480:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008484:	4956      	ldr	r1, [pc, #344]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008486:	4613      	mov	r3, r2
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	4413      	add	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	440b      	add	r3, r1
 8008490:	3312      	adds	r3, #18
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008496:	8c3b      	ldrh	r3, [r7, #32]
 8008498:	3301      	adds	r3, #1
 800849a:	b29b      	uxth	r3, r3
 800849c:	843b      	strh	r3, [r7, #32]
 800849e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80084a2:	2b09      	cmp	r3, #9
 80084a4:	f77f af4c 	ble.w	8008340 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d108      	bne.n	80084c4 <etharp_find_entry+0x1b8>
 80084b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80084b6:	2b0a      	cmp	r3, #10
 80084b8:	d107      	bne.n	80084ca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80084c4:	f04f 33ff 	mov.w	r3, #4294967295
 80084c8:	e085      	b.n	80085d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80084ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	dc02      	bgt.n	80084d8 <etharp_find_entry+0x1cc>
    i = empty;
 80084d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084d4:	843b      	strh	r3, [r7, #32]
 80084d6:	e039      	b.n	800854c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80084d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80084dc:	2b09      	cmp	r3, #9
 80084de:	dc14      	bgt.n	800850a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80084e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084e2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80084e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80084e8:	493d      	ldr	r1, [pc, #244]	; (80085e0 <etharp_find_entry+0x2d4>)
 80084ea:	4613      	mov	r3, r2
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	440b      	add	r3, r1
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <etharp_find_entry+0x220>
 80084fa:	4b3a      	ldr	r3, [pc, #232]	; (80085e4 <etharp_find_entry+0x2d8>)
 80084fc:	f240 126d 	movw	r2, #365	; 0x16d
 8008500:	493b      	ldr	r1, [pc, #236]	; (80085f0 <etharp_find_entry+0x2e4>)
 8008502:	483a      	ldr	r0, [pc, #232]	; (80085ec <etharp_find_entry+0x2e0>)
 8008504:	f002 f9e0 	bl	800a8c8 <iprintf>
 8008508:	e010      	b.n	800852c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800850a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800850e:	2b09      	cmp	r3, #9
 8008510:	dc02      	bgt.n	8008518 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008514:	843b      	strh	r3, [r7, #32]
 8008516:	e009      	b.n	800852c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008518:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800851c:	2b09      	cmp	r3, #9
 800851e:	dc02      	bgt.n	8008526 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008520:	8bfb      	ldrh	r3, [r7, #30]
 8008522:	843b      	strh	r3, [r7, #32]
 8008524:	e002      	b.n	800852c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008526:	f04f 33ff 	mov.w	r3, #4294967295
 800852a:	e054      	b.n	80085d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800852c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008530:	2b09      	cmp	r3, #9
 8008532:	dd06      	ble.n	8008542 <etharp_find_entry+0x236>
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <etharp_find_entry+0x2d8>)
 8008536:	f240 127f 	movw	r2, #383	; 0x17f
 800853a:	492e      	ldr	r1, [pc, #184]	; (80085f4 <etharp_find_entry+0x2e8>)
 800853c:	482b      	ldr	r0, [pc, #172]	; (80085ec <etharp_find_entry+0x2e0>)
 800853e:	f002 f9c3 	bl	800a8c8 <iprintf>
    etharp_free_entry(i);
 8008542:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fe06 	bl	8008158 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800854c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008550:	2b09      	cmp	r3, #9
 8008552:	dd06      	ble.n	8008562 <etharp_find_entry+0x256>
 8008554:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <etharp_find_entry+0x2d8>)
 8008556:	f240 1283 	movw	r2, #387	; 0x183
 800855a:	4926      	ldr	r1, [pc, #152]	; (80085f4 <etharp_find_entry+0x2e8>)
 800855c:	4823      	ldr	r0, [pc, #140]	; (80085ec <etharp_find_entry+0x2e0>)
 800855e:	f002 f9b3 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008566:	491e      	ldr	r1, [pc, #120]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008568:	4613      	mov	r3, r2
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	4413      	add	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	440b      	add	r3, r1
 8008572:	3314      	adds	r3, #20
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d006      	beq.n	8008588 <etharp_find_entry+0x27c>
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <etharp_find_entry+0x2d8>)
 800857c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008580:	491d      	ldr	r1, [pc, #116]	; (80085f8 <etharp_find_entry+0x2ec>)
 8008582:	481a      	ldr	r0, [pc, #104]	; (80085ec <etharp_find_entry+0x2e0>)
 8008584:	f002 f9a0 	bl	800a8c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800858e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	4812      	ldr	r0, [pc, #72]	; (80085e0 <etharp_find_entry+0x2d4>)
 8008598:	4613      	mov	r3, r2
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	4413      	add	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	4403      	add	r3, r0
 80085a2:	3304      	adds	r3, #4
 80085a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80085a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085aa:	490d      	ldr	r1, [pc, #52]	; (80085e0 <etharp_find_entry+0x2d4>)
 80085ac:	4613      	mov	r3, r2
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	4413      	add	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	440b      	add	r3, r1
 80085b6:	3312      	adds	r3, #18
 80085b8:	2200      	movs	r2, #0
 80085ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80085bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085c0:	4907      	ldr	r1, [pc, #28]	; (80085e0 <etharp_find_entry+0x2d4>)
 80085c2:	4613      	mov	r3, r2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	440b      	add	r3, r1
 80085cc:	3308      	adds	r3, #8
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80085d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3728      	adds	r7, #40	; 0x28
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200000ec 	.word	0x200000ec
 80085e4:	0800c830 	.word	0x0800c830
 80085e8:	0800c868 	.word	0x0800c868
 80085ec:	0800c8a8 	.word	0x0800c8a8
 80085f0:	0800c8d0 	.word	0x0800c8d0
 80085f4:	0800c8e8 	.word	0x0800c8e8
 80085f8:	0800c8fc 	.word	0x0800c8fc

080085fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af02      	add	r7, sp, #8
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008610:	2b06      	cmp	r3, #6
 8008612:	d006      	beq.n	8008622 <etharp_update_arp_entry+0x26>
 8008614:	4b48      	ldr	r3, [pc, #288]	; (8008738 <etharp_update_arp_entry+0x13c>)
 8008616:	f240 12a9 	movw	r2, #425	; 0x1a9
 800861a:	4948      	ldr	r1, [pc, #288]	; (800873c <etharp_update_arp_entry+0x140>)
 800861c:	4848      	ldr	r0, [pc, #288]	; (8008740 <etharp_update_arp_entry+0x144>)
 800861e:	f002 f953 	bl	800a8c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <etharp_update_arp_entry+0x52>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68f9      	ldr	r1, [r7, #12]
 8008636:	4618      	mov	r0, r3
 8008638:	f001 f8f4 	bl	8009824 <ip4_addr_isbroadcast_u32>
 800863c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800863e:	2b00      	cmp	r3, #0
 8008640:	d105      	bne.n	800864e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800864a:	2be0      	cmp	r3, #224	; 0xe0
 800864c:	d102      	bne.n	8008654 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800864e:	f06f 030f 	mvn.w	r3, #15
 8008652:	e06c      	b.n	800872e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4619      	mov	r1, r3
 800865a:	68b8      	ldr	r0, [r7, #8]
 800865c:	f7ff fe56 	bl	800830c <etharp_find_entry>
 8008660:	4603      	mov	r3, r0
 8008662:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008664:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da02      	bge.n	8008672 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800866c:	8afb      	ldrh	r3, [r7, #22]
 800866e:	b25b      	sxtb	r3, r3
 8008670:	e05d      	b.n	800872e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008672:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008676:	4933      	ldr	r1, [pc, #204]	; (8008744 <etharp_update_arp_entry+0x148>)
 8008678:	4613      	mov	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	4413      	add	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	440b      	add	r3, r1
 8008682:	3314      	adds	r3, #20
 8008684:	2202      	movs	r2, #2
 8008686:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800868c:	492d      	ldr	r1, [pc, #180]	; (8008744 <etharp_update_arp_entry+0x148>)
 800868e:	4613      	mov	r3, r2
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	4413      	add	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	440b      	add	r3, r1
 8008698:	3308      	adds	r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800869e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80086a2:	4613      	mov	r3, r2
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	4413      	add	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	3308      	adds	r3, #8
 80086ac:	4a25      	ldr	r2, [pc, #148]	; (8008744 <etharp_update_arp_entry+0x148>)
 80086ae:	4413      	add	r3, r2
 80086b0:	3304      	adds	r3, #4
 80086b2:	2206      	movs	r2, #6
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 f846 	bl	800a748 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80086bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80086c0:	4920      	ldr	r1, [pc, #128]	; (8008744 <etharp_update_arp_entry+0x148>)
 80086c2:	4613      	mov	r3, r2
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	440b      	add	r3, r1
 80086cc:	3312      	adds	r3, #18
 80086ce:	2200      	movs	r2, #0
 80086d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80086d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80086d6:	491b      	ldr	r1, [pc, #108]	; (8008744 <etharp_update_arp_entry+0x148>)
 80086d8:	4613      	mov	r3, r2
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	4413      	add	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	440b      	add	r3, r1
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d021      	beq.n	800872c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80086e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80086ec:	4915      	ldr	r1, [pc, #84]	; (8008744 <etharp_update_arp_entry+0x148>)
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	440b      	add	r3, r1
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80086fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008700:	4910      	ldr	r1, [pc, #64]	; (8008744 <etharp_update_arp_entry+0x148>)
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	440b      	add	r3, r1
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6939      	ldr	r1, [r7, #16]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f001 ff87 	bl	800a634 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008726:	6938      	ldr	r0, [r7, #16]
 8008728:	f7fe fa1c 	bl	8006b64 <pbuf_free>
  }
  return ERR_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	0800c830 	.word	0x0800c830
 800873c:	0800c928 	.word	0x0800c928
 8008740:	0800c8a8 	.word	0x0800c8a8
 8008744:	200000ec 	.word	0x200000ec

08008748 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	e01e      	b.n	8008794 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008756:	4913      	ldr	r1, [pc, #76]	; (80087a4 <etharp_cleanup_netif+0x5c>)
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4613      	mov	r3, r2
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4413      	add	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	440b      	add	r3, r1
 8008764:	3314      	adds	r3, #20
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00e      	beq.n	800878e <etharp_cleanup_netif+0x46>
 8008770:	490c      	ldr	r1, [pc, #48]	; (80087a4 <etharp_cleanup_netif+0x5c>)
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	440b      	add	r3, r1
 800877e:	3308      	adds	r3, #8
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d102      	bne.n	800878e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fce5 	bl	8008158 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b09      	cmp	r3, #9
 8008798:	dddd      	ble.n	8008756 <etharp_cleanup_netif+0xe>
    }
  }
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200000ec 	.word	0x200000ec

080087a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80087a8:	b5b0      	push	{r4, r5, r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d107      	bne.n	80087c8 <etharp_input+0x20>
 80087b8:	4b3d      	ldr	r3, [pc, #244]	; (80088b0 <etharp_input+0x108>)
 80087ba:	f240 228a 	movw	r2, #650	; 0x28a
 80087be:	493d      	ldr	r1, [pc, #244]	; (80088b4 <etharp_input+0x10c>)
 80087c0:	483d      	ldr	r0, [pc, #244]	; (80088b8 <etharp_input+0x110>)
 80087c2:	f002 f881 	bl	800a8c8 <iprintf>
 80087c6:	e06f      	b.n	80088a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d8:	d10c      	bne.n	80087f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80087de:	2b06      	cmp	r3, #6
 80087e0:	d108      	bne.n	80087f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d104      	bne.n	80087f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d003      	beq.n	80087fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7fe f9b5 	bl	8006b64 <pbuf_free>
    return;
 80087fa:	e055      	b.n	80088a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	330e      	adds	r3, #14
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3318      	adds	r3, #24
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	3304      	adds	r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <etharp_input+0x74>
    for_us = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	75fb      	strb	r3, [r7, #23]
 800881a:	e009      	b.n	8008830 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	3304      	adds	r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	bf0c      	ite	eq
 8008828:	2301      	moveq	r3, #1
 800882a:	2300      	movne	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f103 0208 	add.w	r2, r3, #8
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <etharp_input+0x98>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <etharp_input+0x9a>
 8008840:	2302      	movs	r3, #2
 8008842:	f107 010c 	add.w	r1, r7, #12
 8008846:	6838      	ldr	r0, [r7, #0]
 8008848:	f7ff fed8 	bl	80085fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	88db      	ldrh	r3, [r3, #6]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008856:	d003      	beq.n	8008860 <etharp_input+0xb8>
 8008858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885c:	d01e      	beq.n	800889c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800885e:	e020      	b.n	80088a2 <etharp_input+0xfa>
      if (for_us) {
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01c      	beq.n	80088a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008880:	2102      	movs	r1, #2
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	f107 010c 	add.w	r1, r7, #12
 8008888:	9102      	str	r1, [sp, #8]
 800888a:	9201      	str	r2, [sp, #4]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	462b      	mov	r3, r5
 8008890:	4622      	mov	r2, r4
 8008892:	4601      	mov	r1, r0
 8008894:	6838      	ldr	r0, [r7, #0]
 8008896:	f000 faeb 	bl	8008e70 <etharp_raw>
      break;
 800889a:	e001      	b.n	80088a0 <etharp_input+0xf8>
      break;
 800889c:	bf00      	nop
 800889e:	e000      	b.n	80088a2 <etharp_input+0xfa>
      break;
 80088a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fe f95e 	bl	8006b64 <pbuf_free>
}
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bdb0      	pop	{r4, r5, r7, pc}
 80088ae:	bf00      	nop
 80088b0:	0800c830 	.word	0x0800c830
 80088b4:	0800c980 	.word	0x0800c980
 80088b8:	0800c8a8 	.word	0x0800c8a8

080088bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80088ca:	79fa      	ldrb	r2, [r7, #7]
 80088cc:	4944      	ldr	r1, [pc, #272]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 80088ce:	4613      	mov	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	440b      	add	r3, r1
 80088d8:	3314      	adds	r3, #20
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d806      	bhi.n	80088ee <etharp_output_to_arp_index+0x32>
 80088e0:	4b40      	ldr	r3, [pc, #256]	; (80089e4 <etharp_output_to_arp_index+0x128>)
 80088e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80088e6:	4940      	ldr	r1, [pc, #256]	; (80089e8 <etharp_output_to_arp_index+0x12c>)
 80088e8:	4840      	ldr	r0, [pc, #256]	; (80089ec <etharp_output_to_arp_index+0x130>)
 80088ea:	f001 ffed 	bl	800a8c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80088ee:	79fa      	ldrb	r2, [r7, #7]
 80088f0:	493b      	ldr	r1, [pc, #236]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 80088f2:	4613      	mov	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	4413      	add	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	440b      	add	r3, r1
 80088fc:	3314      	adds	r3, #20
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d153      	bne.n	80089ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008904:	79fa      	ldrb	r2, [r7, #7]
 8008906:	4936      	ldr	r1, [pc, #216]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	440b      	add	r3, r1
 8008912:	3312      	adds	r3, #18
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800891a:	d919      	bls.n	8008950 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800891c:	79fa      	ldrb	r2, [r7, #7]
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	4a2e      	ldr	r2, [pc, #184]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 8008928:	4413      	add	r3, r2
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fb4c 	bl	8008fcc <etharp_request>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d138      	bne.n	80089ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800893a:	79fa      	ldrb	r2, [r7, #7]
 800893c:	4928      	ldr	r1, [pc, #160]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 800893e:	4613      	mov	r3, r2
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	4413      	add	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	440b      	add	r3, r1
 8008948:	3314      	adds	r3, #20
 800894a:	2203      	movs	r2, #3
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e02d      	b.n	80089ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	4923      	ldr	r1, [pc, #140]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 8008954:	4613      	mov	r3, r2
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	4413      	add	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	440b      	add	r3, r1
 800895e:	3312      	adds	r3, #18
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008966:	d321      	bcc.n	80089ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008968:	79fa      	ldrb	r2, [r7, #7]
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4a1b      	ldr	r2, [pc, #108]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 8008974:	4413      	add	r3, r2
 8008976:	1d19      	adds	r1, r3, #4
 8008978:	79fa      	ldrb	r2, [r7, #7]
 800897a:	4613      	mov	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	4413      	add	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	3308      	adds	r3, #8
 8008984:	4a16      	ldr	r2, [pc, #88]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 8008986:	4413      	add	r3, r2
 8008988:	3304      	adds	r3, #4
 800898a:	461a      	mov	r2, r3
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fafb 	bl	8008f88 <etharp_request_dst>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008998:	79fa      	ldrb	r2, [r7, #7]
 800899a:	4911      	ldr	r1, [pc, #68]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 800899c:	4613      	mov	r3, r2
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	4413      	add	r3, r2
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	440b      	add	r3, r1
 80089a6:	3314      	adds	r3, #20
 80089a8:	2203      	movs	r2, #3
 80089aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80089b2:	79fa      	ldrb	r2, [r7, #7]
 80089b4:	4613      	mov	r3, r2
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	4413      	add	r3, r2
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	3308      	adds	r3, #8
 80089be:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <etharp_output_to_arp_index+0x124>)
 80089c0:	4413      	add	r3, r2
 80089c2:	3304      	adds	r3, #4
 80089c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c8:	9200      	str	r2, [sp, #0]
 80089ca:	460a      	mov	r2, r1
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f001 fe30 	bl	800a634 <ethernet_output>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200000ec 	.word	0x200000ec
 80089e4:	0800c830 	.word	0x0800c830
 80089e8:	0800c9a0 	.word	0x0800c9a0
 80089ec:	0800c8a8 	.word	0x0800c8a8

080089f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <etharp_output+0x24>
 8008a06:	4b73      	ldr	r3, [pc, #460]	; (8008bd4 <etharp_output+0x1e4>)
 8008a08:	f240 321e 	movw	r2, #798	; 0x31e
 8008a0c:	4972      	ldr	r1, [pc, #456]	; (8008bd8 <etharp_output+0x1e8>)
 8008a0e:	4873      	ldr	r0, [pc, #460]	; (8008bdc <etharp_output+0x1ec>)
 8008a10:	f001 ff5a 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <etharp_output+0x38>
 8008a1a:	4b6e      	ldr	r3, [pc, #440]	; (8008bd4 <etharp_output+0x1e4>)
 8008a1c:	f240 321f 	movw	r2, #799	; 0x31f
 8008a20:	496f      	ldr	r1, [pc, #444]	; (8008be0 <etharp_output+0x1f0>)
 8008a22:	486e      	ldr	r0, [pc, #440]	; (8008bdc <etharp_output+0x1ec>)
 8008a24:	f001 ff50 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <etharp_output+0x4c>
 8008a2e:	4b69      	ldr	r3, [pc, #420]	; (8008bd4 <etharp_output+0x1e4>)
 8008a30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008a34:	496b      	ldr	r1, [pc, #428]	; (8008be4 <etharp_output+0x1f4>)
 8008a36:	4869      	ldr	r0, [pc, #420]	; (8008bdc <etharp_output+0x1ec>)
 8008a38:	f001 ff46 	bl	800a8c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68f9      	ldr	r1, [r7, #12]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 feee 	bl	8009824 <ip4_addr_isbroadcast_u32>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008a4e:	4b66      	ldr	r3, [pc, #408]	; (8008be8 <etharp_output+0x1f8>)
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	e0af      	b.n	8008bb4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a5c:	2be0      	cmp	r3, #224	; 0xe0
 8008a5e:	d118      	bne.n	8008a92 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008a60:	2301      	movs	r3, #1
 8008a62:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008a64:	2300      	movs	r3, #0
 8008a66:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008a68:	235e      	movs	r3, #94	; 0x5e
 8008a6a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3303      	adds	r3, #3
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008a8a:	f107 0310 	add.w	r3, r7, #16
 8008a8e:	61fb      	str	r3, [r7, #28]
 8008a90:	e090      	b.n	8008bb4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	405a      	eors	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d012      	beq.n	8008ad0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008ab0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00b      	beq.n	8008ad0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	330c      	adds	r3, #12
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	e002      	b.n	8008ad0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008aca:	f06f 0303 	mvn.w	r3, #3
 8008ace:	e07d      	b.n	8008bcc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008ad0:	4b46      	ldr	r3, [pc, #280]	; (8008bec <etharp_output+0x1fc>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4a46      	ldr	r2, [pc, #280]	; (8008bf0 <etharp_output+0x200>)
 8008ad8:	460b      	mov	r3, r1
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	440b      	add	r3, r1
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d925      	bls.n	8008b36 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008aea:	4b40      	ldr	r3, [pc, #256]	; (8008bec <etharp_output+0x1fc>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	4619      	mov	r1, r3
 8008af0:	4a3f      	ldr	r2, [pc, #252]	; (8008bf0 <etharp_output+0x200>)
 8008af2:	460b      	mov	r3, r1
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	440b      	add	r3, r1
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	4413      	add	r3, r2
 8008afc:	3308      	adds	r3, #8
 8008afe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d117      	bne.n	8008b36 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b38      	ldr	r3, [pc, #224]	; (8008bec <etharp_output+0x1fc>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	4937      	ldr	r1, [pc, #220]	; (8008bf0 <etharp_output+0x200>)
 8008b12:	4603      	mov	r3, r0
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	4403      	add	r3, r0
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	440b      	add	r3, r1
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d108      	bne.n	8008b36 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008b24:	4b31      	ldr	r3, [pc, #196]	; (8008bec <etharp_output+0x1fc>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff fec5 	bl	80088bc <etharp_output_to_arp_index>
 8008b32:	4603      	mov	r3, r0
 8008b34:	e04a      	b.n	8008bcc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]
 8008b3a:	e031      	b.n	8008ba0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008b3c:	7dfa      	ldrb	r2, [r7, #23]
 8008b3e:	492c      	ldr	r1, [pc, #176]	; (8008bf0 <etharp_output+0x200>)
 8008b40:	4613      	mov	r3, r2
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	440b      	add	r3, r1
 8008b4a:	3314      	adds	r3, #20
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d923      	bls.n	8008b9a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008b52:	7dfa      	ldrb	r2, [r7, #23]
 8008b54:	4926      	ldr	r1, [pc, #152]	; (8008bf0 <etharp_output+0x200>)
 8008b56:	4613      	mov	r3, r2
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4413      	add	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	440b      	add	r3, r1
 8008b60:	3308      	adds	r3, #8
 8008b62:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d117      	bne.n	8008b9a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	7dfa      	ldrb	r2, [r7, #23]
 8008b70:	481f      	ldr	r0, [pc, #124]	; (8008bf0 <etharp_output+0x200>)
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4403      	add	r3, r0
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008b80:	4299      	cmp	r1, r3
 8008b82:	d10a      	bne.n	8008b9a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008b84:	4a19      	ldr	r2, [pc, #100]	; (8008bec <etharp_output+0x1fc>)
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fe93 	bl	80088bc <etharp_output_to_arp_index>
 8008b96:	4603      	mov	r3, r0
 8008b98:	e018      	b.n	8008bcc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b09      	cmp	r3, #9
 8008ba4:	d9ca      	bls.n	8008b3c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	69b9      	ldr	r1, [r7, #24]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f822 	bl	8008bf4 <etharp_query>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	e00b      	b.n	8008bcc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	68b9      	ldr	r1, [r7, #8]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f001 fd35 	bl	800a634 <ethernet_output>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	0800c830 	.word	0x0800c830
 8008bd8:	0800c980 	.word	0x0800c980
 8008bdc:	0800c8a8 	.word	0x0800c8a8
 8008be0:	0800c9d0 	.word	0x0800c9d0
 8008be4:	0800c970 	.word	0x0800c970
 8008be8:	0800cf88 	.word	0x0800cf88
 8008bec:	200001dc 	.word	0x200001dc
 8008bf0:	200000ec 	.word	0x200000ec

08008bf4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08c      	sub	sp, #48	; 0x30
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3326      	adds	r3, #38	; 0x26
 8008c04:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008c06:	23ff      	movs	r3, #255	; 0xff
 8008c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68f9      	ldr	r1, [r7, #12]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fe04 	bl	8009824 <ip4_addr_isbroadcast_u32>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10c      	bne.n	8008c3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008c2a:	2be0      	cmp	r3, #224	; 0xe0
 8008c2c:	d006      	beq.n	8008c3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008c3c:	f06f 030f 	mvn.w	r3, #15
 8008c40:	e101      	b.n	8008e46 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	2101      	movs	r1, #1
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	f7ff fb60 	bl	800830c <etharp_find_entry>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	da02      	bge.n	8008c5e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008c58:	8a7b      	ldrh	r3, [r7, #18]
 8008c5a:	b25b      	sxtb	r3, r3
 8008c5c:	e0f3      	b.n	8008e46 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008c5e:	8a7b      	ldrh	r3, [r7, #18]
 8008c60:	2b7e      	cmp	r3, #126	; 0x7e
 8008c62:	d906      	bls.n	8008c72 <etharp_query+0x7e>
 8008c64:	4b7a      	ldr	r3, [pc, #488]	; (8008e50 <etharp_query+0x25c>)
 8008c66:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008c6a:	497a      	ldr	r1, [pc, #488]	; (8008e54 <etharp_query+0x260>)
 8008c6c:	487a      	ldr	r0, [pc, #488]	; (8008e58 <etharp_query+0x264>)
 8008c6e:	f001 fe2b 	bl	800a8c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008c72:	8a7b      	ldrh	r3, [r7, #18]
 8008c74:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008c76:	7c7a      	ldrb	r2, [r7, #17]
 8008c78:	4978      	ldr	r1, [pc, #480]	; (8008e5c <etharp_query+0x268>)
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4413      	add	r3, r2
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	440b      	add	r3, r1
 8008c84:	3314      	adds	r3, #20
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d115      	bne.n	8008cb8 <etharp_query+0xc4>
    is_new_entry = 1;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008c90:	7c7a      	ldrb	r2, [r7, #17]
 8008c92:	4972      	ldr	r1, [pc, #456]	; (8008e5c <etharp_query+0x268>)
 8008c94:	4613      	mov	r3, r2
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	4413      	add	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3314      	adds	r3, #20
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008ca4:	7c7a      	ldrb	r2, [r7, #17]
 8008ca6:	496d      	ldr	r1, [pc, #436]	; (8008e5c <etharp_query+0x268>)
 8008ca8:	4613      	mov	r3, r2
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	4413      	add	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	440b      	add	r3, r1
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8008cb8:	7c7a      	ldrb	r2, [r7, #17]
 8008cba:	4968      	ldr	r1, [pc, #416]	; (8008e5c <etharp_query+0x268>)
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3314      	adds	r3, #20
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d011      	beq.n	8008cf2 <etharp_query+0xfe>
 8008cce:	7c7a      	ldrb	r2, [r7, #17]
 8008cd0:	4962      	ldr	r1, [pc, #392]	; (8008e5c <etharp_query+0x268>)
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	440b      	add	r3, r1
 8008cdc:	3314      	adds	r3, #20
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d806      	bhi.n	8008cf2 <etharp_query+0xfe>
 8008ce4:	4b5a      	ldr	r3, [pc, #360]	; (8008e50 <etharp_query+0x25c>)
 8008ce6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008cea:	495d      	ldr	r1, [pc, #372]	; (8008e60 <etharp_query+0x26c>)
 8008cec:	485a      	ldr	r0, [pc, #360]	; (8008e58 <etharp_query+0x264>)
 8008cee:	f001 fdeb 	bl	800a8c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <etharp_query+0x10a>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10c      	bne.n	8008d18 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f963 	bl	8008fcc <etharp_request>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <etharp_query+0x124>
      return result;
 8008d12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d16:	e096      	b.n	8008e46 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d106      	bne.n	8008d2c <etharp_query+0x138>
 8008d1e:	4b4c      	ldr	r3, [pc, #304]	; (8008e50 <etharp_query+0x25c>)
 8008d20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8008d24:	494f      	ldr	r1, [pc, #316]	; (8008e64 <etharp_query+0x270>)
 8008d26:	484c      	ldr	r0, [pc, #304]	; (8008e58 <etharp_query+0x264>)
 8008d28:	f001 fdce 	bl	800a8c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008d2c:	7c7a      	ldrb	r2, [r7, #17]
 8008d2e:	494b      	ldr	r1, [pc, #300]	; (8008e5c <etharp_query+0x268>)
 8008d30:	4613      	mov	r3, r2
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	4413      	add	r3, r2
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	440b      	add	r3, r1
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d917      	bls.n	8008d72 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8008d42:	4a49      	ldr	r2, [pc, #292]	; (8008e68 <etharp_query+0x274>)
 8008d44:	7c7b      	ldrb	r3, [r7, #17]
 8008d46:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008d48:	7c7a      	ldrb	r2, [r7, #17]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	3308      	adds	r3, #8
 8008d54:	4a41      	ldr	r2, [pc, #260]	; (8008e5c <etharp_query+0x268>)
 8008d56:	4413      	add	r3, r2
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d5e:	9200      	str	r2, [sp, #0]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f001 fc65 	bl	800a634 <ethernet_output>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d70:	e067      	b.n	8008e42 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008d72:	7c7a      	ldrb	r2, [r7, #17]
 8008d74:	4939      	ldr	r1, [pc, #228]	; (8008e5c <etharp_query+0x268>)
 8008d76:	4613      	mov	r3, r2
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	4413      	add	r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	440b      	add	r3, r1
 8008d80:	3314      	adds	r3, #20
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d15c      	bne.n	8008e42 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008d90:	e01c      	b.n	8008dcc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	895a      	ldrh	r2, [r3, #10]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	891b      	ldrh	r3, [r3, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d10a      	bne.n	8008db4 <etharp_query+0x1c0>
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <etharp_query+0x1c0>
 8008da6:	4b2a      	ldr	r3, [pc, #168]	; (8008e50 <etharp_query+0x25c>)
 8008da8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008dac:	492f      	ldr	r1, [pc, #188]	; (8008e6c <etharp_query+0x278>)
 8008dae:	482a      	ldr	r0, [pc, #168]	; (8008e58 <etharp_query+0x264>)
 8008db0:	f001 fd8a 	bl	800a8c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	7b1b      	ldrb	r3, [r3, #12]
 8008db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <etharp_query+0x1d2>
        copy_needed = 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	61bb      	str	r3, [r7, #24]
        break;
 8008dc4:	e005      	b.n	8008dd2 <etharp_query+0x1de>
      }
      p = p->next;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1df      	bne.n	8008d92 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008dde:	200e      	movs	r0, #14
 8008de0:	f7fe f9e8 	bl	80071b4 <pbuf_clone>
 8008de4:	61f8      	str	r0, [r7, #28]
 8008de6:	e004      	b.n	8008df2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008dec:	69f8      	ldr	r0, [r7, #28]
 8008dee:	f7fd ff59 	bl	8006ca4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d021      	beq.n	8008e3c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8008df8:	7c7a      	ldrb	r2, [r7, #17]
 8008dfa:	4918      	ldr	r1, [pc, #96]	; (8008e5c <etharp_query+0x268>)
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	4413      	add	r3, r2
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	440b      	add	r3, r1
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8008e0c:	7c7a      	ldrb	r2, [r7, #17]
 8008e0e:	4913      	ldr	r1, [pc, #76]	; (8008e5c <etharp_query+0x268>)
 8008e10:	4613      	mov	r3, r2
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	4413      	add	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	440b      	add	r3, r1
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fd fea1 	bl	8006b64 <pbuf_free>
      }
      arp_table[i].q = p;
 8008e22:	7c7a      	ldrb	r2, [r7, #17]
 8008e24:	490d      	ldr	r1, [pc, #52]	; (8008e5c <etharp_query+0x268>)
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	440b      	add	r3, r1
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e3a:	e002      	b.n	8008e42 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8008e3c:	23ff      	movs	r3, #255	; 0xff
 8008e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8008e42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3728      	adds	r7, #40	; 0x28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	0800c830 	.word	0x0800c830
 8008e54:	0800c9dc 	.word	0x0800c9dc
 8008e58:	0800c8a8 	.word	0x0800c8a8
 8008e5c:	200000ec 	.word	0x200000ec
 8008e60:	0800c9ec 	.word	0x0800c9ec
 8008e64:	0800c9d0 	.word	0x0800c9d0
 8008e68:	200001dc 	.word	0x200001dc
 8008e6c:	0800ca14 	.word	0x0800ca14

08008e70 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <etharp_raw+0x26>
 8008e88:	4b3a      	ldr	r3, [pc, #232]	; (8008f74 <etharp_raw+0x104>)
 8008e8a:	f240 4257 	movw	r2, #1111	; 0x457
 8008e8e:	493a      	ldr	r1, [pc, #232]	; (8008f78 <etharp_raw+0x108>)
 8008e90:	483a      	ldr	r0, [pc, #232]	; (8008f7c <etharp_raw+0x10c>)
 8008e92:	f001 fd19 	bl	800a8c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008e96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008e9a:	211c      	movs	r1, #28
 8008e9c:	200e      	movs	r0, #14
 8008e9e:	f7fd fb7f 	bl	80065a0 <pbuf_alloc>
 8008ea2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d102      	bne.n	8008eb0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8008eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8008eae:	e05d      	b.n	8008f6c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	895b      	ldrh	r3, [r3, #10]
 8008eb4:	2b1b      	cmp	r3, #27
 8008eb6:	d806      	bhi.n	8008ec6 <etharp_raw+0x56>
 8008eb8:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <etharp_raw+0x104>)
 8008eba:	f240 4262 	movw	r2, #1122	; 0x462
 8008ebe:	4930      	ldr	r1, [pc, #192]	; (8008f80 <etharp_raw+0x110>)
 8008ec0:	482e      	ldr	r0, [pc, #184]	; (8008f7c <etharp_raw+0x10c>)
 8008ec2:	f001 fd01 	bl	800a8c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008ecc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fc fbe2 	bl	8005698 <lwip_htons>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ee2:	2b06      	cmp	r3, #6
 8008ee4:	d006      	beq.n	8008ef4 <etharp_raw+0x84>
 8008ee6:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <etharp_raw+0x104>)
 8008ee8:	f240 4269 	movw	r2, #1129	; 0x469
 8008eec:	4925      	ldr	r1, [pc, #148]	; (8008f84 <etharp_raw+0x114>)
 8008eee:	4823      	ldr	r0, [pc, #140]	; (8008f7c <etharp_raw+0x10c>)
 8008ef0:	f001 fcea 	bl	800a8c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	2206      	movs	r2, #6
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fc23 	bl	800a748 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3312      	adds	r3, #18
 8008f06:	2206      	movs	r2, #6
 8008f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 fc1c 	bl	800a748 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	330e      	adds	r3, #14
 8008f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	3318      	adds	r3, #24
 8008f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2200      	movs	r2, #0
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f042 0201 	orr.w	r2, r2, #1
 8008f30:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f042 0208 	orr.w	r2, r2, #8
 8008f3a:	709a      	strb	r2, [r3, #2]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2206      	movs	r2, #6
 8008f44:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008f4c:	f640 0306 	movw	r3, #2054	; 0x806
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	69b9      	ldr	r1, [r7, #24]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f001 fb6b 	bl	800a634 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8008f5e:	69b8      	ldr	r0, [r7, #24]
 8008f60:	f7fd fe00 	bl	8006b64 <pbuf_free>
  p = NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8008f68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	0800c830 	.word	0x0800c830
 8008f78:	0800c980 	.word	0x0800c980
 8008f7c:	0800c8a8 	.word	0x0800c8a8
 8008f80:	0800ca30 	.word	0x0800ca30
 8008f84:	0800ca64 	.word	0x0800ca64

08008f88 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af04      	add	r7, sp, #16
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	9203      	str	r2, [sp, #12]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	9202      	str	r2, [sp, #8]
 8008fac:	4a06      	ldr	r2, [pc, #24]	; (8008fc8 <etharp_request_dst+0x40>)
 8008fae:	9201      	str	r2, [sp, #4]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff ff5a 	bl	8008e70 <etharp_raw>
 8008fbc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	0800cf90 	.word	0x0800cf90

08008fcc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8008fd6:	4a05      	ldr	r2, [pc, #20]	; (8008fec <etharp_request+0x20>)
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff ffd4 	bl	8008f88 <etharp_request_dst>
 8008fe0:	4603      	mov	r3, r0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	0800cf88 	.word	0x0800cf88

08008ff0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	; 0x38
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8008ffa:	4b79      	ldr	r3, [pc, #484]	; (80091e0 <icmp_input+0x1f0>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	b2db      	uxtb	r3, r3
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	b2db      	uxtb	r3, r3
 800900e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009012:	2b13      	cmp	r3, #19
 8009014:	f240 80cd 	bls.w	80091b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	895b      	ldrh	r3, [r3, #10]
 800901c:	2b03      	cmp	r3, #3
 800901e:	f240 80ca 	bls.w	80091b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800902c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80b7 	beq.w	80091a4 <icmp_input+0x1b4>
 8009036:	2b08      	cmp	r3, #8
 8009038:	f040 80b7 	bne.w	80091aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800903c:	4b69      	ldr	r3, [pc, #420]	; (80091e4 <icmp_input+0x1f4>)
 800903e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009040:	4b67      	ldr	r3, [pc, #412]	; (80091e0 <icmp_input+0x1f0>)
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009048:	2be0      	cmp	r3, #224	; 0xe0
 800904a:	f000 80bb 	beq.w	80091c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800904e:	4b64      	ldr	r3, [pc, #400]	; (80091e0 <icmp_input+0x1f0>)
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	4a63      	ldr	r2, [pc, #396]	; (80091e0 <icmp_input+0x1f0>)
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fbe3 	bl	8009824 <ip4_addr_isbroadcast_u32>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80b1 	bne.w	80091c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	891b      	ldrh	r3, [r3, #8]
 800906a:	2b07      	cmp	r3, #7
 800906c:	f240 80a5 	bls.w	80091ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009072:	330e      	adds	r3, #14
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fd fcde 	bl	8006a38 <pbuf_add_header>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d04b      	beq.n	800911a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	891a      	ldrh	r2, [r3, #8]
 8009086:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009088:	4413      	add	r3, r2
 800908a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	891b      	ldrh	r3, [r3, #8]
 8009090:	8b7a      	ldrh	r2, [r7, #26]
 8009092:	429a      	cmp	r2, r3
 8009094:	f0c0 809a 	bcc.w	80091cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009098:	8b7b      	ldrh	r3, [r7, #26]
 800909a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800909e:	4619      	mov	r1, r3
 80090a0:	200e      	movs	r0, #14
 80090a2:	f7fd fa7d 	bl	80065a0 <pbuf_alloc>
 80090a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8090 	beq.w	80091d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	895b      	ldrh	r3, [r3, #10]
 80090b4:	461a      	mov	r2, r3
 80090b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090b8:	3308      	adds	r3, #8
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d203      	bcs.n	80090c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f7fd fd50 	bl	8006b64 <pbuf_free>
          goto icmperr;
 80090c4:	e085      	b.n	80091d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80090cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 fb3a 	bl	800a748 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80090d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090d6:	4619      	mov	r1, r3
 80090d8:	6978      	ldr	r0, [r7, #20]
 80090da:	f7fd fcbd 	bl	8006a58 <pbuf_remove_header>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80090e4:	4b40      	ldr	r3, [pc, #256]	; (80091e8 <icmp_input+0x1f8>)
 80090e6:	22b6      	movs	r2, #182	; 0xb6
 80090e8:	4940      	ldr	r1, [pc, #256]	; (80091ec <icmp_input+0x1fc>)
 80090ea:	4841      	ldr	r0, [pc, #260]	; (80091f0 <icmp_input+0x200>)
 80090ec:	f001 fbec 	bl	800a8c8 <iprintf>
          pbuf_free(r);
 80090f0:	6978      	ldr	r0, [r7, #20]
 80090f2:	f7fd fd37 	bl	8006b64 <pbuf_free>
          goto icmperr;
 80090f6:	e06c      	b.n	80091d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	f7fd fe5a 	bl	8006db4 <pbuf_copy>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009106:	6978      	ldr	r0, [r7, #20]
 8009108:	f7fd fd2c 	bl	8006b64 <pbuf_free>
          goto icmperr;
 800910c:	e061      	b.n	80091d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fd fd28 	bl	8006b64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	e00f      	b.n	800913a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800911a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800911c:	330e      	adds	r3, #14
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fd fc99 	bl	8006a58 <pbuf_remove_header>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800912c:	4b2e      	ldr	r3, [pc, #184]	; (80091e8 <icmp_input+0x1f8>)
 800912e:	22c7      	movs	r2, #199	; 0xc7
 8009130:	4930      	ldr	r1, [pc, #192]	; (80091f4 <icmp_input+0x204>)
 8009132:	482f      	ldr	r0, [pc, #188]	; (80091f0 <icmp_input+0x200>)
 8009134:	f001 fbc8 	bl	800a8c8 <iprintf>
          goto icmperr;
 8009138:	e04b      	b.n	80091d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009140:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fd fc77 	bl	8006a38 <pbuf_add_header>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d12b      	bne.n	80091a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800915e:	4b20      	ldr	r3, [pc, #128]	; (80091e0 <icmp_input+0x1f0>)
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2200      	movs	r2, #0
 8009170:	709a      	strb	r2, [r3, #2]
 8009172:	2200      	movs	r2, #0
 8009174:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	729a      	strb	r2, [r3, #10]
 8009182:	2200      	movs	r2, #0
 8009184:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	9302      	str	r3, [sp, #8]
 800918a:	2301      	movs	r3, #1
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	2300      	movs	r3, #0
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	23ff      	movs	r3, #255	; 0xff
 8009194:	2200      	movs	r2, #0
 8009196:	69f9      	ldr	r1, [r7, #28]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa6b 	bl	8009674 <ip4_output_if>
 800919e:	4603      	mov	r3, r0
 80091a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80091a2:	e001      	b.n	80091a8 <icmp_input+0x1b8>
      break;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <icmp_input+0x1ba>
      break;
 80091a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fd fcda 	bl	8006b64 <pbuf_free>
  return;
 80091b0:	e013      	b.n	80091da <icmp_input+0x1ea>
    goto lenerr;
 80091b2:	bf00      	nop
 80091b4:	e002      	b.n	80091bc <icmp_input+0x1cc>
    goto lenerr;
 80091b6:	bf00      	nop
 80091b8:	e000      	b.n	80091bc <icmp_input+0x1cc>
        goto lenerr;
 80091ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7fd fcd1 	bl	8006b64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80091c2:	e00a      	b.n	80091da <icmp_input+0x1ea>
        goto icmperr;
 80091c4:	bf00      	nop
 80091c6:	e004      	b.n	80091d2 <icmp_input+0x1e2>
        goto icmperr;
 80091c8:	bf00      	nop
 80091ca:	e002      	b.n	80091d2 <icmp_input+0x1e2>
          goto icmperr;
 80091cc:	bf00      	nop
 80091ce:	e000      	b.n	80091d2 <icmp_input+0x1e2>
          goto icmperr;
 80091d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fd fcc6 	bl	8006b64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80091d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80091da:	3728      	adds	r7, #40	; 0x28
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20003394 	.word	0x20003394
 80091e4:	200033a8 	.word	0x200033a8
 80091e8:	0800caa8 	.word	0x0800caa8
 80091ec:	0800cae0 	.word	0x0800cae0
 80091f0:	0800cb18 	.word	0x0800cb18
 80091f4:	0800cb40 	.word	0x0800cb40

080091f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	461a      	mov	r2, r3
 8009208:	2103      	movs	r1, #3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f814 	bl	8009238 <icmp_send_response>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	461a      	mov	r2, r3
 8009228:	210b      	movs	r1, #11
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f804 	bl	8009238 <icmp_send_response>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08c      	sub	sp, #48	; 0x30
 800923c:	af04      	add	r7, sp, #16
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
 8009244:	4613      	mov	r3, r2
 8009246:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009248:	f44f 7220 	mov.w	r2, #640	; 0x280
 800924c:	2124      	movs	r1, #36	; 0x24
 800924e:	2022      	movs	r0, #34	; 0x22
 8009250:	f7fd f9a6 	bl	80065a0 <pbuf_alloc>
 8009254:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d04c      	beq.n	80092f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	895b      	ldrh	r3, [r3, #10]
 8009260:	2b23      	cmp	r3, #35	; 0x23
 8009262:	d806      	bhi.n	8009272 <icmp_send_response+0x3a>
 8009264:	4b26      	ldr	r3, [pc, #152]	; (8009300 <icmp_send_response+0xc8>)
 8009266:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800926a:	4926      	ldr	r1, [pc, #152]	; (8009304 <icmp_send_response+0xcc>)
 800926c:	4826      	ldr	r0, [pc, #152]	; (8009308 <icmp_send_response+0xd0>)
 800926e:	f001 fb2b 	bl	800a8c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	78ba      	ldrb	r2, [r7, #2]
 8009288:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2200      	movs	r2, #0
 800928e:	711a      	strb	r2, [r3, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	719a      	strb	r2, [r3, #6]
 800929a:	2200      	movs	r2, #0
 800929c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f103 0008 	add.w	r0, r3, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	221c      	movs	r2, #28
 80092ac:	4619      	mov	r1, r3
 80092ae:	f001 fa4b 	bl	800a748 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80092b8:	f107 030c 	add.w	r3, r7, #12
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f825 	bl	800930c <ip4_route>
 80092c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d011      	beq.n	80092ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2200      	movs	r2, #0
 80092ce:	709a      	strb	r2, [r3, #2]
 80092d0:	2200      	movs	r2, #0
 80092d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80092d4:	f107 020c 	add.w	r2, r7, #12
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	2301      	movs	r3, #1
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	2300      	movs	r3, #0
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	23ff      	movs	r3, #255	; 0xff
 80092e6:	2100      	movs	r1, #0
 80092e8:	69f8      	ldr	r0, [r7, #28]
 80092ea:	f000 f9c3 	bl	8009674 <ip4_output_if>
  }
  pbuf_free(q);
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	f7fd fc38 	bl	8006b64 <pbuf_free>
 80092f4:	e000      	b.n	80092f8 <icmp_send_response+0xc0>
    return;
 80092f6:	bf00      	nop
}
 80092f8:	3720      	adds	r7, #32
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	0800caa8 	.word	0x0800caa8
 8009304:	0800cb74 	.word	0x0800cb74
 8009308:	0800cb18 	.word	0x0800cb18

0800930c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009314:	4b33      	ldr	r3, [pc, #204]	; (80093e4 <ip4_route+0xd8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e036      	b.n	800938a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d02b      	beq.n	8009384 <ip4_route+0x78>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d022      	beq.n	8009384 <ip4_route+0x78>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3304      	adds	r3, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01d      	beq.n	8009384 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3304      	adds	r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	405a      	eors	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3308      	adds	r3, #8
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	e038      	b.n	80093d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d108      	bne.n	8009384 <ip4_route+0x78>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	330c      	adds	r3, #12
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d101      	bne.n	8009384 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	e028      	b.n	80093d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1c5      	bne.n	800931c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009390:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <ip4_route+0xdc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01a      	beq.n	80093ce <ip4_route+0xc2>
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <ip4_route+0xdc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d012      	beq.n	80093ce <ip4_route+0xc2>
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <ip4_route+0xdc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00a      	beq.n	80093ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <ip4_route+0xdc>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3304      	adds	r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b7f      	cmp	r3, #127	; 0x7f
 80093cc:	d101      	bne.n	80093d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e001      	b.n	80093d6 <ip4_route+0xca>
  }

  return netif_default;
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <ip4_route+0xdc>)
 80093d4:	681b      	ldr	r3, [r3, #0]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20008580 	.word	0x20008580
 80093e8:	20008584 	.word	0x20008584

080093ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d016      	beq.n	8009432 <ip4_input_accept+0x46>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d011      	beq.n	8009432 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800940e:	4b0b      	ldr	r3, [pc, #44]	; (800943c <ip4_input_accept+0x50>)
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d008      	beq.n	800942e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <ip4_input_accept+0x50>)
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 f9fe 	bl	8009824 <ip4_addr_isbroadcast_u32>
 8009428:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20003394 	.word	0x20003394

08009440 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	091b      	lsrs	r3, r3, #4
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b04      	cmp	r3, #4
 800945a:	d004      	beq.n	8009466 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7fd fb81 	bl	8006b64 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	e0fd      	b.n	8009662 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	b2db      	uxtb	r3, r3
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	b2db      	uxtb	r3, r3
 8009474:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	885b      	ldrh	r3, [r3, #2]
 800947a:	b29b      	uxth	r3, r3
 800947c:	4618      	mov	r0, r3
 800947e:	f7fc f90b 	bl	8005698 <lwip_htons>
 8009482:	4603      	mov	r3, r0
 8009484:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	891b      	ldrh	r3, [r3, #8]
 800948a:	89ba      	ldrh	r2, [r7, #12]
 800948c:	429a      	cmp	r2, r3
 800948e:	d204      	bcs.n	800949a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009490:	89bb      	ldrh	r3, [r7, #12]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fd f9df 	bl	8006858 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	895b      	ldrh	r3, [r3, #10]
 800949e:	89fa      	ldrh	r2, [r7, #14]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d807      	bhi.n	80094b4 <ip4_input+0x74>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	891b      	ldrh	r3, [r3, #8]
 80094a8:	89ba      	ldrh	r2, [r7, #12]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d802      	bhi.n	80094b4 <ip4_input+0x74>
 80094ae:	89fb      	ldrh	r3, [r7, #14]
 80094b0:	2b13      	cmp	r3, #19
 80094b2:	d804      	bhi.n	80094be <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fd fb55 	bl	8006b64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e0d1      	b.n	8009662 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	4a6a      	ldr	r2, [pc, #424]	; (800966c <ip4_input+0x22c>)
 80094c4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	4a68      	ldr	r2, [pc, #416]	; (800966c <ip4_input+0x22c>)
 80094cc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80094ce:	4b67      	ldr	r3, [pc, #412]	; (800966c <ip4_input+0x22c>)
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d6:	2be0      	cmp	r3, #224	; 0xe0
 80094d8:	d112      	bne.n	8009500 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d007      	beq.n	80094fa <ip4_input+0xba>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	3304      	adds	r3, #4
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <ip4_input+0xba>
      netif = inp;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	e02a      	b.n	8009550 <ip4_input+0x110>
    } else {
      netif = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	e027      	b.n	8009550 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009500:	6838      	ldr	r0, [r7, #0]
 8009502:	f7ff ff73 	bl	80093ec <ip4_input_accept>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <ip4_input+0xd2>
      netif = inp;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	e01e      	b.n	8009550 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009516:	4b55      	ldr	r3, [pc, #340]	; (800966c <ip4_input+0x22c>)
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b7f      	cmp	r3, #127	; 0x7f
 800951e:	d017      	beq.n	8009550 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009520:	4b53      	ldr	r3, [pc, #332]	; (8009670 <ip4_input+0x230>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	e00e      	b.n	8009546 <ip4_input+0x106>
          if (netif == inp) {
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d006      	beq.n	800953e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009530:	6938      	ldr	r0, [r7, #16]
 8009532:	f7ff ff5b 	bl	80093ec <ip4_input_accept>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d108      	bne.n	800954e <ip4_input+0x10e>
 800953c:	e000      	b.n	8009540 <ip4_input+0x100>
            continue;
 800953e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ed      	bne.n	8009528 <ip4_input+0xe8>
 800954c:	e000      	b.n	8009550 <ip4_input+0x110>
            break;
 800954e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009550:	4b46      	ldr	r3, [pc, #280]	; (800966c <ip4_input+0x22c>)
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f964 	bl	8009824 <ip4_addr_isbroadcast_u32>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d105      	bne.n	800956e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009562:	4b42      	ldr	r3, [pc, #264]	; (800966c <ip4_input+0x22c>)
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800956a:	2be0      	cmp	r3, #224	; 0xe0
 800956c:	d104      	bne.n	8009578 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7fd faf8 	bl	8006b64 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e074      	b.n	8009662 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fd faf0 	bl	8006b64 <pbuf_free>
    return ERR_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	e06c      	b.n	8009662 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	88db      	ldrh	r3, [r3, #6]
 800958c:	b29b      	uxth	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009594:	4013      	ands	r3, r2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fc88 	bl	8009eb0 <ip4_reass>
 80095a0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <ip4_input+0x16c>
      return ERR_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	e05a      	b.n	8009662 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80095b2:	4a2e      	ldr	r2, [pc, #184]	; (800966c <ip4_input+0x22c>)
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80095b8:	4a2c      	ldr	r2, [pc, #176]	; (800966c <ip4_input+0x22c>)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80095be:	4a2b      	ldr	r2, [pc, #172]	; (800966c <ip4_input+0x22c>)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	4b25      	ldr	r3, [pc, #148]	; (800966c <ip4_input+0x22c>)
 80095d6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80095d8:	89fb      	ldrh	r3, [r7, #14]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7fd fa3b 	bl	8006a58 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	7a5b      	ldrb	r3, [r3, #9]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d006      	beq.n	80095f8 <ip4_input+0x1b8>
 80095ea:	2b11      	cmp	r3, #17
 80095ec:	d109      	bne.n	8009602 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fe f8df 	bl	80077b4 <udp_input>
        break;
 80095f6:	e021      	b.n	800963c <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fcf8 	bl	8008ff0 <icmp_input>
        break;
 8009600:	e01c      	b.n	800963c <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009602:	4b1a      	ldr	r3, [pc, #104]	; (800966c <ip4_input+0x22c>)
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	6939      	ldr	r1, [r7, #16]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f90b 	bl	8009824 <ip4_addr_isbroadcast_u32>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10f      	bne.n	8009634 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009614:	4b15      	ldr	r3, [pc, #84]	; (800966c <ip4_input+0x22c>)
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800961c:	2be0      	cmp	r3, #224	; 0xe0
 800961e:	d009      	beq.n	8009634 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fd fa89 	bl	8006b3e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800962c:	2102      	movs	r1, #2
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7ff fde2 	bl	80091f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fd fa95 	bl	8006b64 <pbuf_free>
        break;
 800963a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800963c:	4b0b      	ldr	r3, [pc, #44]	; (800966c <ip4_input+0x22c>)
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009642:	4b0a      	ldr	r3, [pc, #40]	; (800966c <ip4_input+0x22c>)
 8009644:	2200      	movs	r2, #0
 8009646:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009648:	4b08      	ldr	r3, [pc, #32]	; (800966c <ip4_input+0x22c>)
 800964a:	2200      	movs	r2, #0
 800964c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <ip4_input+0x22c>)
 8009650:	2200      	movs	r2, #0
 8009652:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <ip4_input+0x22c>)
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800965a:	4b04      	ldr	r3, [pc, #16]	; (800966c <ip4_input+0x22c>)
 800965c:	2200      	movs	r2, #0
 800965e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20003394 	.word	0x20003394
 8009670:	20008580 	.word	0x20008580

08009674 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	; 0x28
 8009678:	af04      	add	r7, sp, #16
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d009      	beq.n	80096a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <ip4_output_if+0x26>
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	3304      	adds	r3, #4
 800969e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4613      	mov	r3, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f805 	bl	80096c8 <ip4_output_if_src>
 80096be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	7b9b      	ldrb	r3, [r3, #14]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d006      	beq.n	80096ec <ip4_output_if_src+0x24>
 80096de:	4b4b      	ldr	r3, [pc, #300]	; (800980c <ip4_output_if_src+0x144>)
 80096e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80096e4:	494a      	ldr	r1, [pc, #296]	; (8009810 <ip4_output_if_src+0x148>)
 80096e6:	484b      	ldr	r0, [pc, #300]	; (8009814 <ip4_output_if_src+0x14c>)
 80096e8:	f001 f8ee 	bl	800a8c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d060      	beq.n	80097b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80096f2:	2314      	movs	r3, #20
 80096f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80096f6:	2114      	movs	r1, #20
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7fd f99d 	bl	8006a38 <pbuf_add_header>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009704:	f06f 0301 	mvn.w	r3, #1
 8009708:	e07c      	b.n	8009804 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	895b      	ldrh	r3, [r3, #10]
 8009714:	2b13      	cmp	r3, #19
 8009716:	d806      	bhi.n	8009726 <ip4_output_if_src+0x5e>
 8009718:	4b3c      	ldr	r3, [pc, #240]	; (800980c <ip4_output_if_src+0x144>)
 800971a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800971e:	493e      	ldr	r1, [pc, #248]	; (8009818 <ip4_output_if_src+0x150>)
 8009720:	483c      	ldr	r0, [pc, #240]	; (8009814 <ip4_output_if_src+0x14c>)
 8009722:	f001 f8d1 	bl	800a8c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009732:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800973c:	8b7b      	ldrh	r3, [r7, #26]
 800973e:	089b      	lsrs	r3, r3, #2
 8009740:	b29b      	uxth	r3, r3
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009748:	b2da      	uxtb	r2, r3
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009754:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	891b      	ldrh	r3, [r3, #8]
 800975a:	4618      	mov	r0, r3
 800975c:	f7fb ff9c 	bl	8005698 <lwip_htons>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2200      	movs	r2, #0
 800976c:	719a      	strb	r2, [r3, #6]
 800976e:	2200      	movs	r2, #0
 8009770:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <ip4_output_if_src+0x154>)
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fb ff8e 	bl	8005698 <lwip_htons>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <ip4_output_if_src+0x154>)
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	b29a      	uxth	r2, r3
 800978c:	4b23      	ldr	r3, [pc, #140]	; (800981c <ip4_output_if_src+0x154>)
 800978e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d104      	bne.n	80097a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009796:	4b22      	ldr	r3, [pc, #136]	; (8009820 <ip4_output_if_src+0x158>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	60da      	str	r2, [r3, #12]
 800979e:	e003      	b.n	80097a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2200      	movs	r2, #0
 80097ac:	729a      	strb	r2, [r3, #10]
 80097ae:	2200      	movs	r2, #0
 80097b0:	72da      	strb	r2, [r3, #11]
 80097b2:	e00f      	b.n	80097d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	895b      	ldrh	r3, [r3, #10]
 80097b8:	2b13      	cmp	r3, #19
 80097ba:	d802      	bhi.n	80097c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80097bc:	f06f 0301 	mvn.w	r3, #1
 80097c0:	e020      	b.n	8009804 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80097ce:	f107 0314 	add.w	r3, r7, #20
 80097d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00c      	beq.n	80097f6 <ip4_output_if_src+0x12e>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	891a      	ldrh	r2, [r3, #8]
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d906      	bls.n	80097f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fd4d 	bl	800a28c <ip4_frag>
 80097f2:	4603      	mov	r3, r0
 80097f4:	e006      	b.n	8009804 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009800:	4798      	blx	r3
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3720      	adds	r7, #32
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	0800cba0 	.word	0x0800cba0
 8009810:	0800cbd4 	.word	0x0800cbd4
 8009814:	0800cbe0 	.word	0x0800cbe0
 8009818:	0800cc08 	.word	0x0800cc08
 800981c:	200001de 	.word	0x200001de
 8009820:	0800cf84 	.word	0x0800cf84

08009824 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d002      	beq.n	8009840 <ip4_addr_isbroadcast_u32+0x1c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009840:	2301      	movs	r3, #1
 8009842:	e02a      	b.n	800989a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009852:	2300      	movs	r3, #0
 8009854:	e021      	b.n	800989a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	3304      	adds	r3, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d101      	bne.n	8009866 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009862:	2300      	movs	r3, #0
 8009864:	e019      	b.n	800989a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	3304      	adds	r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	405a      	eors	r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10d      	bne.n	8009898 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	43da      	mvns	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	3308      	adds	r3, #8
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009890:	429a      	cmp	r2, r3
 8009892:	d101      	bne.n	8009898 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009894:	2301      	movs	r3, #1
 8009896:	e000      	b.n	800989a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009898:	2300      	movs	r3, #0
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <ip_reass_tmr+0x54>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80098b8:	e018      	b.n	80098ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	7fdb      	ldrb	r3, [r3, #31]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <ip_reass_tmr+0x32>
      r->timer--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	7fdb      	ldrb	r3, [r3, #31]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e008      	b.n	80098ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f80a 	bl	8009900 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <ip_reass_tmr+0x12>
    }
  }
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	200001e0 	.word	0x200001e0

08009900 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d105      	bne.n	8009922 <ip_reass_free_complete_datagram+0x22>
 8009916:	4b45      	ldr	r3, [pc, #276]	; (8009a2c <ip_reass_free_complete_datagram+0x12c>)
 8009918:	22ab      	movs	r2, #171	; 0xab
 800991a:	4945      	ldr	r1, [pc, #276]	; (8009a30 <ip_reass_free_complete_datagram+0x130>)
 800991c:	4845      	ldr	r0, [pc, #276]	; (8009a34 <ip_reass_free_complete_datagram+0x134>)
 800991e:	f000 ffd3 	bl	800a8c8 <iprintf>
  if (prev != NULL) {
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00a      	beq.n	800993e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	429a      	cmp	r2, r3
 8009930:	d005      	beq.n	800993e <ip_reass_free_complete_datagram+0x3e>
 8009932:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <ip_reass_free_complete_datagram+0x12c>)
 8009934:	22ad      	movs	r2, #173	; 0xad
 8009936:	4940      	ldr	r1, [pc, #256]	; (8009a38 <ip_reass_free_complete_datagram+0x138>)
 8009938:	483e      	ldr	r0, [pc, #248]	; (8009a34 <ip_reass_free_complete_datagram+0x134>)
 800993a:	f000 ffc5 	bl	800a8c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	889b      	ldrh	r3, [r3, #4]
 800994a:	b29b      	uxth	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d12a      	bne.n	80099a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	6858      	ldr	r0, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3308      	adds	r3, #8
 8009966:	2214      	movs	r2, #20
 8009968:	4619      	mov	r1, r3
 800996a:	f000 feed 	bl	800a748 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800996e:	2101      	movs	r1, #1
 8009970:	69b8      	ldr	r0, [r7, #24]
 8009972:	f7ff fc51 	bl	8009218 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009976:	69b8      	ldr	r0, [r7, #24]
 8009978:	f7fd f97c 	bl	8006c74 <pbuf_clen>
 800997c:	4603      	mov	r3, r0
 800997e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009980:	8bfa      	ldrh	r2, [r7, #30]
 8009982:	8a7b      	ldrh	r3, [r7, #18]
 8009984:	4413      	add	r3, r2
 8009986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800998a:	db05      	blt.n	8009998 <ip_reass_free_complete_datagram+0x98>
 800998c:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <ip_reass_free_complete_datagram+0x12c>)
 800998e:	22bc      	movs	r2, #188	; 0xbc
 8009990:	492a      	ldr	r1, [pc, #168]	; (8009a3c <ip_reass_free_complete_datagram+0x13c>)
 8009992:	4828      	ldr	r0, [pc, #160]	; (8009a34 <ip_reass_free_complete_datagram+0x134>)
 8009994:	f000 ff98 	bl	800a8c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009998:	8bfa      	ldrh	r2, [r7, #30]
 800999a:	8a7b      	ldrh	r3, [r7, #18]
 800999c:	4413      	add	r3, r2
 800999e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80099a0:	69b8      	ldr	r0, [r7, #24]
 80099a2:	f7fd f8df 	bl	8006b64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80099ac:	e01f      	b.n	80099ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f7fd f958 	bl	8006c74 <pbuf_clen>
 80099c4:	4603      	mov	r3, r0
 80099c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80099c8:	8bfa      	ldrh	r2, [r7, #30]
 80099ca:	8a7b      	ldrh	r3, [r7, #18]
 80099cc:	4413      	add	r3, r2
 80099ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d2:	db05      	blt.n	80099e0 <ip_reass_free_complete_datagram+0xe0>
 80099d4:	4b15      	ldr	r3, [pc, #84]	; (8009a2c <ip_reass_free_complete_datagram+0x12c>)
 80099d6:	22cc      	movs	r2, #204	; 0xcc
 80099d8:	4918      	ldr	r1, [pc, #96]	; (8009a3c <ip_reass_free_complete_datagram+0x13c>)
 80099da:	4816      	ldr	r0, [pc, #88]	; (8009a34 <ip_reass_free_complete_datagram+0x134>)
 80099dc:	f000 ff74 	bl	800a8c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80099e0:	8bfa      	ldrh	r2, [r7, #30]
 80099e2:	8a7b      	ldrh	r3, [r7, #18]
 80099e4:	4413      	add	r3, r2
 80099e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7fd f8bb 	bl	8006b64 <pbuf_free>
  while (p != NULL) {
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1dc      	bne.n	80099ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f8c2 	bl	8009b80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80099fc:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <ip_reass_free_complete_datagram+0x140>)
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	8bfa      	ldrh	r2, [r7, #30]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d905      	bls.n	8009a12 <ip_reass_free_complete_datagram+0x112>
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <ip_reass_free_complete_datagram+0x12c>)
 8009a08:	22d2      	movs	r2, #210	; 0xd2
 8009a0a:	490e      	ldr	r1, [pc, #56]	; (8009a44 <ip_reass_free_complete_datagram+0x144>)
 8009a0c:	4809      	ldr	r0, [pc, #36]	; (8009a34 <ip_reass_free_complete_datagram+0x134>)
 8009a0e:	f000 ff5b 	bl	800a8c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <ip_reass_free_complete_datagram+0x140>)
 8009a14:	881a      	ldrh	r2, [r3, #0]
 8009a16:	8bfb      	ldrh	r3, [r7, #30]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <ip_reass_free_complete_datagram+0x140>)
 8009a1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009a20:	8bfb      	ldrh	r3, [r7, #30]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0800cc38 	.word	0x0800cc38
 8009a30:	0800cc74 	.word	0x0800cc74
 8009a34:	0800cc80 	.word	0x0800cc80
 8009a38:	0800cca8 	.word	0x0800cca8
 8009a3c:	0800ccbc 	.word	0x0800ccbc
 8009a40:	200001e4 	.word	0x200001e4
 8009a44:	0800ccdc 	.word	0x0800ccdc

08009a48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8009a52:	2300      	movs	r3, #0
 8009a54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8009a66:	4b28      	ldr	r3, [pc, #160]	; (8009b08 <ip_reass_remove_oldest_datagram+0xc0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009a6c:	e030      	b.n	8009ad0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	695a      	ldr	r2, [r3, #20]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d10c      	bne.n	8009a94 <ip_reass_remove_oldest_datagram+0x4c>
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d106      	bne.n	8009a94 <ip_reass_remove_oldest_datagram+0x4c>
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	899a      	ldrh	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	889b      	ldrh	r3, [r3, #4]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d014      	beq.n	8009abe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3301      	adds	r3, #1
 8009a98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d104      	bne.n	8009aaa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	e009      	b.n	8009abe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	7fda      	ldrb	r2, [r3, #31]
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	7fdb      	ldrb	r3, [r3, #31]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d803      	bhi.n	8009abe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1cb      	bne.n	8009a6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d008      	beq.n	8009aee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009adc:	69b9      	ldr	r1, [r7, #24]
 8009ade:	6a38      	ldr	r0, [r7, #32]
 8009ae0:	f7ff ff0e 	bl	8009900 <ip_reass_free_complete_datagram>
 8009ae4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	da02      	bge.n	8009afc <ip_reass_remove_oldest_datagram+0xb4>
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	dcac      	bgt.n	8009a56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8009afc:	697b      	ldr	r3, [r7, #20]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3728      	adds	r7, #40	; 0x28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200001e0 	.word	0x200001e0

08009b0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009b16:	2001      	movs	r0, #1
 8009b18:	f7fc f9f8 	bl	8005f0c <memp_malloc>
 8009b1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d110      	bne.n	8009b46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff ff8e 	bl	8009a48 <ip_reass_remove_oldest_datagram>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	4293      	cmp	r3, r2
 8009b32:	dc03      	bgt.n	8009b3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009b34:	2001      	movs	r0, #1
 8009b36:	f7fc f9e9 	bl	8005f0c <memp_malloc>
 8009b3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e016      	b.n	8009b74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009b46:	2220      	movs	r2, #32
 8009b48:	2100      	movs	r1, #0
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 fe0a 	bl	800a764 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	220f      	movs	r2, #15
 8009b54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8009b56:	4b09      	ldr	r3, [pc, #36]	; (8009b7c <ip_reass_enqueue_new_datagram+0x70>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <ip_reass_enqueue_new_datagram+0x70>)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3308      	adds	r3, #8
 8009b68:	2214      	movs	r2, #20
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fdeb 	bl	800a748 <memcpy>
  return ipr;
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	200001e0 	.word	0x200001e0

08009b80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <ip_reass_dequeue_datagram+0x4c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d104      	bne.n	8009b9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <ip_reass_dequeue_datagram+0x4c>)
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	e00d      	b.n	8009bba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <ip_reass_dequeue_datagram+0x32>
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <ip_reass_dequeue_datagram+0x50>)
 8009ba6:	f240 1245 	movw	r2, #325	; 0x145
 8009baa:	490a      	ldr	r1, [pc, #40]	; (8009bd4 <ip_reass_dequeue_datagram+0x54>)
 8009bac:	480a      	ldr	r0, [pc, #40]	; (8009bd8 <ip_reass_dequeue_datagram+0x58>)
 8009bae:	f000 fe8b 	bl	800a8c8 <iprintf>
    prev->next = ipr->next;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7fc f9f1 	bl	8005fa4 <memp_free>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200001e0 	.word	0x200001e0
 8009bd0:	0800cc38 	.word	0x0800cc38
 8009bd4:	0800cd00 	.word	0x0800cd00
 8009bd8:	0800cc80 	.word	0x0800cc80

08009bdc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08c      	sub	sp, #48	; 0x30
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8009bec:	2301      	movs	r3, #1
 8009bee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	885b      	ldrh	r3, [r3, #2]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fb fd4b 	bl	8005698 <lwip_htons>
 8009c02:	4603      	mov	r3, r0
 8009c04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 030f 	and.w	r3, r3, #15
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8009c14:	7e7b      	ldrb	r3, [r7, #25]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	8b7a      	ldrh	r2, [r7, #26]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d202      	bcs.n	8009c24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	e135      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8009c24:	7e7b      	ldrb	r3, [r7, #25]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	8b7a      	ldrh	r2, [r7, #26]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	88db      	ldrh	r3, [r3, #6]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fb fd2f 	bl	8005698 <lwip_htons>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	705a      	strb	r2, [r3, #1]
 8009c56:	2200      	movs	r2, #0
 8009c58:	709a      	strb	r2, [r3, #2]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	8afa      	ldrh	r2, [r7, #22]
 8009c62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8009c64:	8afa      	ldrh	r2, [r7, #22]
 8009c66:	8b7b      	ldrh	r3, [r7, #26]
 8009c68:	4413      	add	r3, r2
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	88db      	ldrh	r3, [r3, #6]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	8afa      	ldrh	r2, [r7, #22]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d902      	bls.n	8009c82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c80:	e106      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
 8009c88:	e068      	b.n	8009d5c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c92:	889b      	ldrh	r3, [r3, #4]
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	889b      	ldrh	r3, [r3, #4]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d235      	bcs.n	8009d0c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d020      	beq.n	8009cee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	889b      	ldrh	r3, [r3, #4]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d307      	bcc.n	8009ccc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	88db      	ldrh	r3, [r3, #6]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d902      	bls.n	8009cd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	e0de      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8009cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cda:	88db      	ldrh	r3, [r3, #6]
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	889b      	ldrh	r3, [r3, #4]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d03d      	beq.n	8009d64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8009cec:	e03a      	b.n	8009d64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8009cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf0:	88db      	ldrh	r3, [r3, #6]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	889b      	ldrh	r3, [r3, #4]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d902      	bls.n	8009d04 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009d02:	e0c5      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	605a      	str	r2, [r3, #4]
      break;
 8009d0a:	e02b      	b.n	8009d64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	889b      	ldrh	r3, [r3, #4]
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	889b      	ldrh	r3, [r3, #4]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d102      	bne.n	8009d22 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d20:	e0b6      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	889b      	ldrh	r3, [r3, #4]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	88db      	ldrh	r3, [r3, #6]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d202      	bcs.n	8009d38 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009d32:	f04f 33ff 	mov.w	r3, #4294967295
 8009d36:	e0ab      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	889b      	ldrh	r3, [r3, #4]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d001      	beq.n	8009d52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d193      	bne.n	8009c8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8009d62:	e000      	b.n	8009d66 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8009d64:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d12d      	bne.n	8009dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01c      	beq.n	8009dac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	88db      	ldrh	r3, [r3, #6]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	889b      	ldrh	r3, [r3, #4]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d906      	bls.n	8009d90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8009d82:	4b45      	ldr	r3, [pc, #276]	; (8009e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009d84:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009d88:	4944      	ldr	r1, [pc, #272]	; (8009e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8009d8a:	4845      	ldr	r0, [pc, #276]	; (8009ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009d8c:	f000 fd9c 	bl	800a8c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	88db      	ldrh	r3, [r3, #6]
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	889b      	ldrh	r3, [r3, #4]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d010      	beq.n	8009dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	e00d      	b.n	8009dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8009db4:	4b38      	ldr	r3, [pc, #224]	; (8009e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009db6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8009dba:	493a      	ldr	r1, [pc, #232]	; (8009ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8009dbc:	4838      	ldr	r0, [pc, #224]	; (8009ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009dbe:	f000 fd83 	bl	800a8c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	7f9b      	ldrb	r3, [r3, #30]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d059      	beq.n	8009e8e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d04f      	beq.n	8009e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d006      	beq.n	8009df6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	889b      	ldrh	r3, [r3, #4]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	623b      	str	r3, [r7, #32]
 8009dfa:	e041      	b.n	8009e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8009e06:	e012      	b.n	8009e2e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	88db      	ldrh	r3, [r3, #6]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	889b      	ldrh	r3, [r3, #4]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d002      	beq.n	8009e24 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	623b      	str	r3, [r7, #32]
            break;
 8009e22:	e007      	b.n	8009e34 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e9      	bne.n	8009e08 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d022      	beq.n	8009e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8009e42:	4b15      	ldr	r3, [pc, #84]	; (8009e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009e44:	f240 12df 	movw	r2, #479	; 0x1df
 8009e48:	4917      	ldr	r1, [pc, #92]	; (8009ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009e4a:	4815      	ldr	r0, [pc, #84]	; (8009ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009e4c:	f000 fd3c 	bl	800a8c8 <iprintf>
          LWIP_ASSERT("sanity check",
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d106      	bne.n	8009e6a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8009e5c:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009e5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009e62:	4911      	ldr	r1, [pc, #68]	; (8009ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8009e64:	480e      	ldr	r0, [pc, #56]	; (8009ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009e66:	f000 fd2f 	bl	800a8c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8009e72:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009e74:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8009e78:	490c      	ldr	r1, [pc, #48]	; (8009eac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8009e7a:	4809      	ldr	r0, [pc, #36]	; (8009ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8009e7c:	f000 fd24 	bl	800a8c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	e000      	b.n	8009e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3730      	adds	r7, #48	; 0x30
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	0800cc38 	.word	0x0800cc38
 8009e9c:	0800cd1c 	.word	0x0800cd1c
 8009ea0:	0800cc80 	.word	0x0800cc80
 8009ea4:	0800cd3c 	.word	0x0800cd3c
 8009ea8:	0800cd74 	.word	0x0800cd74
 8009eac:	0800cd84 	.word	0x0800cd84

08009eb0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f003 030f 	and.w	r3, r3, #15
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b14      	cmp	r3, #20
 8009ece:	f040 8167 	bne.w	800a1a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	88db      	ldrh	r3, [r3, #6]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fb fbdd 	bl	8005698 <lwip_htons>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	885b      	ldrh	r3, [r3, #2]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fb fbd1 	bl	8005698 <lwip_htons>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8009efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 030f 	and.w	r3, r3, #15
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8009f0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f0c0 8146 	bcc.w	800a1a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8009f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fc fea5 	bl	8006c74 <pbuf_clen>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009f2e:	4b9f      	ldr	r3, [pc, #636]	; (800a1ac <ip4_reass+0x2fc>)
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	8c3b      	ldrh	r3, [r7, #32]
 8009f36:	4413      	add	r3, r2
 8009f38:	2b0a      	cmp	r3, #10
 8009f3a:	dd10      	ble.n	8009f5e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009f3c:	8c3b      	ldrh	r3, [r7, #32]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f42:	f7ff fd81 	bl	8009a48 <ip_reass_remove_oldest_datagram>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 812d 	beq.w	800a1a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009f4e:	4b97      	ldr	r3, [pc, #604]	; (800a1ac <ip4_reass+0x2fc>)
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	8c3b      	ldrh	r3, [r7, #32]
 8009f56:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009f58:	2b0a      	cmp	r3, #10
 8009f5a:	f300 8125 	bgt.w	800a1a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009f5e:	4b94      	ldr	r3, [pc, #592]	; (800a1b0 <ip4_reass+0x300>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	633b      	str	r3, [r7, #48]	; 0x30
 8009f64:	e015      	b.n	8009f92 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	695a      	ldr	r2, [r3, #20]
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d10c      	bne.n	8009f8c <ip4_reass+0xdc>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d106      	bne.n	8009f8c <ip4_reass+0xdc>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	899a      	ldrh	r2, [r3, #12]
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	889b      	ldrh	r3, [r3, #4]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d006      	beq.n	8009f9a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	633b      	str	r3, [r7, #48]	; 0x30
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e6      	bne.n	8009f66 <ip4_reass+0xb6>
 8009f98:	e000      	b.n	8009f9c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8009f9a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8009fa2:	8c3b      	ldrh	r3, [r7, #32]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa8:	f7ff fdb0 	bl	8009b0c <ip_reass_enqueue_new_datagram>
 8009fac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d11c      	bne.n	8009fee <ip4_reass+0x13e>
      goto nullreturn;
 8009fb4:	e109      	b.n	800a1ca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	88db      	ldrh	r3, [r3, #6]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fb fb6b 	bl	8005698 <lwip_htons>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d110      	bne.n	8009fee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	89db      	ldrh	r3, [r3, #14]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fb fb61 	bl	8005698 <lwip_htons>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d006      	beq.n	8009fee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	2214      	movs	r2, #20
 8009fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fbad 	bl	800a748 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	88db      	ldrh	r3, [r3, #6]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bf0c      	ite	eq
 8009ffc:	2301      	moveq	r3, #1
 8009ffe:	2300      	movne	r3, #0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00e      	beq.n	800a028 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a00a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a00e:	4413      	add	r3, r2
 800a010:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a012:	8b7a      	ldrh	r2, [r7, #26]
 800a014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a016:	429a      	cmp	r2, r3
 800a018:	f0c0 80a0 	bcc.w	800a15c <ip4_reass+0x2ac>
 800a01c:	8b7b      	ldrh	r3, [r7, #26]
 800a01e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a022:	4293      	cmp	r3, r2
 800a024:	f200 809a 	bhi.w	800a15c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a02e:	f7ff fdd5 	bl	8009bdc <ip_reass_chain_frag_into_datagram_and_validate>
 800a032:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	f000 8091 	beq.w	800a160 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a03e:	4b5b      	ldr	r3, [pc, #364]	; (800a1ac <ip4_reass+0x2fc>)
 800a040:	881a      	ldrh	r2, [r3, #0]
 800a042:	8c3b      	ldrh	r3, [r7, #32]
 800a044:	4413      	add	r3, r2
 800a046:	b29a      	uxth	r2, r3
 800a048:	4b58      	ldr	r3, [pc, #352]	; (800a1ac <ip4_reass+0x2fc>)
 800a04a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a052:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a056:	4413      	add	r3, r2
 800a058:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	8a7a      	ldrh	r2, [r7, #18]
 800a05e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	7f9b      	ldrb	r3, [r3, #30]
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d171      	bne.n	800a158 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	8b9b      	ldrh	r3, [r3, #28]
 800a078:	3314      	adds	r3, #20
 800a07a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	3308      	adds	r3, #8
 800a092:	2214      	movs	r2, #20
 800a094:	4619      	mov	r1, r3
 800a096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a098:	f000 fb56 	bl	800a748 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a09c:	8a3b      	ldrh	r3, [r7, #16]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fb fafa 	bl	8005698 <lwip_htons>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	719a      	strb	r2, [r3, #6]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	729a      	strb	r2, [r3, #10]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a0c6:	e00d      	b.n	800a0e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a0ce:	2114      	movs	r1, #20
 800a0d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a0d2:	f7fc fcc1 	bl	8006a58 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a0d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7fc fe05 	bl	8006ce8 <pbuf_cat>
      r = iprh->next_pbuf;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1ee      	bne.n	800a0c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a0ea:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <ip4_reass+0x300>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d102      	bne.n	800a0fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0f8:	e010      	b.n	800a11c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a0fa:	4b2d      	ldr	r3, [pc, #180]	; (800a1b0 <ip4_reass+0x300>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a100:	e007      	b.n	800a112 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a108:	429a      	cmp	r2, r3
 800a10a:	d006      	beq.n	800a11a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f4      	bne.n	800a102 <ip4_reass+0x252>
 800a118:	e000      	b.n	800a11c <ip4_reass+0x26c>
          break;
 800a11a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a11c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a11e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a120:	f7ff fd2e 	bl	8009b80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7fc fda5 	bl	8006c74 <pbuf_clen>
 800a12a:	4603      	mov	r3, r0
 800a12c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a12e:	4b1f      	ldr	r3, [pc, #124]	; (800a1ac <ip4_reass+0x2fc>)
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	8c3a      	ldrh	r2, [r7, #32]
 800a134:	429a      	cmp	r2, r3
 800a136:	d906      	bls.n	800a146 <ip4_reass+0x296>
 800a138:	4b1e      	ldr	r3, [pc, #120]	; (800a1b4 <ip4_reass+0x304>)
 800a13a:	f240 229b 	movw	r2, #667	; 0x29b
 800a13e:	491e      	ldr	r1, [pc, #120]	; (800a1b8 <ip4_reass+0x308>)
 800a140:	481e      	ldr	r0, [pc, #120]	; (800a1bc <ip4_reass+0x30c>)
 800a142:	f000 fbc1 	bl	800a8c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a146:	4b19      	ldr	r3, [pc, #100]	; (800a1ac <ip4_reass+0x2fc>)
 800a148:	881a      	ldrh	r2, [r3, #0]
 800a14a:	8c3b      	ldrh	r3, [r7, #32]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	b29a      	uxth	r2, r3
 800a150:	4b16      	ldr	r3, [pc, #88]	; (800a1ac <ip4_reass+0x2fc>)
 800a152:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	e03c      	b.n	800a1d2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	e03a      	b.n	800a1d2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800a15c:	bf00      	nop
 800a15e:	e000      	b.n	800a162 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800a160:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <ip4_reass+0x2c6>
 800a168:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <ip4_reass+0x304>)
 800a16a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a16e:	4914      	ldr	r1, [pc, #80]	; (800a1c0 <ip4_reass+0x310>)
 800a170:	4812      	ldr	r0, [pc, #72]	; (800a1bc <ip4_reass+0x30c>)
 800a172:	f000 fba9 	bl	800a8c8 <iprintf>
  if (ipr->p == NULL) {
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d124      	bne.n	800a1c8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a17e:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <ip4_reass+0x300>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a184:	429a      	cmp	r2, r3
 800a186:	d006      	beq.n	800a196 <ip4_reass+0x2e6>
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <ip4_reass+0x304>)
 800a18a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a18e:	490d      	ldr	r1, [pc, #52]	; (800a1c4 <ip4_reass+0x314>)
 800a190:	480a      	ldr	r0, [pc, #40]	; (800a1bc <ip4_reass+0x30c>)
 800a192:	f000 fb99 	bl	800a8c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a196:	2100      	movs	r1, #0
 800a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19a:	f7ff fcf1 	bl	8009b80 <ip_reass_dequeue_datagram>
 800a19e:	e014      	b.n	800a1ca <ip4_reass+0x31a>
    goto nullreturn;
 800a1a0:	bf00      	nop
 800a1a2:	e012      	b.n	800a1ca <ip4_reass+0x31a>
    goto nullreturn;
 800a1a4:	bf00      	nop
 800a1a6:	e010      	b.n	800a1ca <ip4_reass+0x31a>
      goto nullreturn;
 800a1a8:	bf00      	nop
 800a1aa:	e00e      	b.n	800a1ca <ip4_reass+0x31a>
 800a1ac:	200001e4 	.word	0x200001e4
 800a1b0:	200001e0 	.word	0x200001e0
 800a1b4:	0800cc38 	.word	0x0800cc38
 800a1b8:	0800cda8 	.word	0x0800cda8
 800a1bc:	0800cc80 	.word	0x0800cc80
 800a1c0:	0800cdc4 	.word	0x0800cdc4
 800a1c4:	0800cdd0 	.word	0x0800cdd0
  }

nullreturn:
 800a1c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7fc fcca 	bl	8006b64 <pbuf_free>
  return NULL;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3738      	adds	r7, #56	; 0x38
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop

0800a1dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a1e0:	2002      	movs	r0, #2
 800a1e2:	f7fb fe93 	bl	8005f0c <memp_malloc>
 800a1e6:	4603      	mov	r3, r0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a1fa:	4b07      	ldr	r3, [pc, #28]	; (800a218 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a1fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a200:	4906      	ldr	r1, [pc, #24]	; (800a21c <ip_frag_free_pbuf_custom_ref+0x30>)
 800a202:	4807      	ldr	r0, [pc, #28]	; (800a220 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a204:	f000 fb60 	bl	800a8c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	2002      	movs	r0, #2
 800a20c:	f7fb feca 	bl	8005fa4 <memp_free>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	0800cc38 	.word	0x0800cc38
 800a21c:	0800cdf0 	.word	0x0800cdf0
 800a220:	0800cc80 	.word	0x0800cc80

0800a224 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <ipfrag_free_pbuf_custom+0x20>
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <ipfrag_free_pbuf_custom+0x58>)
 800a238:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a23c:	4910      	ldr	r1, [pc, #64]	; (800a280 <ipfrag_free_pbuf_custom+0x5c>)
 800a23e:	4811      	ldr	r0, [pc, #68]	; (800a284 <ipfrag_free_pbuf_custom+0x60>)
 800a240:	f000 fb42 	bl	800a8c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d006      	beq.n	800a25a <ipfrag_free_pbuf_custom+0x36>
 800a24c:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <ipfrag_free_pbuf_custom+0x58>)
 800a24e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a252:	490d      	ldr	r1, [pc, #52]	; (800a288 <ipfrag_free_pbuf_custom+0x64>)
 800a254:	480b      	ldr	r0, [pc, #44]	; (800a284 <ipfrag_free_pbuf_custom+0x60>)
 800a256:	f000 fb37 	bl	800a8c8 <iprintf>
  if (pcr->original != NULL) {
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	4618      	mov	r0, r3
 800a268:	f7fc fc7c 	bl	8006b64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f7ff ffbd 	bl	800a1ec <ip_frag_free_pbuf_custom_ref>
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	0800cc38 	.word	0x0800cc38
 800a280:	0800cdfc 	.word	0x0800cdfc
 800a284:	0800cc80 	.word	0x0800cc80
 800a288:	0800ce08 	.word	0x0800ce08

0800a28c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b094      	sub	sp, #80	; 0x50
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2a2:	3b14      	subs	r3, #20
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da00      	bge.n	800a2aa <ip4_frag+0x1e>
 800a2a8:	3307      	adds	r3, #7
 800a2aa:	10db      	asrs	r3, r3, #3
 800a2ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a2ae:	2314      	movs	r3, #20
 800a2b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b14      	cmp	r3, #20
 800a2cc:	d002      	beq.n	800a2d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a2ce:	f06f 0305 	mvn.w	r3, #5
 800a2d2:	e110      	b.n	800a4f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	895b      	ldrh	r3, [r3, #10]
 800a2d8:	2b13      	cmp	r3, #19
 800a2da:	d809      	bhi.n	800a2f0 <ip4_frag+0x64>
 800a2dc:	4b88      	ldr	r3, [pc, #544]	; (800a500 <ip4_frag+0x274>)
 800a2de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a2e2:	4988      	ldr	r1, [pc, #544]	; (800a504 <ip4_frag+0x278>)
 800a2e4:	4888      	ldr	r0, [pc, #544]	; (800a508 <ip4_frag+0x27c>)
 800a2e6:	f000 faef 	bl	800a8c8 <iprintf>
 800a2ea:	f06f 0305 	mvn.w	r3, #5
 800a2ee:	e102      	b.n	800a4f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	88db      	ldrh	r3, [r3, #6]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fb f9ce 	bl	8005698 <lwip_htons>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a300:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a30a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	891b      	ldrh	r3, [r3, #8]
 800a316:	3b14      	subs	r3, #20
 800a318:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800a31c:	e0e1      	b.n	800a4e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a31e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	b29b      	uxth	r3, r3
 800a324:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a328:	4293      	cmp	r3, r2
 800a32a:	bf28      	it	cs
 800a32c:	4613      	movcs	r3, r2
 800a32e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a330:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a334:	2114      	movs	r1, #20
 800a336:	200e      	movs	r0, #14
 800a338:	f7fc f932 	bl	80065a0 <pbuf_alloc>
 800a33c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80d5 	beq.w	800a4f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	895b      	ldrh	r3, [r3, #10]
 800a34a:	2b13      	cmp	r3, #19
 800a34c:	d806      	bhi.n	800a35c <ip4_frag+0xd0>
 800a34e:	4b6c      	ldr	r3, [pc, #432]	; (800a500 <ip4_frag+0x274>)
 800a350:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a354:	496d      	ldr	r1, [pc, #436]	; (800a50c <ip4_frag+0x280>)
 800a356:	486c      	ldr	r0, [pc, #432]	; (800a508 <ip4_frag+0x27c>)
 800a358:	f000 fab6 	bl	800a8c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2214      	movs	r2, #20
 800a362:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a364:	4618      	mov	r0, r3
 800a366:	f000 f9ef 	bl	800a748 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800a370:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a372:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800a376:	e064      	b.n	800a442 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	895a      	ldrh	r2, [r3, #10]
 800a37c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	895b      	ldrh	r3, [r3, #10]
 800a386:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a388:	429a      	cmp	r2, r3
 800a38a:	d906      	bls.n	800a39a <ip4_frag+0x10e>
 800a38c:	4b5c      	ldr	r3, [pc, #368]	; (800a500 <ip4_frag+0x274>)
 800a38e:	f240 322d 	movw	r2, #813	; 0x32d
 800a392:	495f      	ldr	r1, [pc, #380]	; (800a510 <ip4_frag+0x284>)
 800a394:	485c      	ldr	r0, [pc, #368]	; (800a508 <ip4_frag+0x27c>)
 800a396:	f000 fa97 	bl	800a8c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a39a:	8bfa      	ldrh	r2, [r7, #30]
 800a39c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	bf28      	it	cs
 800a3a4:	4613      	movcs	r3, r2
 800a3a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a3aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d105      	bne.n	800a3be <ip4_frag+0x132>
        poff = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
        continue;
 800a3bc:	e041      	b.n	800a442 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a3be:	f7ff ff0d 	bl	800a1dc <ip_frag_alloc_pbuf_custom_ref>
 800a3c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d103      	bne.n	800a3d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800a3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3cc:	f7fc fbca 	bl	8006b64 <pbuf_free>
        goto memerr;
 800a3d0:	e08f      	b.n	800a4f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a3d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a3d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3da:	4413      	add	r3, r2
 800a3dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800a3e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a3e4:	9201      	str	r2, [sp, #4]
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2241      	movs	r2, #65	; 0x41
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f7fc f9ff 	bl	80067f0 <pbuf_alloced_custom>
 800a3f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a3fa:	69b8      	ldr	r0, [r7, #24]
 800a3fc:	f7ff fef6 	bl	800a1ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a402:	f7fc fbaf 	bl	8006b64 <pbuf_free>
        goto memerr;
 800a406:	e074      	b.n	800a4f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f7fc fc4b 	bl	8006ca4 <pbuf_ref>
      pcr->original = p;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	4a3f      	ldr	r2, [pc, #252]	; (800a514 <ip4_frag+0x288>)
 800a418:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a41e:	f7fc fc63 	bl	8006ce8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a422:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a426:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800a430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a434:	2b00      	cmp	r3, #0
 800a436:	d004      	beq.n	800a442 <ip4_frag+0x1b6>
        poff = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800a442:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a446:	2b00      	cmp	r3, #0
 800a448:	d196      	bne.n	800a378 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a44a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a44c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a450:	4413      	add	r3, r2
 800a452:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a458:	f1a3 0213 	sub.w	r2, r3, #19
 800a45c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a460:	429a      	cmp	r2, r3
 800a462:	bfcc      	ite	gt
 800a464:	2301      	movgt	r3, #1
 800a466:	2300      	movle	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a46c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a474:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <ip4_frag+0x1f6>
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a488:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a48a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fb f903 	bl	8005698 <lwip_htons>
 800a492:	4603      	mov	r3, r0
 800a494:	461a      	mov	r2, r3
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a49a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a49c:	3314      	adds	r3, #20
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fb f8f9 	bl	8005698 <lwip_htons>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	729a      	strb	r2, [r3, #10]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4c0:	68b8      	ldr	r0, [r7, #8]
 800a4c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a4c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4c6:	f7fc fb4d 	bl	8006b64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a4ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800a4d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a4da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a4dc:	4413      	add	r3, r2
 800a4de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800a4e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f47f af19 	bne.w	800a31e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e002      	b.n	800a4f6 <ip4_frag+0x26a>
      goto memerr;
 800a4f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800a4f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3748      	adds	r7, #72	; 0x48
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	0800cc38 	.word	0x0800cc38
 800a504:	0800ce14 	.word	0x0800ce14
 800a508:	0800cc80 	.word	0x0800cc80
 800a50c:	0800ce30 	.word	0x0800ce30
 800a510:	0800ce50 	.word	0x0800ce50
 800a514:	0800a225 	.word	0x0800a225

0800a518 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a522:	230e      	movs	r3, #14
 800a524:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	895b      	ldrh	r3, [r3, #10]
 800a52a:	2b0e      	cmp	r3, #14
 800a52c:	d96e      	bls.n	800a60c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7bdb      	ldrb	r3, [r3, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a53c:	3301      	adds	r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	7b1a      	ldrb	r2, [r3, #12]
 800a54e:	7b5b      	ldrb	r3, [r3, #13]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	4313      	orrs	r3, r2
 800a554:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d023      	beq.n	800a5aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d10f      	bne.n	800a58a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d11b      	bne.n	800a5aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a576:	2b5e      	cmp	r3, #94	; 0x5e
 800a578:	d117      	bne.n	800a5aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	7b5b      	ldrb	r3, [r3, #13]
 800a57e:	f043 0310 	orr.w	r3, r3, #16
 800a582:	b2da      	uxtb	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	735a      	strb	r2, [r3, #13]
 800a588:	e00f      	b.n	800a5aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2206      	movs	r2, #6
 800a58e:	4928      	ldr	r1, [pc, #160]	; (800a630 <ethernet_input+0x118>)
 800a590:	4618      	mov	r0, r3
 800a592:	f000 f8cb 	bl	800a72c <memcmp>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7b5b      	ldrb	r3, [r3, #13]
 800a5a0:	f043 0308 	orr.w	r3, r3, #8
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a5aa:	89fb      	ldrh	r3, [r7, #14]
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d003      	beq.n	800a5b8 <ethernet_input+0xa0>
 800a5b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a5b4:	d014      	beq.n	800a5e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a5b6:	e032      	b.n	800a61e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d024      	beq.n	800a610 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a5c6:	8afb      	ldrh	r3, [r7, #22]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fc fa44 	bl	8006a58 <pbuf_remove_header>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d11e      	bne.n	800a614 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7fe ff31 	bl	8009440 <ip4_input>
      break;
 800a5de:	e013      	b.n	800a608 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d014      	beq.n	800a618 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a5ee:	8afb      	ldrh	r3, [r7, #22]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7fc fa30 	bl	8006a58 <pbuf_remove_header>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10e      	bne.n	800a61c <ethernet_input+0x104>
        etharp_input(p, netif);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7fe f8d1 	bl	80087a8 <etharp_input>
      break;
 800a606:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	e00c      	b.n	800a626 <ethernet_input+0x10e>
    goto free_and_return;
 800a60c:	bf00      	nop
 800a60e:	e006      	b.n	800a61e <ethernet_input+0x106>
        goto free_and_return;
 800a610:	bf00      	nop
 800a612:	e004      	b.n	800a61e <ethernet_input+0x106>
        goto free_and_return;
 800a614:	bf00      	nop
 800a616:	e002      	b.n	800a61e <ethernet_input+0x106>
        goto free_and_return;
 800a618:	bf00      	nop
 800a61a:	e000      	b.n	800a61e <ethernet_input+0x106>
        goto free_and_return;
 800a61c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7fc faa0 	bl	8006b64 <pbuf_free>
  return ERR_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	0800cf88 	.word	0x0800cf88

0800a634 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a642:	8c3b      	ldrh	r3, [r7, #32]
 800a644:	4618      	mov	r0, r3
 800a646:	f7fb f827 	bl	8005698 <lwip_htons>
 800a64a:	4603      	mov	r3, r0
 800a64c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a64e:	210e      	movs	r1, #14
 800a650:	68b8      	ldr	r0, [r7, #8]
 800a652:	f7fc f9f1 	bl	8006a38 <pbuf_add_header>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d125      	bne.n	800a6a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	8afa      	ldrh	r2, [r7, #22]
 800a666:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2206      	movs	r2, #6
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f86a 	bl	800a748 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	3306      	adds	r3, #6
 800a678:	2206      	movs	r2, #6
 800a67a:	6879      	ldr	r1, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f863 	bl	800a748 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a688:	2b06      	cmp	r3, #6
 800a68a:	d006      	beq.n	800a69a <ethernet_output+0x66>
 800a68c:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <ethernet_output+0x84>)
 800a68e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a692:	490a      	ldr	r1, [pc, #40]	; (800a6bc <ethernet_output+0x88>)
 800a694:	480a      	ldr	r0, [pc, #40]	; (800a6c0 <ethernet_output+0x8c>)
 800a696:	f000 f917 	bl	800a8c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	68b9      	ldr	r1, [r7, #8]
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	4798      	blx	r3
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	e002      	b.n	800a6ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800a6a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800a6aa:	f06f 0301 	mvn.w	r3, #1
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0800ce60 	.word	0x0800ce60
 800a6bc:	0800ce98 	.word	0x0800ce98
 800a6c0:	0800cecc 	.word	0x0800cecc

0800a6c4 <__libc_init_array>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	4d0d      	ldr	r5, [pc, #52]	; (800a6fc <__libc_init_array+0x38>)
 800a6c8:	4c0d      	ldr	r4, [pc, #52]	; (800a700 <__libc_init_array+0x3c>)
 800a6ca:	1b64      	subs	r4, r4, r5
 800a6cc:	10a4      	asrs	r4, r4, #2
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	42a6      	cmp	r6, r4
 800a6d2:	d109      	bne.n	800a6e8 <__libc_init_array+0x24>
 800a6d4:	4d0b      	ldr	r5, [pc, #44]	; (800a704 <__libc_init_array+0x40>)
 800a6d6:	4c0c      	ldr	r4, [pc, #48]	; (800a708 <__libc_init_array+0x44>)
 800a6d8:	f001 f85e 	bl	800b798 <_init>
 800a6dc:	1b64      	subs	r4, r4, r5
 800a6de:	10a4      	asrs	r4, r4, #2
 800a6e0:	2600      	movs	r6, #0
 800a6e2:	42a6      	cmp	r6, r4
 800a6e4:	d105      	bne.n	800a6f2 <__libc_init_array+0x2e>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ec:	4798      	blx	r3
 800a6ee:	3601      	adds	r6, #1
 800a6f0:	e7ee      	b.n	800a6d0 <__libc_init_array+0xc>
 800a6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f6:	4798      	blx	r3
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	e7f2      	b.n	800a6e2 <__libc_init_array+0x1e>
 800a6fc:	0800d0ec 	.word	0x0800d0ec
 800a700:	0800d0ec 	.word	0x0800d0ec
 800a704:	0800d0ec 	.word	0x0800d0ec
 800a708:	0800d0f0 	.word	0x0800d0f0

0800a70c <malloc>:
 800a70c:	4b02      	ldr	r3, [pc, #8]	; (800a718 <malloc+0xc>)
 800a70e:	4601      	mov	r1, r0
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	f000 b87f 	b.w	800a814 <_malloc_r>
 800a716:	bf00      	nop
 800a718:	2000000c 	.word	0x2000000c

0800a71c <free>:
 800a71c:	4b02      	ldr	r3, [pc, #8]	; (800a728 <free+0xc>)
 800a71e:	4601      	mov	r1, r0
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f000 b827 	b.w	800a774 <_free_r>
 800a726:	bf00      	nop
 800a728:	2000000c 	.word	0x2000000c

0800a72c <memcmp>:
 800a72c:	b530      	push	{r4, r5, lr}
 800a72e:	3901      	subs	r1, #1
 800a730:	2400      	movs	r4, #0
 800a732:	42a2      	cmp	r2, r4
 800a734:	d101      	bne.n	800a73a <memcmp+0xe>
 800a736:	2000      	movs	r0, #0
 800a738:	e005      	b.n	800a746 <memcmp+0x1a>
 800a73a:	5d03      	ldrb	r3, [r0, r4]
 800a73c:	3401      	adds	r4, #1
 800a73e:	5d0d      	ldrb	r5, [r1, r4]
 800a740:	42ab      	cmp	r3, r5
 800a742:	d0f6      	beq.n	800a732 <memcmp+0x6>
 800a744:	1b58      	subs	r0, r3, r5
 800a746:	bd30      	pop	{r4, r5, pc}

0800a748 <memcpy>:
 800a748:	440a      	add	r2, r1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a750:	d100      	bne.n	800a754 <memcpy+0xc>
 800a752:	4770      	bx	lr
 800a754:	b510      	push	{r4, lr}
 800a756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a75e:	4291      	cmp	r1, r2
 800a760:	d1f9      	bne.n	800a756 <memcpy+0xe>
 800a762:	bd10      	pop	{r4, pc}

0800a764 <memset>:
 800a764:	4402      	add	r2, r0
 800a766:	4603      	mov	r3, r0
 800a768:	4293      	cmp	r3, r2
 800a76a:	d100      	bne.n	800a76e <memset+0xa>
 800a76c:	4770      	bx	lr
 800a76e:	f803 1b01 	strb.w	r1, [r3], #1
 800a772:	e7f9      	b.n	800a768 <memset+0x4>

0800a774 <_free_r>:
 800a774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a776:	2900      	cmp	r1, #0
 800a778:	d048      	beq.n	800a80c <_free_r+0x98>
 800a77a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a77e:	9001      	str	r0, [sp, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	f1a1 0404 	sub.w	r4, r1, #4
 800a786:	bfb8      	it	lt
 800a788:	18e4      	addlt	r4, r4, r3
 800a78a:	f000 fa2d 	bl	800abe8 <__malloc_lock>
 800a78e:	4a20      	ldr	r2, [pc, #128]	; (800a810 <_free_r+0x9c>)
 800a790:	9801      	ldr	r0, [sp, #4]
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	4615      	mov	r5, r2
 800a796:	b933      	cbnz	r3, 800a7a6 <_free_r+0x32>
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	6014      	str	r4, [r2, #0]
 800a79c:	b003      	add	sp, #12
 800a79e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a2:	f000 ba27 	b.w	800abf4 <__malloc_unlock>
 800a7a6:	42a3      	cmp	r3, r4
 800a7a8:	d90b      	bls.n	800a7c2 <_free_r+0x4e>
 800a7aa:	6821      	ldr	r1, [r4, #0]
 800a7ac:	1862      	adds	r2, r4, r1
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	bf04      	itt	eq
 800a7b2:	681a      	ldreq	r2, [r3, #0]
 800a7b4:	685b      	ldreq	r3, [r3, #4]
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	bf04      	itt	eq
 800a7ba:	1852      	addeq	r2, r2, r1
 800a7bc:	6022      	streq	r2, [r4, #0]
 800a7be:	602c      	str	r4, [r5, #0]
 800a7c0:	e7ec      	b.n	800a79c <_free_r+0x28>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	b10b      	cbz	r3, 800a7cc <_free_r+0x58>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x4e>
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	1855      	adds	r5, r2, r1
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x78>
 800a7d4:	6824      	ldr	r4, [r4, #0]
 800a7d6:	4421      	add	r1, r4
 800a7d8:	1854      	adds	r4, r2, r1
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	d1dd      	bne.n	800a79c <_free_r+0x28>
 800a7e0:	681c      	ldr	r4, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
 800a7e6:	4421      	add	r1, r4
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	e7d7      	b.n	800a79c <_free_r+0x28>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x80>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	e7d3      	b.n	800a79c <_free_r+0x28>
 800a7f4:	6825      	ldr	r5, [r4, #0]
 800a7f6:	1961      	adds	r1, r4, r5
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1949      	addeq	r1, r1, r5
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	6054      	str	r4, [r2, #4]
 800a80a:	e7c7      	b.n	800a79c <_free_r+0x28>
 800a80c:	b003      	add	sp, #12
 800a80e:	bd30      	pop	{r4, r5, pc}
 800a810:	200001e8 	.word	0x200001e8

0800a814 <_malloc_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	1ccd      	adds	r5, r1, #3
 800a818:	f025 0503 	bic.w	r5, r5, #3
 800a81c:	3508      	adds	r5, #8
 800a81e:	2d0c      	cmp	r5, #12
 800a820:	bf38      	it	cc
 800a822:	250c      	movcc	r5, #12
 800a824:	2d00      	cmp	r5, #0
 800a826:	4606      	mov	r6, r0
 800a828:	db01      	blt.n	800a82e <_malloc_r+0x1a>
 800a82a:	42a9      	cmp	r1, r5
 800a82c:	d903      	bls.n	800a836 <_malloc_r+0x22>
 800a82e:	230c      	movs	r3, #12
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	2000      	movs	r0, #0
 800a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a836:	f000 f9d7 	bl	800abe8 <__malloc_lock>
 800a83a:	4921      	ldr	r1, [pc, #132]	; (800a8c0 <_malloc_r+0xac>)
 800a83c:	680a      	ldr	r2, [r1, #0]
 800a83e:	4614      	mov	r4, r2
 800a840:	b99c      	cbnz	r4, 800a86a <_malloc_r+0x56>
 800a842:	4f20      	ldr	r7, [pc, #128]	; (800a8c4 <_malloc_r+0xb0>)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	b923      	cbnz	r3, 800a852 <_malloc_r+0x3e>
 800a848:	4621      	mov	r1, r4
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 f894 	bl	800a978 <_sbrk_r>
 800a850:	6038      	str	r0, [r7, #0]
 800a852:	4629      	mov	r1, r5
 800a854:	4630      	mov	r0, r6
 800a856:	f000 f88f 	bl	800a978 <_sbrk_r>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d123      	bne.n	800a8a6 <_malloc_r+0x92>
 800a85e:	230c      	movs	r3, #12
 800a860:	6033      	str	r3, [r6, #0]
 800a862:	4630      	mov	r0, r6
 800a864:	f000 f9c6 	bl	800abf4 <__malloc_unlock>
 800a868:	e7e3      	b.n	800a832 <_malloc_r+0x1e>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	1b5b      	subs	r3, r3, r5
 800a86e:	d417      	bmi.n	800a8a0 <_malloc_r+0x8c>
 800a870:	2b0b      	cmp	r3, #11
 800a872:	d903      	bls.n	800a87c <_malloc_r+0x68>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	441c      	add	r4, r3
 800a878:	6025      	str	r5, [r4, #0]
 800a87a:	e004      	b.n	800a886 <_malloc_r+0x72>
 800a87c:	6863      	ldr	r3, [r4, #4]
 800a87e:	42a2      	cmp	r2, r4
 800a880:	bf0c      	ite	eq
 800a882:	600b      	streq	r3, [r1, #0]
 800a884:	6053      	strne	r3, [r2, #4]
 800a886:	4630      	mov	r0, r6
 800a888:	f000 f9b4 	bl	800abf4 <__malloc_unlock>
 800a88c:	f104 000b 	add.w	r0, r4, #11
 800a890:	1d23      	adds	r3, r4, #4
 800a892:	f020 0007 	bic.w	r0, r0, #7
 800a896:	1ac2      	subs	r2, r0, r3
 800a898:	d0cc      	beq.n	800a834 <_malloc_r+0x20>
 800a89a:	1a1b      	subs	r3, r3, r0
 800a89c:	50a3      	str	r3, [r4, r2]
 800a89e:	e7c9      	b.n	800a834 <_malloc_r+0x20>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	6864      	ldr	r4, [r4, #4]
 800a8a4:	e7cc      	b.n	800a840 <_malloc_r+0x2c>
 800a8a6:	1cc4      	adds	r4, r0, #3
 800a8a8:	f024 0403 	bic.w	r4, r4, #3
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d0e3      	beq.n	800a878 <_malloc_r+0x64>
 800a8b0:	1a21      	subs	r1, r4, r0
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f000 f860 	bl	800a978 <_sbrk_r>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d1dd      	bne.n	800a878 <_malloc_r+0x64>
 800a8bc:	e7cf      	b.n	800a85e <_malloc_r+0x4a>
 800a8be:	bf00      	nop
 800a8c0:	200001e8 	.word	0x200001e8
 800a8c4:	200001ec 	.word	0x200001ec

0800a8c8 <iprintf>:
 800a8c8:	b40f      	push	{r0, r1, r2, r3}
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <iprintf+0x2c>)
 800a8cc:	b513      	push	{r0, r1, r4, lr}
 800a8ce:	681c      	ldr	r4, [r3, #0]
 800a8d0:	b124      	cbz	r4, 800a8dc <iprintf+0x14>
 800a8d2:	69a3      	ldr	r3, [r4, #24]
 800a8d4:	b913      	cbnz	r3, 800a8dc <iprintf+0x14>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 f8d4 	bl	800aa84 <__sinit>
 800a8dc:	ab05      	add	r3, sp, #20
 800a8de:	9a04      	ldr	r2, [sp, #16]
 800a8e0:	68a1      	ldr	r1, [r4, #8]
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f9b5 	bl	800ac54 <_vfiprintf_r>
 800a8ea:	b002      	add	sp, #8
 800a8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f0:	b004      	add	sp, #16
 800a8f2:	4770      	bx	lr
 800a8f4:	2000000c 	.word	0x2000000c

0800a8f8 <rand>:
 800a8f8:	4b17      	ldr	r3, [pc, #92]	; (800a958 <rand+0x60>)
 800a8fa:	b510      	push	{r4, lr}
 800a8fc:	681c      	ldr	r4, [r3, #0]
 800a8fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a900:	b9b3      	cbnz	r3, 800a930 <rand+0x38>
 800a902:	2018      	movs	r0, #24
 800a904:	f7ff ff02 	bl	800a70c <malloc>
 800a908:	63a0      	str	r0, [r4, #56]	; 0x38
 800a90a:	b928      	cbnz	r0, 800a918 <rand+0x20>
 800a90c:	4602      	mov	r2, r0
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <rand+0x64>)
 800a910:	4813      	ldr	r0, [pc, #76]	; (800a960 <rand+0x68>)
 800a912:	214e      	movs	r1, #78	; 0x4e
 800a914:	f000 f840 	bl	800a998 <__assert_func>
 800a918:	4a12      	ldr	r2, [pc, #72]	; (800a964 <rand+0x6c>)
 800a91a:	4b13      	ldr	r3, [pc, #76]	; (800a968 <rand+0x70>)
 800a91c:	e9c0 2300 	strd	r2, r3, [r0]
 800a920:	4b12      	ldr	r3, [pc, #72]	; (800a96c <rand+0x74>)
 800a922:	6083      	str	r3, [r0, #8]
 800a924:	230b      	movs	r3, #11
 800a926:	8183      	strh	r3, [r0, #12]
 800a928:	2201      	movs	r2, #1
 800a92a:	2300      	movs	r3, #0
 800a92c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a930:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a932:	480f      	ldr	r0, [pc, #60]	; (800a970 <rand+0x78>)
 800a934:	690a      	ldr	r2, [r1, #16]
 800a936:	694b      	ldr	r3, [r1, #20]
 800a938:	4c0e      	ldr	r4, [pc, #56]	; (800a974 <rand+0x7c>)
 800a93a:	4350      	muls	r0, r2
 800a93c:	fb04 0003 	mla	r0, r4, r3, r0
 800a940:	fba2 3404 	umull	r3, r4, r2, r4
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	4404      	add	r4, r0
 800a948:	f144 0000 	adc.w	r0, r4, #0
 800a94c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a950:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a954:	bd10      	pop	{r4, pc}
 800a956:	bf00      	nop
 800a958:	2000000c 	.word	0x2000000c
 800a95c:	0800cf9c 	.word	0x0800cf9c
 800a960:	0800cfb3 	.word	0x0800cfb3
 800a964:	abcd330e 	.word	0xabcd330e
 800a968:	e66d1234 	.word	0xe66d1234
 800a96c:	0005deec 	.word	0x0005deec
 800a970:	5851f42d 	.word	0x5851f42d
 800a974:	4c957f2d 	.word	0x4c957f2d

0800a978 <_sbrk_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_sbrk_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 f968 	bl	8001c58 <_sbrk>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_sbrk_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_sbrk_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	2000858c 	.word	0x2000858c

0800a998 <__assert_func>:
 800a998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a99a:	4614      	mov	r4, r2
 800a99c:	461a      	mov	r2, r3
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <__assert_func+0x2c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	68d8      	ldr	r0, [r3, #12]
 800a9a6:	b14c      	cbz	r4, 800a9bc <__assert_func+0x24>
 800a9a8:	4b07      	ldr	r3, [pc, #28]	; (800a9c8 <__assert_func+0x30>)
 800a9aa:	9100      	str	r1, [sp, #0]
 800a9ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9b0:	4906      	ldr	r1, [pc, #24]	; (800a9cc <__assert_func+0x34>)
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	f000 f8e4 	bl	800ab80 <fiprintf>
 800a9b8:	f000 fd26 	bl	800b408 <abort>
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <__assert_func+0x38>)
 800a9be:	461c      	mov	r4, r3
 800a9c0:	e7f3      	b.n	800a9aa <__assert_func+0x12>
 800a9c2:	bf00      	nop
 800a9c4:	2000000c 	.word	0x2000000c
 800a9c8:	0800d012 	.word	0x0800d012
 800a9cc:	0800d01f 	.word	0x0800d01f
 800a9d0:	0800d04d 	.word	0x0800d04d

0800a9d4 <std>:
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	4604      	mov	r4, r0
 800a9da:	e9c0 3300 	strd	r3, r3, [r0]
 800a9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9e2:	6083      	str	r3, [r0, #8]
 800a9e4:	8181      	strh	r1, [r0, #12]
 800a9e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a9e8:	81c2      	strh	r2, [r0, #14]
 800a9ea:	6183      	str	r3, [r0, #24]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	2208      	movs	r2, #8
 800a9f0:	305c      	adds	r0, #92	; 0x5c
 800a9f2:	f7ff feb7 	bl	800a764 <memset>
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <std+0x38>)
 800a9f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <std+0x3c>)
 800a9fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <std+0x40>)
 800aa00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <std+0x44>)
 800aa04:	6224      	str	r4, [r4, #32]
 800aa06:	6323      	str	r3, [r4, #48]	; 0x30
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800b1dd 	.word	0x0800b1dd
 800aa10:	0800b1ff 	.word	0x0800b1ff
 800aa14:	0800b237 	.word	0x0800b237
 800aa18:	0800b25b 	.word	0x0800b25b

0800aa1c <_cleanup_r>:
 800aa1c:	4901      	ldr	r1, [pc, #4]	; (800aa24 <_cleanup_r+0x8>)
 800aa1e:	f000 b8c1 	b.w	800aba4 <_fwalk_reent>
 800aa22:	bf00      	nop
 800aa24:	0800b545 	.word	0x0800b545

0800aa28 <__sfmoreglue>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	1e4a      	subs	r2, r1, #1
 800aa2c:	2568      	movs	r5, #104	; 0x68
 800aa2e:	4355      	muls	r5, r2
 800aa30:	460e      	mov	r6, r1
 800aa32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa36:	f7ff feed 	bl	800a814 <_malloc_r>
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	b140      	cbz	r0, 800aa50 <__sfmoreglue+0x28>
 800aa3e:	2100      	movs	r1, #0
 800aa40:	e9c0 1600 	strd	r1, r6, [r0]
 800aa44:	300c      	adds	r0, #12
 800aa46:	60a0      	str	r0, [r4, #8]
 800aa48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa4c:	f7ff fe8a 	bl	800a764 <memset>
 800aa50:	4620      	mov	r0, r4
 800aa52:	bd70      	pop	{r4, r5, r6, pc}

0800aa54 <__sfp_lock_acquire>:
 800aa54:	4801      	ldr	r0, [pc, #4]	; (800aa5c <__sfp_lock_acquire+0x8>)
 800aa56:	f000 b8c5 	b.w	800abe4 <__retarget_lock_acquire_recursive>
 800aa5a:	bf00      	nop
 800aa5c:	20008598 	.word	0x20008598

0800aa60 <__sfp_lock_release>:
 800aa60:	4801      	ldr	r0, [pc, #4]	; (800aa68 <__sfp_lock_release+0x8>)
 800aa62:	f000 b8c0 	b.w	800abe6 <__retarget_lock_release_recursive>
 800aa66:	bf00      	nop
 800aa68:	20008598 	.word	0x20008598

0800aa6c <__sinit_lock_acquire>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	; (800aa74 <__sinit_lock_acquire+0x8>)
 800aa6e:	f000 b8b9 	b.w	800abe4 <__retarget_lock_acquire_recursive>
 800aa72:	bf00      	nop
 800aa74:	20008593 	.word	0x20008593

0800aa78 <__sinit_lock_release>:
 800aa78:	4801      	ldr	r0, [pc, #4]	; (800aa80 <__sinit_lock_release+0x8>)
 800aa7a:	f000 b8b4 	b.w	800abe6 <__retarget_lock_release_recursive>
 800aa7e:	bf00      	nop
 800aa80:	20008593 	.word	0x20008593

0800aa84 <__sinit>:
 800aa84:	b510      	push	{r4, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	f7ff fff0 	bl	800aa6c <__sinit_lock_acquire>
 800aa8c:	69a3      	ldr	r3, [r4, #24]
 800aa8e:	b11b      	cbz	r3, 800aa98 <__sinit+0x14>
 800aa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa94:	f7ff bff0 	b.w	800aa78 <__sinit_lock_release>
 800aa98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa9c:	6523      	str	r3, [r4, #80]	; 0x50
 800aa9e:	4b13      	ldr	r3, [pc, #76]	; (800aaec <__sinit+0x68>)
 800aaa0:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <__sinit+0x6c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaa6:	42a3      	cmp	r3, r4
 800aaa8:	bf04      	itt	eq
 800aaaa:	2301      	moveq	r3, #1
 800aaac:	61a3      	streq	r3, [r4, #24]
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f820 	bl	800aaf4 <__sfp>
 800aab4:	6060      	str	r0, [r4, #4]
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 f81c 	bl	800aaf4 <__sfp>
 800aabc:	60a0      	str	r0, [r4, #8]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 f818 	bl	800aaf4 <__sfp>
 800aac4:	2200      	movs	r2, #0
 800aac6:	60e0      	str	r0, [r4, #12]
 800aac8:	2104      	movs	r1, #4
 800aaca:	6860      	ldr	r0, [r4, #4]
 800aacc:	f7ff ff82 	bl	800a9d4 <std>
 800aad0:	68a0      	ldr	r0, [r4, #8]
 800aad2:	2201      	movs	r2, #1
 800aad4:	2109      	movs	r1, #9
 800aad6:	f7ff ff7d 	bl	800a9d4 <std>
 800aada:	68e0      	ldr	r0, [r4, #12]
 800aadc:	2202      	movs	r2, #2
 800aade:	2112      	movs	r1, #18
 800aae0:	f7ff ff78 	bl	800a9d4 <std>
 800aae4:	2301      	movs	r3, #1
 800aae6:	61a3      	str	r3, [r4, #24]
 800aae8:	e7d2      	b.n	800aa90 <__sinit+0xc>
 800aaea:	bf00      	nop
 800aaec:	0800cf98 	.word	0x0800cf98
 800aaf0:	0800aa1d 	.word	0x0800aa1d

0800aaf4 <__sfp>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	f7ff ffac 	bl	800aa54 <__sfp_lock_acquire>
 800aafc:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <__sfp+0x84>)
 800aafe:	681e      	ldr	r6, [r3, #0]
 800ab00:	69b3      	ldr	r3, [r6, #24]
 800ab02:	b913      	cbnz	r3, 800ab0a <__sfp+0x16>
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ffbd 	bl	800aa84 <__sinit>
 800ab0a:	3648      	adds	r6, #72	; 0x48
 800ab0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	d503      	bpl.n	800ab1c <__sfp+0x28>
 800ab14:	6833      	ldr	r3, [r6, #0]
 800ab16:	b30b      	cbz	r3, 800ab5c <__sfp+0x68>
 800ab18:	6836      	ldr	r6, [r6, #0]
 800ab1a:	e7f7      	b.n	800ab0c <__sfp+0x18>
 800ab1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab20:	b9d5      	cbnz	r5, 800ab58 <__sfp+0x64>
 800ab22:	4b16      	ldr	r3, [pc, #88]	; (800ab7c <__sfp+0x88>)
 800ab24:	60e3      	str	r3, [r4, #12]
 800ab26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab2a:	6665      	str	r5, [r4, #100]	; 0x64
 800ab2c:	f000 f859 	bl	800abe2 <__retarget_lock_init_recursive>
 800ab30:	f7ff ff96 	bl	800aa60 <__sfp_lock_release>
 800ab34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab3c:	6025      	str	r5, [r4, #0]
 800ab3e:	61a5      	str	r5, [r4, #24]
 800ab40:	2208      	movs	r2, #8
 800ab42:	4629      	mov	r1, r5
 800ab44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab48:	f7ff fe0c 	bl	800a764 <memset>
 800ab4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab54:	4620      	mov	r0, r4
 800ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab58:	3468      	adds	r4, #104	; 0x68
 800ab5a:	e7d9      	b.n	800ab10 <__sfp+0x1c>
 800ab5c:	2104      	movs	r1, #4
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff ff62 	bl	800aa28 <__sfmoreglue>
 800ab64:	4604      	mov	r4, r0
 800ab66:	6030      	str	r0, [r6, #0]
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d1d5      	bne.n	800ab18 <__sfp+0x24>
 800ab6c:	f7ff ff78 	bl	800aa60 <__sfp_lock_release>
 800ab70:	230c      	movs	r3, #12
 800ab72:	603b      	str	r3, [r7, #0]
 800ab74:	e7ee      	b.n	800ab54 <__sfp+0x60>
 800ab76:	bf00      	nop
 800ab78:	0800cf98 	.word	0x0800cf98
 800ab7c:	ffff0001 	.word	0xffff0001

0800ab80 <fiprintf>:
 800ab80:	b40e      	push	{r1, r2, r3}
 800ab82:	b503      	push	{r0, r1, lr}
 800ab84:	4601      	mov	r1, r0
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	4805      	ldr	r0, [pc, #20]	; (800aba0 <fiprintf+0x20>)
 800ab8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8e:	6800      	ldr	r0, [r0, #0]
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	f000 f85f 	bl	800ac54 <_vfiprintf_r>
 800ab96:	b002      	add	sp, #8
 800ab98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab9c:	b003      	add	sp, #12
 800ab9e:	4770      	bx	lr
 800aba0:	2000000c 	.word	0x2000000c

0800aba4 <_fwalk_reent>:
 800aba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba8:	4606      	mov	r6, r0
 800abaa:	4688      	mov	r8, r1
 800abac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abb0:	2700      	movs	r7, #0
 800abb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abb6:	f1b9 0901 	subs.w	r9, r9, #1
 800abba:	d505      	bpl.n	800abc8 <_fwalk_reent+0x24>
 800abbc:	6824      	ldr	r4, [r4, #0]
 800abbe:	2c00      	cmp	r4, #0
 800abc0:	d1f7      	bne.n	800abb2 <_fwalk_reent+0xe>
 800abc2:	4638      	mov	r0, r7
 800abc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc8:	89ab      	ldrh	r3, [r5, #12]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d907      	bls.n	800abde <_fwalk_reent+0x3a>
 800abce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abd2:	3301      	adds	r3, #1
 800abd4:	d003      	beq.n	800abde <_fwalk_reent+0x3a>
 800abd6:	4629      	mov	r1, r5
 800abd8:	4630      	mov	r0, r6
 800abda:	47c0      	blx	r8
 800abdc:	4307      	orrs	r7, r0
 800abde:	3568      	adds	r5, #104	; 0x68
 800abe0:	e7e9      	b.n	800abb6 <_fwalk_reent+0x12>

0800abe2 <__retarget_lock_init_recursive>:
 800abe2:	4770      	bx	lr

0800abe4 <__retarget_lock_acquire_recursive>:
 800abe4:	4770      	bx	lr

0800abe6 <__retarget_lock_release_recursive>:
 800abe6:	4770      	bx	lr

0800abe8 <__malloc_lock>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__malloc_lock+0x8>)
 800abea:	f7ff bffb 	b.w	800abe4 <__retarget_lock_acquire_recursive>
 800abee:	bf00      	nop
 800abf0:	20008594 	.word	0x20008594

0800abf4 <__malloc_unlock>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__malloc_unlock+0x8>)
 800abf6:	f7ff bff6 	b.w	800abe6 <__retarget_lock_release_recursive>
 800abfa:	bf00      	nop
 800abfc:	20008594 	.word	0x20008594

0800ac00 <__sfputc_r>:
 800ac00:	6893      	ldr	r3, [r2, #8]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	b410      	push	{r4}
 800ac08:	6093      	str	r3, [r2, #8]
 800ac0a:	da08      	bge.n	800ac1e <__sfputc_r+0x1e>
 800ac0c:	6994      	ldr	r4, [r2, #24]
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	db01      	blt.n	800ac16 <__sfputc_r+0x16>
 800ac12:	290a      	cmp	r1, #10
 800ac14:	d103      	bne.n	800ac1e <__sfputc_r+0x1e>
 800ac16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac1a:	f000 bb23 	b.w	800b264 <__swbuf_r>
 800ac1e:	6813      	ldr	r3, [r2, #0]
 800ac20:	1c58      	adds	r0, r3, #1
 800ac22:	6010      	str	r0, [r2, #0]
 800ac24:	7019      	strb	r1, [r3, #0]
 800ac26:	4608      	mov	r0, r1
 800ac28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <__sfputs_r>:
 800ac2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac30:	4606      	mov	r6, r0
 800ac32:	460f      	mov	r7, r1
 800ac34:	4614      	mov	r4, r2
 800ac36:	18d5      	adds	r5, r2, r3
 800ac38:	42ac      	cmp	r4, r5
 800ac3a:	d101      	bne.n	800ac40 <__sfputs_r+0x12>
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	e007      	b.n	800ac50 <__sfputs_r+0x22>
 800ac40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac44:	463a      	mov	r2, r7
 800ac46:	4630      	mov	r0, r6
 800ac48:	f7ff ffda 	bl	800ac00 <__sfputc_r>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d1f3      	bne.n	800ac38 <__sfputs_r+0xa>
 800ac50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac54 <_vfiprintf_r>:
 800ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	460d      	mov	r5, r1
 800ac5a:	b09d      	sub	sp, #116	; 0x74
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	4698      	mov	r8, r3
 800ac60:	4606      	mov	r6, r0
 800ac62:	b118      	cbz	r0, 800ac6c <_vfiprintf_r+0x18>
 800ac64:	6983      	ldr	r3, [r0, #24]
 800ac66:	b90b      	cbnz	r3, 800ac6c <_vfiprintf_r+0x18>
 800ac68:	f7ff ff0c 	bl	800aa84 <__sinit>
 800ac6c:	4b89      	ldr	r3, [pc, #548]	; (800ae94 <_vfiprintf_r+0x240>)
 800ac6e:	429d      	cmp	r5, r3
 800ac70:	d11b      	bne.n	800acaa <_vfiprintf_r+0x56>
 800ac72:	6875      	ldr	r5, [r6, #4]
 800ac74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac76:	07d9      	lsls	r1, r3, #31
 800ac78:	d405      	bmi.n	800ac86 <_vfiprintf_r+0x32>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	059a      	lsls	r2, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_vfiprintf_r+0x32>
 800ac80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac82:	f7ff ffaf 	bl	800abe4 <__retarget_lock_acquire_recursive>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	071b      	lsls	r3, r3, #28
 800ac8a:	d501      	bpl.n	800ac90 <_vfiprintf_r+0x3c>
 800ac8c:	692b      	ldr	r3, [r5, #16]
 800ac8e:	b9eb      	cbnz	r3, 800accc <_vfiprintf_r+0x78>
 800ac90:	4629      	mov	r1, r5
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 fb4a 	bl	800b32c <__swsetup_r>
 800ac98:	b1c0      	cbz	r0, 800accc <_vfiprintf_r+0x78>
 800ac9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac9c:	07dc      	lsls	r4, r3, #31
 800ac9e:	d50e      	bpl.n	800acbe <_vfiprintf_r+0x6a>
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	b01d      	add	sp, #116	; 0x74
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acaa:	4b7b      	ldr	r3, [pc, #492]	; (800ae98 <_vfiprintf_r+0x244>)
 800acac:	429d      	cmp	r5, r3
 800acae:	d101      	bne.n	800acb4 <_vfiprintf_r+0x60>
 800acb0:	68b5      	ldr	r5, [r6, #8]
 800acb2:	e7df      	b.n	800ac74 <_vfiprintf_r+0x20>
 800acb4:	4b79      	ldr	r3, [pc, #484]	; (800ae9c <_vfiprintf_r+0x248>)
 800acb6:	429d      	cmp	r5, r3
 800acb8:	bf08      	it	eq
 800acba:	68f5      	ldreq	r5, [r6, #12]
 800acbc:	e7da      	b.n	800ac74 <_vfiprintf_r+0x20>
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	0598      	lsls	r0, r3, #22
 800acc2:	d4ed      	bmi.n	800aca0 <_vfiprintf_r+0x4c>
 800acc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acc6:	f7ff ff8e 	bl	800abe6 <__retarget_lock_release_recursive>
 800acca:	e7e9      	b.n	800aca0 <_vfiprintf_r+0x4c>
 800accc:	2300      	movs	r3, #0
 800acce:	9309      	str	r3, [sp, #36]	; 0x24
 800acd0:	2320      	movs	r3, #32
 800acd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800acda:	2330      	movs	r3, #48	; 0x30
 800acdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aea0 <_vfiprintf_r+0x24c>
 800ace0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ace4:	f04f 0901 	mov.w	r9, #1
 800ace8:	4623      	mov	r3, r4
 800acea:	469a      	mov	sl, r3
 800acec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf0:	b10a      	cbz	r2, 800acf6 <_vfiprintf_r+0xa2>
 800acf2:	2a25      	cmp	r2, #37	; 0x25
 800acf4:	d1f9      	bne.n	800acea <_vfiprintf_r+0x96>
 800acf6:	ebba 0b04 	subs.w	fp, sl, r4
 800acfa:	d00b      	beq.n	800ad14 <_vfiprintf_r+0xc0>
 800acfc:	465b      	mov	r3, fp
 800acfe:	4622      	mov	r2, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff93 	bl	800ac2e <__sfputs_r>
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f000 80aa 	beq.w	800ae62 <_vfiprintf_r+0x20e>
 800ad0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad10:	445a      	add	r2, fp
 800ad12:	9209      	str	r2, [sp, #36]	; 0x24
 800ad14:	f89a 3000 	ldrb.w	r3, [sl]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 80a2 	beq.w	800ae62 <_vfiprintf_r+0x20e>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f04f 32ff 	mov.w	r2, #4294967295
 800ad24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad28:	f10a 0a01 	add.w	sl, sl, #1
 800ad2c:	9304      	str	r3, [sp, #16]
 800ad2e:	9307      	str	r3, [sp, #28]
 800ad30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad34:	931a      	str	r3, [sp, #104]	; 0x68
 800ad36:	4654      	mov	r4, sl
 800ad38:	2205      	movs	r2, #5
 800ad3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3e:	4858      	ldr	r0, [pc, #352]	; (800aea0 <_vfiprintf_r+0x24c>)
 800ad40:	f7f5 fa4e 	bl	80001e0 <memchr>
 800ad44:	9a04      	ldr	r2, [sp, #16]
 800ad46:	b9d8      	cbnz	r0, 800ad80 <_vfiprintf_r+0x12c>
 800ad48:	06d1      	lsls	r1, r2, #27
 800ad4a:	bf44      	itt	mi
 800ad4c:	2320      	movmi	r3, #32
 800ad4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad52:	0713      	lsls	r3, r2, #28
 800ad54:	bf44      	itt	mi
 800ad56:	232b      	movmi	r3, #43	; 0x2b
 800ad58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad60:	2b2a      	cmp	r3, #42	; 0x2a
 800ad62:	d015      	beq.n	800ad90 <_vfiprintf_r+0x13c>
 800ad64:	9a07      	ldr	r2, [sp, #28]
 800ad66:	4654      	mov	r4, sl
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f04f 0c0a 	mov.w	ip, #10
 800ad6e:	4621      	mov	r1, r4
 800ad70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad74:	3b30      	subs	r3, #48	; 0x30
 800ad76:	2b09      	cmp	r3, #9
 800ad78:	d94e      	bls.n	800ae18 <_vfiprintf_r+0x1c4>
 800ad7a:	b1b0      	cbz	r0, 800adaa <_vfiprintf_r+0x156>
 800ad7c:	9207      	str	r2, [sp, #28]
 800ad7e:	e014      	b.n	800adaa <_vfiprintf_r+0x156>
 800ad80:	eba0 0308 	sub.w	r3, r0, r8
 800ad84:	fa09 f303 	lsl.w	r3, r9, r3
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	46a2      	mov	sl, r4
 800ad8e:	e7d2      	b.n	800ad36 <_vfiprintf_r+0xe2>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	1d19      	adds	r1, r3, #4
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	9103      	str	r1, [sp, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfbb      	ittet	lt
 800ad9c:	425b      	neglt	r3, r3
 800ad9e:	f042 0202 	orrlt.w	r2, r2, #2
 800ada2:	9307      	strge	r3, [sp, #28]
 800ada4:	9307      	strlt	r3, [sp, #28]
 800ada6:	bfb8      	it	lt
 800ada8:	9204      	strlt	r2, [sp, #16]
 800adaa:	7823      	ldrb	r3, [r4, #0]
 800adac:	2b2e      	cmp	r3, #46	; 0x2e
 800adae:	d10c      	bne.n	800adca <_vfiprintf_r+0x176>
 800adb0:	7863      	ldrb	r3, [r4, #1]
 800adb2:	2b2a      	cmp	r3, #42	; 0x2a
 800adb4:	d135      	bne.n	800ae22 <_vfiprintf_r+0x1ce>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	1d1a      	adds	r2, r3, #4
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	9203      	str	r2, [sp, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfb8      	it	lt
 800adc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800adc6:	3402      	adds	r4, #2
 800adc8:	9305      	str	r3, [sp, #20]
 800adca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aeb0 <_vfiprintf_r+0x25c>
 800adce:	7821      	ldrb	r1, [r4, #0]
 800add0:	2203      	movs	r2, #3
 800add2:	4650      	mov	r0, sl
 800add4:	f7f5 fa04 	bl	80001e0 <memchr>
 800add8:	b140      	cbz	r0, 800adec <_vfiprintf_r+0x198>
 800adda:	2340      	movs	r3, #64	; 0x40
 800addc:	eba0 000a 	sub.w	r0, r0, sl
 800ade0:	fa03 f000 	lsl.w	r0, r3, r0
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	4303      	orrs	r3, r0
 800ade8:	3401      	adds	r4, #1
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf0:	482c      	ldr	r0, [pc, #176]	; (800aea4 <_vfiprintf_r+0x250>)
 800adf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adf6:	2206      	movs	r2, #6
 800adf8:	f7f5 f9f2 	bl	80001e0 <memchr>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d03f      	beq.n	800ae80 <_vfiprintf_r+0x22c>
 800ae00:	4b29      	ldr	r3, [pc, #164]	; (800aea8 <_vfiprintf_r+0x254>)
 800ae02:	bb1b      	cbnz	r3, 800ae4c <_vfiprintf_r+0x1f8>
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	3307      	adds	r3, #7
 800ae08:	f023 0307 	bic.w	r3, r3, #7
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	9303      	str	r3, [sp, #12]
 800ae10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae12:	443b      	add	r3, r7
 800ae14:	9309      	str	r3, [sp, #36]	; 0x24
 800ae16:	e767      	b.n	800ace8 <_vfiprintf_r+0x94>
 800ae18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	2001      	movs	r0, #1
 800ae20:	e7a5      	b.n	800ad6e <_vfiprintf_r+0x11a>
 800ae22:	2300      	movs	r3, #0
 800ae24:	3401      	adds	r4, #1
 800ae26:	9305      	str	r3, [sp, #20]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f04f 0c0a 	mov.w	ip, #10
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae34:	3a30      	subs	r2, #48	; 0x30
 800ae36:	2a09      	cmp	r2, #9
 800ae38:	d903      	bls.n	800ae42 <_vfiprintf_r+0x1ee>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0c5      	beq.n	800adca <_vfiprintf_r+0x176>
 800ae3e:	9105      	str	r1, [sp, #20]
 800ae40:	e7c3      	b.n	800adca <_vfiprintf_r+0x176>
 800ae42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae46:	4604      	mov	r4, r0
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e7f0      	b.n	800ae2e <_vfiprintf_r+0x1da>
 800ae4c:	ab03      	add	r3, sp, #12
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	462a      	mov	r2, r5
 800ae52:	4b16      	ldr	r3, [pc, #88]	; (800aeac <_vfiprintf_r+0x258>)
 800ae54:	a904      	add	r1, sp, #16
 800ae56:	4630      	mov	r0, r6
 800ae58:	f3af 8000 	nop.w
 800ae5c:	4607      	mov	r7, r0
 800ae5e:	1c78      	adds	r0, r7, #1
 800ae60:	d1d6      	bne.n	800ae10 <_vfiprintf_r+0x1bc>
 800ae62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae64:	07d9      	lsls	r1, r3, #31
 800ae66:	d405      	bmi.n	800ae74 <_vfiprintf_r+0x220>
 800ae68:	89ab      	ldrh	r3, [r5, #12]
 800ae6a:	059a      	lsls	r2, r3, #22
 800ae6c:	d402      	bmi.n	800ae74 <_vfiprintf_r+0x220>
 800ae6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae70:	f7ff feb9 	bl	800abe6 <__retarget_lock_release_recursive>
 800ae74:	89ab      	ldrh	r3, [r5, #12]
 800ae76:	065b      	lsls	r3, r3, #25
 800ae78:	f53f af12 	bmi.w	800aca0 <_vfiprintf_r+0x4c>
 800ae7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae7e:	e711      	b.n	800aca4 <_vfiprintf_r+0x50>
 800ae80:	ab03      	add	r3, sp, #12
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	462a      	mov	r2, r5
 800ae86:	4b09      	ldr	r3, [pc, #36]	; (800aeac <_vfiprintf_r+0x258>)
 800ae88:	a904      	add	r1, sp, #16
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f000 f880 	bl	800af90 <_printf_i>
 800ae90:	e7e4      	b.n	800ae5c <_vfiprintf_r+0x208>
 800ae92:	bf00      	nop
 800ae94:	0800d070 	.word	0x0800d070
 800ae98:	0800d090 	.word	0x0800d090
 800ae9c:	0800d050 	.word	0x0800d050
 800aea0:	0800d0b0 	.word	0x0800d0b0
 800aea4:	0800d0ba 	.word	0x0800d0ba
 800aea8:	00000000 	.word	0x00000000
 800aeac:	0800ac2f 	.word	0x0800ac2f
 800aeb0:	0800d0b6 	.word	0x0800d0b6

0800aeb4 <_printf_common>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	4616      	mov	r6, r2
 800aeba:	4699      	mov	r9, r3
 800aebc:	688a      	ldr	r2, [r1, #8]
 800aebe:	690b      	ldr	r3, [r1, #16]
 800aec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bfb8      	it	lt
 800aec8:	4613      	movlt	r3, r2
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aed0:	4607      	mov	r7, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	b10a      	cbz	r2, 800aeda <_printf_common+0x26>
 800aed6:	3301      	adds	r3, #1
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	0699      	lsls	r1, r3, #26
 800aede:	bf42      	ittt	mi
 800aee0:	6833      	ldrmi	r3, [r6, #0]
 800aee2:	3302      	addmi	r3, #2
 800aee4:	6033      	strmi	r3, [r6, #0]
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	f015 0506 	ands.w	r5, r5, #6
 800aeec:	d106      	bne.n	800aefc <_printf_common+0x48>
 800aeee:	f104 0a19 	add.w	sl, r4, #25
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	6832      	ldr	r2, [r6, #0]
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dc26      	bgt.n	800af4a <_printf_common+0x96>
 800aefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af00:	1e13      	subs	r3, r2, #0
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	bf18      	it	ne
 800af06:	2301      	movne	r3, #1
 800af08:	0692      	lsls	r2, r2, #26
 800af0a:	d42b      	bmi.n	800af64 <_printf_common+0xb0>
 800af0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af10:	4649      	mov	r1, r9
 800af12:	4638      	mov	r0, r7
 800af14:	47c0      	blx	r8
 800af16:	3001      	adds	r0, #1
 800af18:	d01e      	beq.n	800af58 <_printf_common+0xa4>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	68e5      	ldr	r5, [r4, #12]
 800af1e:	6832      	ldr	r2, [r6, #0]
 800af20:	f003 0306 	and.w	r3, r3, #6
 800af24:	2b04      	cmp	r3, #4
 800af26:	bf08      	it	eq
 800af28:	1aad      	subeq	r5, r5, r2
 800af2a:	68a3      	ldr	r3, [r4, #8]
 800af2c:	6922      	ldr	r2, [r4, #16]
 800af2e:	bf0c      	ite	eq
 800af30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af34:	2500      	movne	r5, #0
 800af36:	4293      	cmp	r3, r2
 800af38:	bfc4      	itt	gt
 800af3a:	1a9b      	subgt	r3, r3, r2
 800af3c:	18ed      	addgt	r5, r5, r3
 800af3e:	2600      	movs	r6, #0
 800af40:	341a      	adds	r4, #26
 800af42:	42b5      	cmp	r5, r6
 800af44:	d11a      	bne.n	800af7c <_printf_common+0xc8>
 800af46:	2000      	movs	r0, #0
 800af48:	e008      	b.n	800af5c <_printf_common+0xa8>
 800af4a:	2301      	movs	r3, #1
 800af4c:	4652      	mov	r2, sl
 800af4e:	4649      	mov	r1, r9
 800af50:	4638      	mov	r0, r7
 800af52:	47c0      	blx	r8
 800af54:	3001      	adds	r0, #1
 800af56:	d103      	bne.n	800af60 <_printf_common+0xac>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	3501      	adds	r5, #1
 800af62:	e7c6      	b.n	800aef2 <_printf_common+0x3e>
 800af64:	18e1      	adds	r1, r4, r3
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	2030      	movs	r0, #48	; 0x30
 800af6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af6e:	4422      	add	r2, r4
 800af70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af78:	3302      	adds	r3, #2
 800af7a:	e7c7      	b.n	800af0c <_printf_common+0x58>
 800af7c:	2301      	movs	r3, #1
 800af7e:	4622      	mov	r2, r4
 800af80:	4649      	mov	r1, r9
 800af82:	4638      	mov	r0, r7
 800af84:	47c0      	blx	r8
 800af86:	3001      	adds	r0, #1
 800af88:	d0e6      	beq.n	800af58 <_printf_common+0xa4>
 800af8a:	3601      	adds	r6, #1
 800af8c:	e7d9      	b.n	800af42 <_printf_common+0x8e>
	...

0800af90 <_printf_i>:
 800af90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	460c      	mov	r4, r1
 800af96:	4691      	mov	r9, r2
 800af98:	7e27      	ldrb	r7, [r4, #24]
 800af9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af9c:	2f78      	cmp	r7, #120	; 0x78
 800af9e:	4680      	mov	r8, r0
 800afa0:	469a      	mov	sl, r3
 800afa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afa6:	d807      	bhi.n	800afb8 <_printf_i+0x28>
 800afa8:	2f62      	cmp	r7, #98	; 0x62
 800afaa:	d80a      	bhi.n	800afc2 <_printf_i+0x32>
 800afac:	2f00      	cmp	r7, #0
 800afae:	f000 80d8 	beq.w	800b162 <_printf_i+0x1d2>
 800afb2:	2f58      	cmp	r7, #88	; 0x58
 800afb4:	f000 80a3 	beq.w	800b0fe <_printf_i+0x16e>
 800afb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800afbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afc0:	e03a      	b.n	800b038 <_printf_i+0xa8>
 800afc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afc6:	2b15      	cmp	r3, #21
 800afc8:	d8f6      	bhi.n	800afb8 <_printf_i+0x28>
 800afca:	a001      	add	r0, pc, #4	; (adr r0, 800afd0 <_printf_i+0x40>)
 800afcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b03d 	.word	0x0800b03d
 800afd8:	0800afb9 	.word	0x0800afb9
 800afdc:	0800afb9 	.word	0x0800afb9
 800afe0:	0800afb9 	.word	0x0800afb9
 800afe4:	0800afb9 	.word	0x0800afb9
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800afb9 	.word	0x0800afb9
 800aff0:	0800afb9 	.word	0x0800afb9
 800aff4:	0800afb9 	.word	0x0800afb9
 800aff8:	0800afb9 	.word	0x0800afb9
 800affc:	0800b149 	.word	0x0800b149
 800b000:	0800b06d 	.word	0x0800b06d
 800b004:	0800b12b 	.word	0x0800b12b
 800b008:	0800afb9 	.word	0x0800afb9
 800b00c:	0800afb9 	.word	0x0800afb9
 800b010:	0800b16b 	.word	0x0800b16b
 800b014:	0800afb9 	.word	0x0800afb9
 800b018:	0800b06d 	.word	0x0800b06d
 800b01c:	0800afb9 	.word	0x0800afb9
 800b020:	0800afb9 	.word	0x0800afb9
 800b024:	0800b133 	.word	0x0800b133
 800b028:	680b      	ldr	r3, [r1, #0]
 800b02a:	1d1a      	adds	r2, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	600a      	str	r2, [r1, #0]
 800b030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b038:	2301      	movs	r3, #1
 800b03a:	e0a3      	b.n	800b184 <_printf_i+0x1f4>
 800b03c:	6825      	ldr	r5, [r4, #0]
 800b03e:	6808      	ldr	r0, [r1, #0]
 800b040:	062e      	lsls	r6, r5, #24
 800b042:	f100 0304 	add.w	r3, r0, #4
 800b046:	d50a      	bpl.n	800b05e <_printf_i+0xce>
 800b048:	6805      	ldr	r5, [r0, #0]
 800b04a:	600b      	str	r3, [r1, #0]
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	da03      	bge.n	800b058 <_printf_i+0xc8>
 800b050:	232d      	movs	r3, #45	; 0x2d
 800b052:	426d      	negs	r5, r5
 800b054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b058:	485e      	ldr	r0, [pc, #376]	; (800b1d4 <_printf_i+0x244>)
 800b05a:	230a      	movs	r3, #10
 800b05c:	e019      	b.n	800b092 <_printf_i+0x102>
 800b05e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b062:	6805      	ldr	r5, [r0, #0]
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	bf18      	it	ne
 800b068:	b22d      	sxthne	r5, r5
 800b06a:	e7ef      	b.n	800b04c <_printf_i+0xbc>
 800b06c:	680b      	ldr	r3, [r1, #0]
 800b06e:	6825      	ldr	r5, [r4, #0]
 800b070:	1d18      	adds	r0, r3, #4
 800b072:	6008      	str	r0, [r1, #0]
 800b074:	0628      	lsls	r0, r5, #24
 800b076:	d501      	bpl.n	800b07c <_printf_i+0xec>
 800b078:	681d      	ldr	r5, [r3, #0]
 800b07a:	e002      	b.n	800b082 <_printf_i+0xf2>
 800b07c:	0669      	lsls	r1, r5, #25
 800b07e:	d5fb      	bpl.n	800b078 <_printf_i+0xe8>
 800b080:	881d      	ldrh	r5, [r3, #0]
 800b082:	4854      	ldr	r0, [pc, #336]	; (800b1d4 <_printf_i+0x244>)
 800b084:	2f6f      	cmp	r7, #111	; 0x6f
 800b086:	bf0c      	ite	eq
 800b088:	2308      	moveq	r3, #8
 800b08a:	230a      	movne	r3, #10
 800b08c:	2100      	movs	r1, #0
 800b08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b092:	6866      	ldr	r6, [r4, #4]
 800b094:	60a6      	str	r6, [r4, #8]
 800b096:	2e00      	cmp	r6, #0
 800b098:	bfa2      	ittt	ge
 800b09a:	6821      	ldrge	r1, [r4, #0]
 800b09c:	f021 0104 	bicge.w	r1, r1, #4
 800b0a0:	6021      	strge	r1, [r4, #0]
 800b0a2:	b90d      	cbnz	r5, 800b0a8 <_printf_i+0x118>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	d04d      	beq.n	800b144 <_printf_i+0x1b4>
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b0b2:	5dc7      	ldrb	r7, [r0, r7]
 800b0b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0b8:	462f      	mov	r7, r5
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	460d      	mov	r5, r1
 800b0be:	d9f4      	bls.n	800b0aa <_printf_i+0x11a>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <_printf_i+0x14c>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07df      	lsls	r7, r3, #31
 800b0c8:	d508      	bpl.n	800b0dc <_printf_i+0x14c>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	bfde      	ittt	le
 800b0d2:	2330      	movle	r3, #48	; 0x30
 800b0d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0dc:	1b92      	subs	r2, r2, r6
 800b0de:	6122      	str	r2, [r4, #16]
 800b0e0:	f8cd a000 	str.w	sl, [sp]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	aa03      	add	r2, sp, #12
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fee2 	bl	800aeb4 <_printf_common>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d14c      	bne.n	800b18e <_printf_i+0x1fe>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	b004      	add	sp, #16
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	4835      	ldr	r0, [pc, #212]	; (800b1d4 <_printf_i+0x244>)
 800b100:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	680e      	ldr	r6, [r1, #0]
 800b108:	061f      	lsls	r7, r3, #24
 800b10a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b10e:	600e      	str	r6, [r1, #0]
 800b110:	d514      	bpl.n	800b13c <_printf_i+0x1ac>
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	bf44      	itt	mi
 800b116:	f043 0320 	orrmi.w	r3, r3, #32
 800b11a:	6023      	strmi	r3, [r4, #0]
 800b11c:	b91d      	cbnz	r5, 800b126 <_printf_i+0x196>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	f023 0320 	bic.w	r3, r3, #32
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	2310      	movs	r3, #16
 800b128:	e7b0      	b.n	800b08c <_printf_i+0xfc>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	f043 0320 	orr.w	r3, r3, #32
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	2378      	movs	r3, #120	; 0x78
 800b134:	4828      	ldr	r0, [pc, #160]	; (800b1d8 <_printf_i+0x248>)
 800b136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b13a:	e7e3      	b.n	800b104 <_printf_i+0x174>
 800b13c:	065e      	lsls	r6, r3, #25
 800b13e:	bf48      	it	mi
 800b140:	b2ad      	uxthmi	r5, r5
 800b142:	e7e6      	b.n	800b112 <_printf_i+0x182>
 800b144:	4616      	mov	r6, r2
 800b146:	e7bb      	b.n	800b0c0 <_printf_i+0x130>
 800b148:	680b      	ldr	r3, [r1, #0]
 800b14a:	6826      	ldr	r6, [r4, #0]
 800b14c:	6960      	ldr	r0, [r4, #20]
 800b14e:	1d1d      	adds	r5, r3, #4
 800b150:	600d      	str	r5, [r1, #0]
 800b152:	0635      	lsls	r5, r6, #24
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	d501      	bpl.n	800b15c <_printf_i+0x1cc>
 800b158:	6018      	str	r0, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0x1d2>
 800b15c:	0671      	lsls	r1, r6, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0x1c8>
 800b160:	8018      	strh	r0, [r3, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	4616      	mov	r6, r2
 800b168:	e7ba      	b.n	800b0e0 <_printf_i+0x150>
 800b16a:	680b      	ldr	r3, [r1, #0]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	600a      	str	r2, [r1, #0]
 800b170:	681e      	ldr	r6, [r3, #0]
 800b172:	6862      	ldr	r2, [r4, #4]
 800b174:	2100      	movs	r1, #0
 800b176:	4630      	mov	r0, r6
 800b178:	f7f5 f832 	bl	80001e0 <memchr>
 800b17c:	b108      	cbz	r0, 800b182 <_printf_i+0x1f2>
 800b17e:	1b80      	subs	r0, r0, r6
 800b180:	6060      	str	r0, [r4, #4]
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	2300      	movs	r3, #0
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	e7a8      	b.n	800b0e0 <_printf_i+0x150>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	4632      	mov	r2, r6
 800b192:	4649      	mov	r1, r9
 800b194:	4640      	mov	r0, r8
 800b196:	47d0      	blx	sl
 800b198:	3001      	adds	r0, #1
 800b19a:	d0ab      	beq.n	800b0f4 <_printf_i+0x164>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	079b      	lsls	r3, r3, #30
 800b1a0:	d413      	bmi.n	800b1ca <_printf_i+0x23a>
 800b1a2:	68e0      	ldr	r0, [r4, #12]
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	4298      	cmp	r0, r3
 800b1a8:	bfb8      	it	lt
 800b1aa:	4618      	movlt	r0, r3
 800b1ac:	e7a4      	b.n	800b0f8 <_printf_i+0x168>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	47d0      	blx	sl
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d09b      	beq.n	800b0f4 <_printf_i+0x164>
 800b1bc:	3501      	adds	r5, #1
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	9903      	ldr	r1, [sp, #12]
 800b1c2:	1a5b      	subs	r3, r3, r1
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	dcf2      	bgt.n	800b1ae <_printf_i+0x21e>
 800b1c8:	e7eb      	b.n	800b1a2 <_printf_i+0x212>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	f104 0619 	add.w	r6, r4, #25
 800b1d0:	e7f5      	b.n	800b1be <_printf_i+0x22e>
 800b1d2:	bf00      	nop
 800b1d4:	0800d0c1 	.word	0x0800d0c1
 800b1d8:	0800d0d2 	.word	0x0800d0d2

0800b1dc <__sread>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e4:	f000 fa60 	bl	800b6a8 <_read_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	bfab      	itete	ge
 800b1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b1f0:	181b      	addge	r3, r3, r0
 800b1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1f6:	bfac      	ite	ge
 800b1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1fa:	81a3      	strhlt	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__swrite>:
 800b1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	461f      	mov	r7, r3
 800b204:	898b      	ldrh	r3, [r1, #12]
 800b206:	05db      	lsls	r3, r3, #23
 800b208:	4605      	mov	r5, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	4616      	mov	r6, r2
 800b20e:	d505      	bpl.n	800b21c <__swrite+0x1e>
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	2302      	movs	r3, #2
 800b216:	2200      	movs	r2, #0
 800b218:	f000 f9d0 	bl	800b5bc <_lseek_r>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	4628      	mov	r0, r5
 800b22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b232:	f000 b869 	b.w	800b308 <_write_r>

0800b236 <__sseek>:
 800b236:	b510      	push	{r4, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23e:	f000 f9bd 	bl	800b5bc <_lseek_r>
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	bf15      	itete	ne
 800b248:	6560      	strne	r0, [r4, #84]	; 0x54
 800b24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b252:	81a3      	strheq	r3, [r4, #12]
 800b254:	bf18      	it	ne
 800b256:	81a3      	strhne	r3, [r4, #12]
 800b258:	bd10      	pop	{r4, pc}

0800b25a <__sclose>:
 800b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25e:	f000 b8db 	b.w	800b418 <_close_r>
	...

0800b264 <__swbuf_r>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	460e      	mov	r6, r1
 800b268:	4614      	mov	r4, r2
 800b26a:	4605      	mov	r5, r0
 800b26c:	b118      	cbz	r0, 800b276 <__swbuf_r+0x12>
 800b26e:	6983      	ldr	r3, [r0, #24]
 800b270:	b90b      	cbnz	r3, 800b276 <__swbuf_r+0x12>
 800b272:	f7ff fc07 	bl	800aa84 <__sinit>
 800b276:	4b21      	ldr	r3, [pc, #132]	; (800b2fc <__swbuf_r+0x98>)
 800b278:	429c      	cmp	r4, r3
 800b27a:	d12b      	bne.n	800b2d4 <__swbuf_r+0x70>
 800b27c:	686c      	ldr	r4, [r5, #4]
 800b27e:	69a3      	ldr	r3, [r4, #24]
 800b280:	60a3      	str	r3, [r4, #8]
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	071a      	lsls	r2, r3, #28
 800b286:	d52f      	bpl.n	800b2e8 <__swbuf_r+0x84>
 800b288:	6923      	ldr	r3, [r4, #16]
 800b28a:	b36b      	cbz	r3, 800b2e8 <__swbuf_r+0x84>
 800b28c:	6923      	ldr	r3, [r4, #16]
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	1ac0      	subs	r0, r0, r3
 800b292:	6963      	ldr	r3, [r4, #20]
 800b294:	b2f6      	uxtb	r6, r6
 800b296:	4283      	cmp	r3, r0
 800b298:	4637      	mov	r7, r6
 800b29a:	dc04      	bgt.n	800b2a6 <__swbuf_r+0x42>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f950 	bl	800b544 <_fflush_r>
 800b2a4:	bb30      	cbnz	r0, 800b2f4 <__swbuf_r+0x90>
 800b2a6:	68a3      	ldr	r3, [r4, #8]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	60a3      	str	r3, [r4, #8]
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	6022      	str	r2, [r4, #0]
 800b2b2:	701e      	strb	r6, [r3, #0]
 800b2b4:	6963      	ldr	r3, [r4, #20]
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	4283      	cmp	r3, r0
 800b2ba:	d004      	beq.n	800b2c6 <__swbuf_r+0x62>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	07db      	lsls	r3, r3, #31
 800b2c0:	d506      	bpl.n	800b2d0 <__swbuf_r+0x6c>
 800b2c2:	2e0a      	cmp	r6, #10
 800b2c4:	d104      	bne.n	800b2d0 <__swbuf_r+0x6c>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 f93b 	bl	800b544 <_fflush_r>
 800b2ce:	b988      	cbnz	r0, 800b2f4 <__swbuf_r+0x90>
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <__swbuf_r+0x9c>)
 800b2d6:	429c      	cmp	r4, r3
 800b2d8:	d101      	bne.n	800b2de <__swbuf_r+0x7a>
 800b2da:	68ac      	ldr	r4, [r5, #8]
 800b2dc:	e7cf      	b.n	800b27e <__swbuf_r+0x1a>
 800b2de:	4b09      	ldr	r3, [pc, #36]	; (800b304 <__swbuf_r+0xa0>)
 800b2e0:	429c      	cmp	r4, r3
 800b2e2:	bf08      	it	eq
 800b2e4:	68ec      	ldreq	r4, [r5, #12]
 800b2e6:	e7ca      	b.n	800b27e <__swbuf_r+0x1a>
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 f81e 	bl	800b32c <__swsetup_r>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d0cb      	beq.n	800b28c <__swbuf_r+0x28>
 800b2f4:	f04f 37ff 	mov.w	r7, #4294967295
 800b2f8:	e7ea      	b.n	800b2d0 <__swbuf_r+0x6c>
 800b2fa:	bf00      	nop
 800b2fc:	0800d070 	.word	0x0800d070
 800b300:	0800d090 	.word	0x0800d090
 800b304:	0800d050 	.word	0x0800d050

0800b308 <_write_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d07      	ldr	r5, [pc, #28]	; (800b328 <_write_r+0x20>)
 800b30c:	4604      	mov	r4, r0
 800b30e:	4608      	mov	r0, r1
 800b310:	4611      	mov	r1, r2
 800b312:	2200      	movs	r2, #0
 800b314:	602a      	str	r2, [r5, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	f7f6 fc4d 	bl	8001bb6 <_write>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_write_r+0x1e>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_write_r+0x1e>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	2000858c 	.word	0x2000858c

0800b32c <__swsetup_r>:
 800b32c:	4b32      	ldr	r3, [pc, #200]	; (800b3f8 <__swsetup_r+0xcc>)
 800b32e:	b570      	push	{r4, r5, r6, lr}
 800b330:	681d      	ldr	r5, [r3, #0]
 800b332:	4606      	mov	r6, r0
 800b334:	460c      	mov	r4, r1
 800b336:	b125      	cbz	r5, 800b342 <__swsetup_r+0x16>
 800b338:	69ab      	ldr	r3, [r5, #24]
 800b33a:	b913      	cbnz	r3, 800b342 <__swsetup_r+0x16>
 800b33c:	4628      	mov	r0, r5
 800b33e:	f7ff fba1 	bl	800aa84 <__sinit>
 800b342:	4b2e      	ldr	r3, [pc, #184]	; (800b3fc <__swsetup_r+0xd0>)
 800b344:	429c      	cmp	r4, r3
 800b346:	d10f      	bne.n	800b368 <__swsetup_r+0x3c>
 800b348:	686c      	ldr	r4, [r5, #4]
 800b34a:	89a3      	ldrh	r3, [r4, #12]
 800b34c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b350:	0719      	lsls	r1, r3, #28
 800b352:	d42c      	bmi.n	800b3ae <__swsetup_r+0x82>
 800b354:	06dd      	lsls	r5, r3, #27
 800b356:	d411      	bmi.n	800b37c <__swsetup_r+0x50>
 800b358:	2309      	movs	r3, #9
 800b35a:	6033      	str	r3, [r6, #0]
 800b35c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	e03e      	b.n	800b3e6 <__swsetup_r+0xba>
 800b368:	4b25      	ldr	r3, [pc, #148]	; (800b400 <__swsetup_r+0xd4>)
 800b36a:	429c      	cmp	r4, r3
 800b36c:	d101      	bne.n	800b372 <__swsetup_r+0x46>
 800b36e:	68ac      	ldr	r4, [r5, #8]
 800b370:	e7eb      	b.n	800b34a <__swsetup_r+0x1e>
 800b372:	4b24      	ldr	r3, [pc, #144]	; (800b404 <__swsetup_r+0xd8>)
 800b374:	429c      	cmp	r4, r3
 800b376:	bf08      	it	eq
 800b378:	68ec      	ldreq	r4, [r5, #12]
 800b37a:	e7e6      	b.n	800b34a <__swsetup_r+0x1e>
 800b37c:	0758      	lsls	r0, r3, #29
 800b37e:	d512      	bpl.n	800b3a6 <__swsetup_r+0x7a>
 800b380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b382:	b141      	cbz	r1, 800b396 <__swsetup_r+0x6a>
 800b384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b388:	4299      	cmp	r1, r3
 800b38a:	d002      	beq.n	800b392 <__swsetup_r+0x66>
 800b38c:	4630      	mov	r0, r6
 800b38e:	f7ff f9f1 	bl	800a774 <_free_r>
 800b392:	2300      	movs	r3, #0
 800b394:	6363      	str	r3, [r4, #52]	; 0x34
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6063      	str	r3, [r4, #4]
 800b3a2:	6923      	ldr	r3, [r4, #16]
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	f043 0308 	orr.w	r3, r3, #8
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	6923      	ldr	r3, [r4, #16]
 800b3b0:	b94b      	cbnz	r3, 800b3c6 <__swsetup_r+0x9a>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3bc:	d003      	beq.n	800b3c6 <__swsetup_r+0x9a>
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f000 f931 	bl	800b628 <__smakebuf_r>
 800b3c6:	89a0      	ldrh	r0, [r4, #12]
 800b3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3cc:	f010 0301 	ands.w	r3, r0, #1
 800b3d0:	d00a      	beq.n	800b3e8 <__swsetup_r+0xbc>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60a3      	str	r3, [r4, #8]
 800b3d6:	6963      	ldr	r3, [r4, #20]
 800b3d8:	425b      	negs	r3, r3
 800b3da:	61a3      	str	r3, [r4, #24]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	b943      	cbnz	r3, 800b3f2 <__swsetup_r+0xc6>
 800b3e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3e4:	d1ba      	bne.n	800b35c <__swsetup_r+0x30>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	0781      	lsls	r1, r0, #30
 800b3ea:	bf58      	it	pl
 800b3ec:	6963      	ldrpl	r3, [r4, #20]
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	e7f4      	b.n	800b3dc <__swsetup_r+0xb0>
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	e7f7      	b.n	800b3e6 <__swsetup_r+0xba>
 800b3f6:	bf00      	nop
 800b3f8:	2000000c 	.word	0x2000000c
 800b3fc:	0800d070 	.word	0x0800d070
 800b400:	0800d090 	.word	0x0800d090
 800b404:	0800d050 	.word	0x0800d050

0800b408 <abort>:
 800b408:	b508      	push	{r3, lr}
 800b40a:	2006      	movs	r0, #6
 800b40c:	f000 f986 	bl	800b71c <raise>
 800b410:	2001      	movs	r0, #1
 800b412:	f7f6 fba9 	bl	8001b68 <_exit>
	...

0800b418 <_close_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d06      	ldr	r5, [pc, #24]	; (800b434 <_close_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7f6 fbe3 	bl	8001bee <_close>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_close_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_close_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	2000858c 	.word	0x2000858c

0800b438 <__sflush_r>:
 800b438:	898a      	ldrh	r2, [r1, #12]
 800b43a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	4605      	mov	r5, r0
 800b440:	0710      	lsls	r0, r2, #28
 800b442:	460c      	mov	r4, r1
 800b444:	d458      	bmi.n	800b4f8 <__sflush_r+0xc0>
 800b446:	684b      	ldr	r3, [r1, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	dc05      	bgt.n	800b458 <__sflush_r+0x20>
 800b44c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	dc02      	bgt.n	800b458 <__sflush_r+0x20>
 800b452:	2000      	movs	r0, #0
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	d0f9      	beq.n	800b452 <__sflush_r+0x1a>
 800b45e:	2300      	movs	r3, #0
 800b460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b464:	682f      	ldr	r7, [r5, #0]
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	d032      	beq.n	800b4d0 <__sflush_r+0x98>
 800b46a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	075a      	lsls	r2, r3, #29
 800b470:	d505      	bpl.n	800b47e <__sflush_r+0x46>
 800b472:	6863      	ldr	r3, [r4, #4]
 800b474:	1ac0      	subs	r0, r0, r3
 800b476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b478:	b10b      	cbz	r3, 800b47e <__sflush_r+0x46>
 800b47a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b47c:	1ac0      	subs	r0, r0, r3
 800b47e:	2300      	movs	r3, #0
 800b480:	4602      	mov	r2, r0
 800b482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b484:	6a21      	ldr	r1, [r4, #32]
 800b486:	4628      	mov	r0, r5
 800b488:	47b0      	blx	r6
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	d106      	bne.n	800b49e <__sflush_r+0x66>
 800b490:	6829      	ldr	r1, [r5, #0]
 800b492:	291d      	cmp	r1, #29
 800b494:	d82c      	bhi.n	800b4f0 <__sflush_r+0xb8>
 800b496:	4a2a      	ldr	r2, [pc, #168]	; (800b540 <__sflush_r+0x108>)
 800b498:	40ca      	lsrs	r2, r1
 800b49a:	07d6      	lsls	r6, r2, #31
 800b49c:	d528      	bpl.n	800b4f0 <__sflush_r+0xb8>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	6062      	str	r2, [r4, #4]
 800b4a2:	04d9      	lsls	r1, r3, #19
 800b4a4:	6922      	ldr	r2, [r4, #16]
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	d504      	bpl.n	800b4b4 <__sflush_r+0x7c>
 800b4aa:	1c42      	adds	r2, r0, #1
 800b4ac:	d101      	bne.n	800b4b2 <__sflush_r+0x7a>
 800b4ae:	682b      	ldr	r3, [r5, #0]
 800b4b0:	b903      	cbnz	r3, 800b4b4 <__sflush_r+0x7c>
 800b4b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b6:	602f      	str	r7, [r5, #0]
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	d0ca      	beq.n	800b452 <__sflush_r+0x1a>
 800b4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c0:	4299      	cmp	r1, r3
 800b4c2:	d002      	beq.n	800b4ca <__sflush_r+0x92>
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f7ff f955 	bl	800a774 <_free_r>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4ce:	e7c1      	b.n	800b454 <__sflush_r+0x1c>
 800b4d0:	6a21      	ldr	r1, [r4, #32]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b0      	blx	r6
 800b4d8:	1c41      	adds	r1, r0, #1
 800b4da:	d1c7      	bne.n	800b46c <__sflush_r+0x34>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0c4      	beq.n	800b46c <__sflush_r+0x34>
 800b4e2:	2b1d      	cmp	r3, #29
 800b4e4:	d001      	beq.n	800b4ea <__sflush_r+0xb2>
 800b4e6:	2b16      	cmp	r3, #22
 800b4e8:	d101      	bne.n	800b4ee <__sflush_r+0xb6>
 800b4ea:	602f      	str	r7, [r5, #0]
 800b4ec:	e7b1      	b.n	800b452 <__sflush_r+0x1a>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	e7ad      	b.n	800b454 <__sflush_r+0x1c>
 800b4f8:	690f      	ldr	r7, [r1, #16]
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	d0a9      	beq.n	800b452 <__sflush_r+0x1a>
 800b4fe:	0793      	lsls	r3, r2, #30
 800b500:	680e      	ldr	r6, [r1, #0]
 800b502:	bf08      	it	eq
 800b504:	694b      	ldreq	r3, [r1, #20]
 800b506:	600f      	str	r7, [r1, #0]
 800b508:	bf18      	it	ne
 800b50a:	2300      	movne	r3, #0
 800b50c:	eba6 0807 	sub.w	r8, r6, r7
 800b510:	608b      	str	r3, [r1, #8]
 800b512:	f1b8 0f00 	cmp.w	r8, #0
 800b516:	dd9c      	ble.n	800b452 <__sflush_r+0x1a>
 800b518:	6a21      	ldr	r1, [r4, #32]
 800b51a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b51c:	4643      	mov	r3, r8
 800b51e:	463a      	mov	r2, r7
 800b520:	4628      	mov	r0, r5
 800b522:	47b0      	blx	r6
 800b524:	2800      	cmp	r0, #0
 800b526:	dc06      	bgt.n	800b536 <__sflush_r+0xfe>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e78e      	b.n	800b454 <__sflush_r+0x1c>
 800b536:	4407      	add	r7, r0
 800b538:	eba8 0800 	sub.w	r8, r8, r0
 800b53c:	e7e9      	b.n	800b512 <__sflush_r+0xda>
 800b53e:	bf00      	nop
 800b540:	20400001 	.word	0x20400001

0800b544 <_fflush_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	690b      	ldr	r3, [r1, #16]
 800b548:	4605      	mov	r5, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	b913      	cbnz	r3, 800b554 <_fflush_r+0x10>
 800b54e:	2500      	movs	r5, #0
 800b550:	4628      	mov	r0, r5
 800b552:	bd38      	pop	{r3, r4, r5, pc}
 800b554:	b118      	cbz	r0, 800b55e <_fflush_r+0x1a>
 800b556:	6983      	ldr	r3, [r0, #24]
 800b558:	b90b      	cbnz	r3, 800b55e <_fflush_r+0x1a>
 800b55a:	f7ff fa93 	bl	800aa84 <__sinit>
 800b55e:	4b14      	ldr	r3, [pc, #80]	; (800b5b0 <_fflush_r+0x6c>)
 800b560:	429c      	cmp	r4, r3
 800b562:	d11b      	bne.n	800b59c <_fflush_r+0x58>
 800b564:	686c      	ldr	r4, [r5, #4]
 800b566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0ef      	beq.n	800b54e <_fflush_r+0xa>
 800b56e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b570:	07d0      	lsls	r0, r2, #31
 800b572:	d404      	bmi.n	800b57e <_fflush_r+0x3a>
 800b574:	0599      	lsls	r1, r3, #22
 800b576:	d402      	bmi.n	800b57e <_fflush_r+0x3a>
 800b578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57a:	f7ff fb33 	bl	800abe4 <__retarget_lock_acquire_recursive>
 800b57e:	4628      	mov	r0, r5
 800b580:	4621      	mov	r1, r4
 800b582:	f7ff ff59 	bl	800b438 <__sflush_r>
 800b586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b588:	07da      	lsls	r2, r3, #31
 800b58a:	4605      	mov	r5, r0
 800b58c:	d4e0      	bmi.n	800b550 <_fflush_r+0xc>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	059b      	lsls	r3, r3, #22
 800b592:	d4dd      	bmi.n	800b550 <_fflush_r+0xc>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f7ff fb26 	bl	800abe6 <__retarget_lock_release_recursive>
 800b59a:	e7d9      	b.n	800b550 <_fflush_r+0xc>
 800b59c:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <_fflush_r+0x70>)
 800b59e:	429c      	cmp	r4, r3
 800b5a0:	d101      	bne.n	800b5a6 <_fflush_r+0x62>
 800b5a2:	68ac      	ldr	r4, [r5, #8]
 800b5a4:	e7df      	b.n	800b566 <_fflush_r+0x22>
 800b5a6:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <_fflush_r+0x74>)
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	bf08      	it	eq
 800b5ac:	68ec      	ldreq	r4, [r5, #12]
 800b5ae:	e7da      	b.n	800b566 <_fflush_r+0x22>
 800b5b0:	0800d070 	.word	0x0800d070
 800b5b4:	0800d090 	.word	0x0800d090
 800b5b8:	0800d050 	.word	0x0800d050

0800b5bc <_lseek_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d07      	ldr	r5, [pc, #28]	; (800b5dc <_lseek_r+0x20>)
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	602a      	str	r2, [r5, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f7f6 fb36 	bl	8001c3c <_lseek>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_lseek_r+0x1e>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_lseek_r+0x1e>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	2000858c 	.word	0x2000858c

0800b5e0 <__swhatbuf_r>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	460e      	mov	r6, r1
 800b5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	b096      	sub	sp, #88	; 0x58
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	da07      	bge.n	800b602 <__swhatbuf_r+0x22>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	602b      	str	r3, [r5, #0]
 800b5f6:	89b3      	ldrh	r3, [r6, #12]
 800b5f8:	061a      	lsls	r2, r3, #24
 800b5fa:	d410      	bmi.n	800b61e <__swhatbuf_r+0x3e>
 800b5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b600:	e00e      	b.n	800b620 <__swhatbuf_r+0x40>
 800b602:	466a      	mov	r2, sp
 800b604:	f000 f8a6 	bl	800b754 <_fstat_r>
 800b608:	2800      	cmp	r0, #0
 800b60a:	dbf2      	blt.n	800b5f2 <__swhatbuf_r+0x12>
 800b60c:	9a01      	ldr	r2, [sp, #4]
 800b60e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b616:	425a      	negs	r2, r3
 800b618:	415a      	adcs	r2, r3
 800b61a:	602a      	str	r2, [r5, #0]
 800b61c:	e7ee      	b.n	800b5fc <__swhatbuf_r+0x1c>
 800b61e:	2340      	movs	r3, #64	; 0x40
 800b620:	2000      	movs	r0, #0
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	b016      	add	sp, #88	; 0x58
 800b626:	bd70      	pop	{r4, r5, r6, pc}

0800b628 <__smakebuf_r>:
 800b628:	898b      	ldrh	r3, [r1, #12]
 800b62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b62c:	079d      	lsls	r5, r3, #30
 800b62e:	4606      	mov	r6, r0
 800b630:	460c      	mov	r4, r1
 800b632:	d507      	bpl.n	800b644 <__smakebuf_r+0x1c>
 800b634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	6123      	str	r3, [r4, #16]
 800b63c:	2301      	movs	r3, #1
 800b63e:	6163      	str	r3, [r4, #20]
 800b640:	b002      	add	sp, #8
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	ab01      	add	r3, sp, #4
 800b646:	466a      	mov	r2, sp
 800b648:	f7ff ffca 	bl	800b5e0 <__swhatbuf_r>
 800b64c:	9900      	ldr	r1, [sp, #0]
 800b64e:	4605      	mov	r5, r0
 800b650:	4630      	mov	r0, r6
 800b652:	f7ff f8df 	bl	800a814 <_malloc_r>
 800b656:	b948      	cbnz	r0, 800b66c <__smakebuf_r+0x44>
 800b658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65c:	059a      	lsls	r2, r3, #22
 800b65e:	d4ef      	bmi.n	800b640 <__smakebuf_r+0x18>
 800b660:	f023 0303 	bic.w	r3, r3, #3
 800b664:	f043 0302 	orr.w	r3, r3, #2
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	e7e3      	b.n	800b634 <__smakebuf_r+0xc>
 800b66c:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <__smakebuf_r+0x7c>)
 800b66e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	6020      	str	r0, [r4, #0]
 800b674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	6163      	str	r3, [r4, #20]
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	6120      	str	r0, [r4, #16]
 800b682:	b15b      	cbz	r3, 800b69c <__smakebuf_r+0x74>
 800b684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b688:	4630      	mov	r0, r6
 800b68a:	f000 f875 	bl	800b778 <_isatty_r>
 800b68e:	b128      	cbz	r0, 800b69c <__smakebuf_r+0x74>
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f023 0303 	bic.w	r3, r3, #3
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	81a3      	strh	r3, [r4, #12]
 800b69c:	89a0      	ldrh	r0, [r4, #12]
 800b69e:	4305      	orrs	r5, r0
 800b6a0:	81a5      	strh	r5, [r4, #12]
 800b6a2:	e7cd      	b.n	800b640 <__smakebuf_r+0x18>
 800b6a4:	0800aa1d 	.word	0x0800aa1d

0800b6a8 <_read_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d07      	ldr	r5, [pc, #28]	; (800b6c8 <_read_r+0x20>)
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	602a      	str	r2, [r5, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f7f6 fa60 	bl	8001b7c <_read>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_read_r+0x1e>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_read_r+0x1e>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	2000858c 	.word	0x2000858c

0800b6cc <_raise_r>:
 800b6cc:	291f      	cmp	r1, #31
 800b6ce:	b538      	push	{r3, r4, r5, lr}
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	d904      	bls.n	800b6e0 <_raise_r+0x14>
 800b6d6:	2316      	movs	r3, #22
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6e2:	b112      	cbz	r2, 800b6ea <_raise_r+0x1e>
 800b6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e8:	b94b      	cbnz	r3, 800b6fe <_raise_r+0x32>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f000 f830 	bl	800b750 <_getpid_r>
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fa:	f000 b817 	b.w	800b72c <_kill_r>
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d00a      	beq.n	800b718 <_raise_r+0x4c>
 800b702:	1c59      	adds	r1, r3, #1
 800b704:	d103      	bne.n	800b70e <_raise_r+0x42>
 800b706:	2316      	movs	r3, #22
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7e7      	b.n	800b6de <_raise_r+0x12>
 800b70e:	2400      	movs	r4, #0
 800b710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b714:	4628      	mov	r0, r5
 800b716:	4798      	blx	r3
 800b718:	2000      	movs	r0, #0
 800b71a:	e7e0      	b.n	800b6de <_raise_r+0x12>

0800b71c <raise>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <raise+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f7ff bfd3 	b.w	800b6cc <_raise_r>
 800b726:	bf00      	nop
 800b728:	2000000c 	.word	0x2000000c

0800b72c <_kill_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_kill_r+0x20>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	4611      	mov	r1, r2
 800b738:	602b      	str	r3, [r5, #0]
 800b73a:	f7f6 fa03 	bl	8001b44 <_kill>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d102      	bne.n	800b748 <_kill_r+0x1c>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b103      	cbz	r3, 800b748 <_kill_r+0x1c>
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	bd38      	pop	{r3, r4, r5, pc}
 800b74a:	bf00      	nop
 800b74c:	2000858c 	.word	0x2000858c

0800b750 <_getpid_r>:
 800b750:	f7f6 b9f0 	b.w	8001b34 <_getpid>

0800b754 <_fstat_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d07      	ldr	r5, [pc, #28]	; (800b774 <_fstat_r+0x20>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f7f6 fa50 	bl	8001c06 <_fstat>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d102      	bne.n	800b770 <_fstat_r+0x1c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b103      	cbz	r3, 800b770 <_fstat_r+0x1c>
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	2000858c 	.word	0x2000858c

0800b778 <_isatty_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d06      	ldr	r5, [pc, #24]	; (800b794 <_isatty_r+0x1c>)
 800b77c:	2300      	movs	r3, #0
 800b77e:	4604      	mov	r4, r0
 800b780:	4608      	mov	r0, r1
 800b782:	602b      	str	r3, [r5, #0]
 800b784:	f7f6 fa4f 	bl	8001c26 <_isatty>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_isatty_r+0x1a>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_isatty_r+0x1a>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	2000858c 	.word	0x2000858c

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
