
bootloader_STM32F407XX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000193c  0800bcc0  0800bcc0  0001bcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5fc  0800d5fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d604  0800d604  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d604  0800d604  0001d604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d608  0800d608  0001d608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008584  20000070  0800d67c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200085f4  0800d67c  000285f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fb9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e05  00000000  00000000  0004a059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0004fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  00051180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4e7  00000000  00000000  00052298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000244d5  00000000  00000000  0007f77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da139  00000000  00000000  000a3c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017dd8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  0017dde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bca8 	.word	0x0800bca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800bca8 	.word	0x0800bca8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bootloaderReadData>:

/*******************************************************************************************/
/******************** IMPLEMENTATION OF BOOTLOADER JUMPING FUNCTIONS ***********************/
/*******************************************************************************************/

void  bootloaderReadData(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
 	while(1)
	{
		MX_LWIP_Process();
 800057c:	f004 fb5c 	bl	8004c38 <MX_LWIP_Process>
		switch(bootloaderBuffer[1])
 8000580:	4b94      	ldr	r3, [pc, #592]	; (80007d4 <bootloaderReadData+0x25c>)
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	3b51      	subs	r3, #81	; 0x51
 8000586:	2b54      	cmp	r3, #84	; 0x54
 8000588:	f200 8122 	bhi.w	80007d0 <bootloaderReadData+0x258>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <bootloaderReadData+0x1c>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080006e9 	.word	0x080006e9
 8000598:	080006fb 	.word	0x080006fb
 800059c:	0800070d 	.word	0x0800070d
 80005a0:	08000731 	.word	0x08000731
 80005a4:	08000743 	.word	0x08000743
 80005a8:	08000767 	.word	0x08000767
 80005ac:	08000755 	.word	0x08000755
 80005b0:	0800079d 	.word	0x0800079d
 80005b4:	0800071f 	.word	0x0800071f
 80005b8:	080007d1 	.word	0x080007d1
 80005bc:	08000779 	.word	0x08000779
 80005c0:	080007af 	.word	0x080007af
 80005c4:	0800078b 	.word	0x0800078b
 80005c8:	080007d1 	.word	0x080007d1
 80005cc:	080007d1 	.word	0x080007d1
 80005d0:	080007d1 	.word	0x080007d1
 80005d4:	080007d1 	.word	0x080007d1
 80005d8:	080007d1 	.word	0x080007d1
 80005dc:	080007d1 	.word	0x080007d1
 80005e0:	080007d1 	.word	0x080007d1
 80005e4:	080007d1 	.word	0x080007d1
 80005e8:	080007d1 	.word	0x080007d1
 80005ec:	080007d1 	.word	0x080007d1
 80005f0:	080007d1 	.word	0x080007d1
 80005f4:	080007d1 	.word	0x080007d1
 80005f8:	080007d1 	.word	0x080007d1
 80005fc:	080007d1 	.word	0x080007d1
 8000600:	080007d1 	.word	0x080007d1
 8000604:	080007d1 	.word	0x080007d1
 8000608:	080007d1 	.word	0x080007d1
 800060c:	080007d1 	.word	0x080007d1
 8000610:	080007d1 	.word	0x080007d1
 8000614:	080007d1 	.word	0x080007d1
 8000618:	080007d1 	.word	0x080007d1
 800061c:	080007d1 	.word	0x080007d1
 8000620:	080007d1 	.word	0x080007d1
 8000624:	080007d1 	.word	0x080007d1
 8000628:	080007d1 	.word	0x080007d1
 800062c:	080007d1 	.word	0x080007d1
 8000630:	080007d1 	.word	0x080007d1
 8000634:	080007d1 	.word	0x080007d1
 8000638:	080007d1 	.word	0x080007d1
 800063c:	080007d1 	.word	0x080007d1
 8000640:	080007d1 	.word	0x080007d1
 8000644:	080007d1 	.word	0x080007d1
 8000648:	080007d1 	.word	0x080007d1
 800064c:	080007d1 	.word	0x080007d1
 8000650:	080007d1 	.word	0x080007d1
 8000654:	080007d1 	.word	0x080007d1
 8000658:	080007d1 	.word	0x080007d1
 800065c:	080007d1 	.word	0x080007d1
 8000660:	080007d1 	.word	0x080007d1
 8000664:	080007d1 	.word	0x080007d1
 8000668:	080007d1 	.word	0x080007d1
 800066c:	080007d1 	.word	0x080007d1
 8000670:	080007d1 	.word	0x080007d1
 8000674:	080007d1 	.word	0x080007d1
 8000678:	080007d1 	.word	0x080007d1
 800067c:	080007d1 	.word	0x080007d1
 8000680:	080007d1 	.word	0x080007d1
 8000684:	080007d1 	.word	0x080007d1
 8000688:	080007d1 	.word	0x080007d1
 800068c:	080007d1 	.word	0x080007d1
 8000690:	080007d1 	.word	0x080007d1
 8000694:	080007d1 	.word	0x080007d1
 8000698:	080007d1 	.word	0x080007d1
 800069c:	080007d1 	.word	0x080007d1
 80006a0:	080007d1 	.word	0x080007d1
 80006a4:	080007d1 	.word	0x080007d1
 80006a8:	080007d1 	.word	0x080007d1
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007d1 	.word	0x080007d1
 80006b4:	080007d1 	.word	0x080007d1
 80006b8:	080007d1 	.word	0x080007d1
 80006bc:	080007d1 	.word	0x080007d1
 80006c0:	080007d1 	.word	0x080007d1
 80006c4:	080007d1 	.word	0x080007d1
 80006c8:	080007d1 	.word	0x080007d1
 80006cc:	080007d1 	.word	0x080007d1
 80006d0:	080007d1 	.word	0x080007d1
 80006d4:	080007d1 	.word	0x080007d1
 80006d8:	080007d1 	.word	0x080007d1
 80006dc:	080007d1 	.word	0x080007d1
 80006e0:	080007d1 	.word	0x080007d1
 80006e4:	080007c1 	.word	0x080007c1
		{
            case BL_GET_VER:
                bootloaderHandle_getVer(bootloaderBuffer);
 80006e8:	483a      	ldr	r0, [pc, #232]	; (80007d4 <bootloaderReadData+0x25c>)
 80006ea:	f000 f891 	bl	8000810 <bootloaderHandle_getVer>
                memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80006ee:	2240      	movs	r2, #64	; 0x40
 80006f0:	2100      	movs	r1, #0
 80006f2:	4838      	ldr	r0, [pc, #224]	; (80007d4 <bootloaderReadData+0x25c>)
 80006f4:	f00a fabe 	bl	800ac74 <memset>
                break;
 80006f8:	e06b      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GET_CID:
            	bootloaderHandle_getCid(bootloaderBuffer);
 80006fa:	4836      	ldr	r0, [pc, #216]	; (80007d4 <bootloaderReadData+0x25c>)
 80006fc:	f000 f8be 	bl	800087c <bootloaderHandle_getCid>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000700:	2240      	movs	r2, #64	; 0x40
 8000702:	2100      	movs	r1, #0
 8000704:	4833      	ldr	r0, [pc, #204]	; (80007d4 <bootloaderReadData+0x25c>)
 8000706:	f00a fab5 	bl	800ac74 <memset>
                break;
 800070a:	e062      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GET_RDP_STATUS:
            	bootloaderHandle_getRdp(bootloaderBuffer);
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <bootloaderReadData+0x25c>)
 800070e:	f000 f901 	bl	8000914 <bootloaderHandle_getRdp>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000712:	2240      	movs	r2, #64	; 0x40
 8000714:	2100      	movs	r1, #0
 8000716:	482f      	ldr	r0, [pc, #188]	; (80007d4 <bootloaderReadData+0x25c>)
 8000718:	f00a faac 	bl	800ac74 <memset>
                break;
 800071c:	e059      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_SET_RDP_STATUS:
            	bootloaderHandle_setRdp(bootloaderBuffer);
 800071e:	482d      	ldr	r0, [pc, #180]	; (80007d4 <bootloaderReadData+0x25c>)
 8000720:	f000 f92e 	bl	8000980 <bootloaderHandle_setRdp>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	2100      	movs	r1, #0
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <bootloaderReadData+0x25c>)
 800072a:	f00a faa3 	bl	800ac74 <memset>
                break;
 800072e:	e050      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_GO_TO_ADDR:
            	bootloaderHandle_go(bootloaderBuffer);
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <bootloaderReadData+0x25c>)
 8000732:	f000 f95f 	bl	80009f4 <bootloaderHandle_go>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	2100      	movs	r1, #0
 800073a:	4826      	ldr	r0, [pc, #152]	; (80007d4 <bootloaderReadData+0x25c>)
 800073c:	f00a fa9a 	bl	800ac74 <memset>
                break;
 8000740:	e047      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_FLASH_ERASE:
            	bootloaderHandle_flashErase(bootloaderBuffer);
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <bootloaderReadData+0x25c>)
 8000744:	f000 f9a8 	bl	8000a98 <bootloaderHandle_flashErase>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	2100      	movs	r1, #0
 800074c:	4821      	ldr	r0, [pc, #132]	; (80007d4 <bootloaderReadData+0x25c>)
 800074e:	f00a fa91 	bl	800ac74 <memset>
                break;
 8000752:	e03e      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_EN_RW_PROTECT:
            	bootloaderHandle_enRwProtect(bootloaderBuffer);
 8000754:	481f      	ldr	r0, [pc, #124]	; (80007d4 <bootloaderReadData+0x25c>)
 8000756:	f000 f9eb 	bl	8000b30 <bootloaderHandle_enRwProtect>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800075a:	2240      	movs	r2, #64	; 0x40
 800075c:	2100      	movs	r1, #0
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <bootloaderReadData+0x25c>)
 8000760:	f00a fa88 	bl	800ac74 <memset>
                break;
 8000764:	e035      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_SECTOR_P_STATUS:
            	bootloaderHandle_readSectorProtectionStatus(bootloaderBuffer);
 8000766:	481b      	ldr	r0, [pc, #108]	; (80007d4 <bootloaderReadData+0x25c>)
 8000768:	f000 fa2a 	bl	8000bc0 <bootloaderHandle_readSectorProtectionStatus>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	2100      	movs	r1, #0
 8000770:	4818      	ldr	r0, [pc, #96]	; (80007d4 <bootloaderReadData+0x25c>)
 8000772:	f00a fa7f 	bl	800ac74 <memset>
                break;
 8000776:	e02c      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_WRITE_OTP_AREA:
            	bootloaderHandle_writeOtpArea(bootloaderBuffer);
 8000778:	4816      	ldr	r0, [pc, #88]	; (80007d4 <bootloaderReadData+0x25c>)
 800077a:	f000 fabf 	bl	8000cfc <bootloaderHandle_writeOtpArea>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	2100      	movs	r1, #0
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <bootloaderReadData+0x25c>)
 8000784:	f00a fa76 	bl	800ac74 <memset>
                break;
 8000788:	e023      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_OTP_AREA_STATUS:
            	bootloaderHandle_readOtpStatus(bootloaderBuffer);
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <bootloaderReadData+0x25c>)
 800078c:	f000 fb26 	bl	8000ddc <bootloaderHandle_readOtpStatus>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 8000790:	2240      	movs	r2, #64	; 0x40
 8000792:	2100      	movs	r1, #0
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <bootloaderReadData+0x25c>)
 8000796:	f00a fa6d 	bl	800ac74 <memset>
                break;
 800079a:	e01a      	b.n	80007d2 <bootloaderReadData+0x25a>

            case BL_READ_ADDR_VALUE:
            	bootloaderHandle_readAddressValue(bootloaderBuffer);
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <bootloaderReadData+0x25c>)
 800079e:	f000 fa53 	bl	8000c48 <bootloaderHandle_readAddressValue>
            	memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007a2:	2240      	movs	r2, #64	; 0x40
 80007a4:	2100      	movs	r1, #0
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <bootloaderReadData+0x25c>)
 80007a8:	f00a fa64 	bl	800ac74 <memset>
                break;
 80007ac:	e011      	b.n	80007d2 <bootloaderReadData+0x25a>

			case BL_DIS_RW_PROTECT:
				bootloaderHandle_disRwProtect(bootloaderBuffer);
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <bootloaderReadData+0x25c>)
 80007b0:	f000 fb8c 	bl	8000ecc <bootloaderHandle_disRwProtect>
				memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	2100      	movs	r1, #0
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <bootloaderReadData+0x25c>)
 80007ba:	f00a fa5b 	bl	800ac74 <memset>
                break;
 80007be:	e008      	b.n	80007d2 <bootloaderReadData+0x25a>

			case BL_SERVER_CONNECTED:
				bootloaderHandle_serverConnected();
 80007c0:	f000 fbc9 	bl	8000f56 <bootloaderHandle_serverConnected>
				memset(bootloaderBuffer,0,BOOTLOADER_BUFFER_LENGTH);
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	2100      	movs	r1, #0
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <bootloaderReadData+0x25c>)
 80007ca:	f00a fa53 	bl	800ac74 <memset>
                break;
 80007ce:	e000      	b.n	80007d2 <bootloaderReadData+0x25a>

             default:
                break;
 80007d0:	bf00      	nop
		MX_LWIP_Process();
 80007d2:	e6d3      	b.n	800057c <bootloaderReadData+0x4>
 80007d4:	200001f4 	.word	0x200001f4

080007d8 <bootloaderJumpToUserApp>:
		}
	}
}

/* Code to jump to user application. We assume that FLASH_SECTOR2_BASE_ADDRESS is where it is stored */
void bootloaderJumpToUserApp(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
	   //just a function pointer to hold the address of the reset handler of the user app.
	    void (*appResetHandler)(void);

	    // 1. configure the MSP by reading the value from the base address of the sector 4
	    uint32_t mspValue = *(volatile uint32_t *)FLASH_APP_BASE_ADDRESS;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <bootloaderJumpToUserApp+0x30>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f383 8808 	msr	MSP, r3
}
 80007ee:	bf00      	nop
	    __set_MSP(mspValue);
	    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;
	    /* 2. Now fetch the reset handler address of the user application
	     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	     */
	    uint32_t resetHandlerAddress = *(volatile uint32_t *) (FLASH_APP_BASE_ADDRESS + 4);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <bootloaderJumpToUserApp+0x34>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60bb      	str	r3, [r7, #8]

	    appResetHandler = (void*) resetHandlerAddress;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	607b      	str	r3, [r7, #4]

	    //3. jump to reset handler of the user application
	    appResetHandler();
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4798      	blx	r3

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	08010000 	.word	0x08010000
 800080c:	08010004 	.word	0x08010004

08000810 <bootloaderHandle_getVer>:
/*******************************************************************************************/
/******************** IMPLEMENTATION OF BOOTLOADER COMMAND FUNCTIONS ***********************/
/*******************************************************************************************/

/*Helper function to handle BL_GET_VER command */
static void bootloaderHandle_getVer(uint8_t *bootloaderBuffer) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t blVersionResponse[2] = {0};
 8000818:	2300      	movs	r3, #0
 800081a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3b04      	subs	r3, #4
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3b04      	subs	r3, #4
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4619      	mov	r1, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fdd5 	bl	80013e8 <verifyCRC>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d00c      	beq.n	8000870 <bootloaderHandle_getVer+0x60>
		blVersionResponse[0] = BL_GET_VER;
 8000856:	2351      	movs	r3, #81	; 0x51
 8000858:	733b      	strb	r3, [r7, #12]
		blVersionResponse[1] = getBootloaderVersion();
 800085a:	f000 fb8a 	bl	8000f72 <getBootloaderVersion>
 800085e:	4603      	mov	r3, r0
 8000860:	737b      	strb	r3, [r7, #13]
		sendData(blVersionResponse, 2);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2102      	movs	r1, #2
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fd89 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 800086e:	e001      	b.n	8000874 <bootloaderHandle_getVer+0x64>
		sendNACK();
 8000870:	f000 fdac 	bl	80013cc <sendNACK>
}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <bootloaderHandle_getCid>:

/*Helper function to handle BL_GET_CID command */
static void bootloaderHandle_getCid(uint8_t *bootloaderBuffer) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint8_t blCidNum[5] = { 0 };
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	2300      	movs	r3, #0
 800088a:	743b      	strb	r3, [r7, #16]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	3b04      	subs	r3, #4
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	61bb      	str	r3, [r7, #24]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	3b04      	subs	r3, #4
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4619      	mov	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 fd9d 	bl	80013e8 <verifyCRC>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]
	if (crcVerification == false) {
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	f083 0301 	eor.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d020      	beq.n	8000908 <bootloaderHandle_getCid+0x8c>
		uint16_t chipID = getMCUChipID();
 80008c6:	f000 fb5d 	bl	8000f84 <getMCUChipID>
 80008ca:	4603      	mov	r3, r0
 80008cc:	82bb      	strh	r3, [r7, #20]
		uint16_t chipRev = getMCUChipRev();
 80008ce:	f000 fb6b 	bl	8000fa8 <getMCUChipRev>
 80008d2:	4603      	mov	r3, r0
 80008d4:	827b      	strh	r3, [r7, #18]
		blCidNum[0] = BL_GET_CID;
 80008d6:	2352      	movs	r3, #82	; 0x52
 80008d8:	733b      	strb	r3, [r7, #12]
		blCidNum[1] = chipID >> 8;
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	737b      	strb	r3, [r7, #13]
		blCidNum[2] = chipID;
 80008e4:	8abb      	ldrh	r3, [r7, #20]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	73bb      	strb	r3, [r7, #14]
		blCidNum[3] = chipRev >> 8;
 80008ea:	8a7b      	ldrh	r3, [r7, #18]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
		blCidNum[4] = chipRev;
 80008f4:	8a7b      	ldrh	r3, [r7, #18]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	743b      	strb	r3, [r7, #16]
		sendData((uint8_t*) &blCidNum, 5);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2105      	movs	r1, #5
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd3d 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000906:	e001      	b.n	800090c <bootloaderHandle_getCid+0x90>
		sendNACK();
 8000908:	f000 fd60 	bl	80013cc <sendNACK>
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <bootloaderHandle_getRdp>:

/*Helper function to handle BL_GET_RDP_STATUS command */
static void bootloaderHandle_getRdp(uint8_t *bootloaderBuffer) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel[2] = {0};
 800091c:	2300      	movs	r3, #0
 800091e:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3b04      	subs	r3, #4
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3b04      	subs	r3, #4
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4619      	mov	r1, r3
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 fd53 	bl	80013e8 <verifyCRC>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	f083 0301 	eor.w	r3, r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00c      	beq.n	8000974 <bootloaderHandle_getRdp+0x60>
		rdpLevel[0] = BL_GET_RDP_STATUS;
 800095a:	2353      	movs	r3, #83	; 0x53
 800095c:	733b      	strb	r3, [r7, #12]
		rdpLevel[1] = getFlashRdpLevel();
 800095e:	f000 fb33 	bl	8000fc8 <getFlashRdpLevel>
 8000962:	4603      	mov	r3, r0
 8000964:	737b      	strb	r3, [r7, #13]
		sendData(rdpLevel, 2);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2102      	movs	r1, #2
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd07 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000972:	e001      	b.n	8000978 <bootloaderHandle_getRdp+0x64>
		sendNACK();
 8000974:	f000 fd2a 	bl	80013cc <sendNACK>
}
 8000978:	bf00      	nop
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <bootloaderHandle_setRdp>:

/*Helper function to handle BL_SET_RDP_STATUS command */
static void bootloaderHandle_setRdp(uint8_t *bootloaderBuffer) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel[2] = {0};
 8000988:	2300      	movs	r3, #0
 800098a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3b04      	subs	r3, #4
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3b04      	subs	r3, #4
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fd1d 	bl	80013e8 <verifyCRC>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	f083 0301 	eor.w	r3, r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d010      	beq.n	80009e8 <bootloaderHandle_setRdp+0x68>
		rdpLevel[0] = BL_SET_RDP_STATUS;
 80009c6:	2359      	movs	r3, #89	; 0x59
 80009c8:	733b      	strb	r3, [r7, #12]
		rdpLevel[1] = setFlashRdpLevel(bootloaderBuffer[2]);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fb09 	bl	8000fe8 <setFlashRdpLevel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	737b      	strb	r3, [r7, #13]
		sendData(rdpLevel, 2);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fccd 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 80009e6:	e001      	b.n	80009ec <bootloaderHandle_setRdp+0x6c>
		sendNACK();
 80009e8:	f000 fcf0 	bl	80013cc <sendNACK>
}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <bootloaderHandle_go>:

 /*Helper function to handle BL_GO_TO_ADDR command */
static void bootloaderHandle_go(uint8_t *bootloaderBuffer) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint32_t goAddress = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
	uint8_t addrValidation[2] = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	813b      	strh	r3, [r7, #8]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	617b      	str	r3, [r7, #20]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 fce1 	bl	80013e8 <verifyCRC>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bf14      	ite	ne
 8000a2c:	2301      	movne	r3, #1
 8000a2e:	2300      	moveq	r3, #0
 8000a30:	74fb      	strb	r3, [r7, #19]
	if (crcVerification == false) {
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	f083 0301 	eor.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d025      	beq.n	8000a8a <bootloaderHandle_go+0x96>
		//Extract the go address
		goAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a44:	61fb      	str	r3, [r7, #28]
		addrValidation[0] = BL_GO_TO_ADDR;
 8000a46:	2354      	movs	r3, #84	; 0x54
 8000a48:	723b      	strb	r3, [r7, #8]
		if (verifyAddress(goAddress, Go) == ADDR_VALID) {
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	69f8      	ldr	r0, [r7, #28]
 8000a4e:	f000 fb23 	bl	8001098 <verifyAddress>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <bootloaderHandle_go+0x84>
			//Tell host that address is fine
			addrValidation[1] = ADDR_VALID;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	727b      	strb	r3, [r7, #9]
			sendData(addrValidation, 2);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fc8c 	bl	8001380 <sendData>
			 host must ensure that valid code is present over there
			 Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY
			goAddress += 1; //make T bit =1
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]

			void (*jumpToAddress)(void) = (void *)goAddress;
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	60fb      	str	r3, [r7, #12]

			jumpToAddress();
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4798      	blx	r3
			sendData(addrValidation, 2);
		}
	} else {
		sendNACK();
	}
}
 8000a76:	e00a      	b.n	8000a8e <bootloaderHandle_go+0x9a>
			addrValidation[1] = ADDR_INVALID;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	727b      	strb	r3, [r7, #9]
			sendData(addrValidation, 2);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fc7c 	bl	8001380 <sendData>
}
 8000a88:	e001      	b.n	8000a8e <bootloaderHandle_go+0x9a>
		sendNACK();
 8000a8a:	f000 fc9f 	bl	80013cc <sendNACK>
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <bootloaderHandle_flashErase>:

 /*Helper function to handle BL_FLASH_ERASE command */
static void bootloaderHandle_flashErase(uint8_t * bootloaderBuffer){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	   uint8_t eraseStatus[2] = {0};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81bb      	strh	r3, [r7, #12]

		//Total length of the command packet
		uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]

		//Extract the CRC32 sent by the Host
		uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	613b      	str	r3, [r7, #16]

		bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3b04      	subs	r3, #4
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 fc91 	bl	80013e8 <verifyCRC>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
		if (crcVerification == false) {
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d020      	beq.n	8000b20 <bootloaderHandle_flashErase+0x88>

#ifdef LED_FLASH_STATUS
	        HAL_GPIO_WritePin(LED_FLASH_PORT, LED_FLASH_PIN, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <bootloaderHandle_flashErase+0x94>)
 8000ae6:	f003 f9b7 	bl	8003e58 <HAL_GPIO_WritePin>
#endif
	        eraseStatus[0] = BL_FLASH_ERASE;
 8000aea:	2355      	movs	r3, #85	; 0x55
 8000aec:	733b      	strb	r3, [r7, #12]
	        eraseStatus[1] = executeFlashErase(bootloaderBuffer[2] , bootloaderBuffer[3]);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3302      	adds	r3, #2
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3303      	adds	r3, #3
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f000 fb5f 	bl	80011c0 <executeFlashErase>
 8000b02:	4603      	mov	r3, r0
 8000b04:	737b      	strb	r3, [r7, #13]
#ifdef LED_FLASH_STATUS
	        HAL_GPIO_WritePin(LED_FLASH_PORT, LED_FLASH_PIN, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <bootloaderHandle_flashErase+0x94>)
 8000b0e:	f003 f9a3 	bl	8003e58 <HAL_GPIO_WritePin>
#endif
	        sendData(eraseStatus, 2);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2102      	movs	r1, #2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fc31 	bl	8001380 <sendData>
		}
		else{
	        sendNACK();
		}
 }
 8000b1e:	e001      	b.n	8000b24 <bootloaderHandle_flashErase+0x8c>
	        sendNACK();
 8000b20:	f000 fc54 	bl	80013cc <sendNACK>
 }
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <bootloaderHandle_enRwProtect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
static void bootloaderHandle_enRwProtect(uint8_t *bootloaderBuffer) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint8_t status[2] = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3b04      	subs	r3, #4
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3b04      	subs	r3, #4
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fc45 	bl	80013e8 <verifyCRC>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d01d      	beq.n	8000bb2 <bootloaderHandle_enRwProtect+0x82>

		status[0] = BL_EN_RW_PROTECT;
 8000b76:	2357      	movs	r3, #87	; 0x57
 8000b78:	733b      	strb	r3, [r7, #12]
		status[1] = configureFlashSectorRwProtection(bootloaderBuffer[3] << 8 | bootloaderBuffer[2], bootloaderBuffer[4], 0);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3302      	adds	r3, #2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	b298      	uxth	r0, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3304      	adds	r3, #4
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f000 fb58 	bl	8001250 <configureFlashSectorRwProtection>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	737b      	strb	r3, [r7, #13]
		sendData(status, 2);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fbe8 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000bb0:	e001      	b.n	8000bb6 <bootloaderHandle_enRwProtect+0x86>
		sendNACK();
 8000bb2:	f000 fc0b 	bl	80013cc <sendNACK>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <bootloaderHandle_readSectorProtectionStatus>:

/*Helper function to handle BL_READ_SECTOR_P_STATUS command */
static void bootloaderHandle_readSectorProtectionStatus(uint8_t *bootloaderBuffer) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = { 0 };
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <bootloaderHandle_readSectorProtectionStatus+0x84>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	81bb      	strh	r3, [r7, #12]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3b04      	subs	r3, #4
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 fbfa 	bl	80013e8 <verifyCRC>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f083 0301 	eor.w	r3, r3, #1
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d014      	beq.n	8000c36 <bootloaderHandle_readSectorProtectionStatus+0x76>

		status[0] = BL_READ_SECTOR_P_STATUS;
 8000c0c:	2356      	movs	r3, #86	; 0x56
 8000c0e:	733b      	strb	r3, [r7, #12]
		status[1] = readOBRwProtectionStatus() >> 8;
 8000c10:	f000 fb96 	bl	8001340 <readOBRwProtectionStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	737b      	strb	r3, [r7, #13]
		status[2] = readOBRwProtectionStatus();
 8000c1e:	f000 fb8f 	bl	8001340 <readOBRwProtectionStatus>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	73bb      	strb	r3, [r7, #14]
		sendData(status, 3);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fba6 	bl	8001380 <sendData>

	} else {
		sendNACK();
	}
}
 8000c34:	e001      	b.n	8000c3a <bootloaderHandle_readSectorProtectionStatus+0x7a>
		sendNACK();
 8000c36:	f000 fbc9 	bl	80013cc <sendNACK>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800bcc0 	.word	0x0800bcc0

08000c48 <bootloaderHandle_readAddressValue>:

 /*Helper function to handle BL_READ_ADDR_VALUE command */
static void bootloaderHandle_readAddressValue(uint8_t * bootloaderBuffer){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t status[5] = {0};
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	2300      	movs	r3, #0
 8000c56:	733b      	strb	r3, [r7, #12]
	uint32_t readAddress = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
	uint32_t readValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3b04      	subs	r3, #4
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 fbb3 	bl	80013e8 <verifyCRC>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bf14      	ite	ne
 8000c88:	2301      	movne	r3, #1
 8000c8a:	2300      	moveq	r3, #0
 8000c8c:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	f083 0301 	eor.w	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d02a      	beq.n	8000cf0 <bootloaderHandle_readAddressValue+0xa8>
		status[0]   = BL_READ_ADDR_VALUE;
 8000c9a:	2358      	movs	r3, #88	; 0x58
 8000c9c:	723b      	strb	r3, [r7, #8]
		readAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ca4:	61fb      	str	r3, [r7, #28]
		if (verifyAddress(readAddress, Read) == ADDR_VALID) {
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	69f8      	ldr	r0, [r7, #28]
 8000caa:	f000 f9f5 	bl	8001098 <verifyAddress>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d114      	bne.n	8000cde <bootloaderHandle_readAddressValue+0x96>
			readValue   = *((uint32_t*) readAddress);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61bb      	str	r3, [r7, #24]
			status[1]	= ADDR_VALID;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	727b      	strb	r3, [r7, #9]
			status[2]   = readValue >> 24;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	0e1b      	lsrs	r3, r3, #24
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
			status[3]   = readValue >> 16;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	72fb      	strb	r3, [r7, #11]
			status[4]   = readValue >> 8;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	733b      	strb	r3, [r7, #12]
			status[5]   = readValue;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	737b      	strb	r3, [r7, #13]
 8000cdc:	e001      	b.n	8000ce2 <bootloaderHandle_readAddressValue+0x9a>
		}
		else {
			status[1]	= ADDR_INVALID;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	727b      	strb	r3, [r7, #9]
		}
		sendData(status, 6);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fb49 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
 }
 8000cee:	e001      	b.n	8000cf4 <bootloaderHandle_readAddressValue+0xac>
		sendNACK();
 8000cf0:	f000 fb6c 	bl	80013cc <sendNACK>
 }
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <bootloaderHandle_writeOtpArea>:

/*Helper function to handle BL_WRITE_OTP_AREA command */
static void bootloaderHandle_writeOtpArea(uint8_t * bootloaderBuffer){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = {0};
 8000d04:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <bootloaderHandle_writeOtpArea+0xdc>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	81bb      	strh	r3, [r7, #12]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73bb      	strb	r3, [r7, #14]
	uint32_t writeAddress = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t writeStatus = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]


	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b04      	subs	r3, #4
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b04      	subs	r3, #4
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4619      	mov	r1, r3
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 fb58 	bl	80013e8 <verifyCRC>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	75fb      	strb	r3, [r7, #23]
	if (crcVerification == false) {
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d03d      	beq.n	8000dcc <bootloaderHandle_writeOtpArea+0xd0>
		status[0]   = BL_WRITE_OTP_AREA;
 8000d50:	235b      	movs	r3, #91	; 0x5b
 8000d52:	733b      	strb	r3, [r7, #12]
		writeAddress = *((uint32_t*) &bootloaderBuffer[2]);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (verifyAddress(writeAddress, Otp) == ADDR_VALID) {
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d60:	f000 f99a 	bl	8001098 <verifyAddress>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d127      	bne.n	8000dba <bootloaderHandle_writeOtpArea+0xbe>
			HAL_FLASH_Unlock();
 8000d6a:	f002 fba1 	bl	80034b0 <HAL_FLASH_Unlock>

			uint32_t writeValue = bootloaderBuffer[6] + (bootloaderBuffer[7] << 8) + (bootloaderBuffer[8] << 16) + (bootloaderBuffer[9] << 24);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3306      	adds	r3, #6
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3307      	adds	r3, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	441a      	add	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3308      	adds	r3, #8
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	441a      	add	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3309      	adds	r3, #9
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	061b      	lsls	r3, r3, #24
 8000d92:	4413      	add	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
			writeStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, writeAddress,  writeValue);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	f04f 0300 	mov.w	r3, #0
 8000d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fb31 	bl	8003408 <HAL_FLASH_Program>
 8000da6:	4603      	mov	r3, r0
 8000da8:	623b      	str	r3, [r7, #32]

			HAL_FLASH_Lock();
 8000daa:	f002 fba3 	bl	80034f4 <HAL_FLASH_Lock>

			status[1]	= ADDR_VALID;
 8000dae:	2300      	movs	r3, #0
 8000db0:	737b      	strb	r3, [r7, #13]
			status[2]	= writeStatus;
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	e001      	b.n	8000dbe <bootloaderHandle_writeOtpArea+0xc2>
		}
		else {
			status[1]	= ADDR_INVALID;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	737b      	strb	r3, [r7, #13]
		}
		sendData(status, 6);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2106      	movs	r1, #6
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fadb 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000dca:	e001      	b.n	8000dd0 <bootloaderHandle_writeOtpArea+0xd4>
		sendNACK();
 8000dcc:	f000 fafe 	bl	80013cc <sendNACK>
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	0800bcc0 	.word	0x0800bcc0

08000ddc <bootloaderHandle_readOtpStatus>:

/*Helper function to handle BL_READ_OTP_AREA_STATE */
static void bootloaderHandle_readOtpStatus(uint8_t *bootloaderBuffer) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	uint8_t status[3] = {0};
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <bootloaderHandle_readOtpStatus+0xe8>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	813b      	strh	r3, [r7, #8]
 8000dea:	2300      	movs	r3, #0
 8000dec:	72bb      	strb	r3, [r7, #10]
	uint16_t otpTotalState = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	83fb      	strh	r3, [r7, #30]
	uint32_t otpBlockState = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
	uint32_t * otpAddress = (uint32_t *) OPT_LOCK_BASE;
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <bootloaderHandle_readOtpStatus+0xec>)
 8000df8:	617b      	str	r3, [r7, #20]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	3b04      	subs	r3, #4
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	3b04      	subs	r3, #4
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4619      	mov	r1, r3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fae6 	bl	80013e8 <verifyCRC>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	72fb      	strb	r3, [r7, #11]
	if (crcVerification == false) {
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d041      	beq.n	8000eb8 <bootloaderHandle_readOtpStatus+0xdc>
		status[0]   = BL_READ_OTP_AREA_STATUS;
 8000e34:	235d      	movs	r3, #93	; 0x5d
 8000e36:	723b      	strb	r3, [r7, #8]
		uint8_t i = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 4; i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	777b      	strb	r3, [r7, #29]
 8000e40:	e028      	b.n	8000e94 <bootloaderHandle_readOtpStatus+0xb8>
			otpBlockState = *((uint32_t*) (otpAddress + i ));
 8000e42:	7f7b      	ldrb	r3, [r7, #29]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
			uint8_t j = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	773b      	strb	r3, [r7, #28]
			for (j = 0; j < 4; j++){
 8000e52:	2300      	movs	r3, #0
 8000e54:	773b      	strb	r3, [r7, #28]
 8000e56:	e017      	b.n	8000e88 <bootloaderHandle_readOtpStatus+0xac>
				if( (0xFF & (otpBlockState >> (j * 8))) == RESET){
 8000e58:	7f3b      	ldrb	r3, [r7, #28]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10c      	bne.n	8000e82 <bootloaderHandle_readOtpStatus+0xa6>
					otpTotalState |= 0x01 << (4*i + j);
 8000e68:	7f7b      	ldrb	r3, [r7, #29]
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	7f3b      	ldrb	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	83fb      	strh	r3, [r7, #30]
			for (j = 0; j < 4; j++){
 8000e82:	7f3b      	ldrb	r3, [r7, #28]
 8000e84:	3301      	adds	r3, #1
 8000e86:	773b      	strb	r3, [r7, #28]
 8000e88:	7f3b      	ldrb	r3, [r7, #28]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d9e4      	bls.n	8000e58 <bootloaderHandle_readOtpStatus+0x7c>
		for (i = 0; i < 4; i++){
 8000e8e:	7f7b      	ldrb	r3, [r7, #29]
 8000e90:	3301      	adds	r3, #1
 8000e92:	777b      	strb	r3, [r7, #29]
 8000e94:	7f7b      	ldrb	r3, [r7, #29]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d9d3      	bls.n	8000e42 <bootloaderHandle_readOtpStatus+0x66>
				}
			}

		}
		status[1] = otpTotalState >> 8;
 8000e9a:	8bfb      	ldrh	r3, [r7, #30]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	727b      	strb	r3, [r7, #9]
		status[2] = otpTotalState;
 8000ea4:	8bfb      	ldrh	r3, [r7, #30]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	72bb      	strb	r3, [r7, #10]
		sendData(status, 3);
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2103      	movs	r1, #3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fa65 	bl	8001380 <sendData>

	} else {
		sendNACK();
	}
}
 8000eb6:	e001      	b.n	8000ebc <bootloaderHandle_readOtpStatus+0xe0>
		sendNACK();
 8000eb8:	f000 fa88 	bl	80013cc <sendNACK>
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800bcc0 	.word	0x0800bcc0
 8000ec8:	1fff7a00 	.word	0x1fff7a00

08000ecc <bootloaderHandle_disRwProtect>:

/*Helper function to handle BL_OTP_READ command */
static void bootloaderHandle_disRwProtect(uint8_t *bootloaderBuffer) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	uint8_t status[2] = {0};
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	81bb      	strh	r3, [r7, #12]

	//Total length of the command packet
	uint32_t commandPcktLength = bootloaderBuffer[0] + 1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]

	//Extract the CRC32 sent by the Host
	uint32_t hostCRC = *((uint32_t*) (bootloaderBuffer + commandPcktLength - 4));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]

	bool crcVerification = verifyCRC(&bootloaderBuffer[0], commandPcktLength - 4, hostCRC);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 fa77 	bl	80013e8 <verifyCRC>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]
	if (crcVerification == false) {
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01b      	beq.n	8000f4a <bootloaderHandle_disRwProtect+0x7e>

		status[0] = BL_DIS_RW_PROTECT;
 8000f12:	235c      	movs	r3, #92	; 0x5c
 8000f14:	733b      	strb	r3, [r7, #12]
		status[1] = configureFlashSectorRwProtection(bootloaderBuffer[3] << 8 | bootloaderBuffer[2], 0, 1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3302      	adds	r3, #2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f98c 	bl	8001250 <configureFlashSectorRwProtection>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	737b      	strb	r3, [r7, #13]

		sendData(status, 2);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fa1c 	bl	8001380 <sendData>
	} else {
		sendNACK();
	}
}
 8000f48:	e001      	b.n	8000f4e <bootloaderHandle_disRwProtect+0x82>
		sendNACK();
 8000f4a:	f000 fa3f 	bl	80013cc <sendNACK>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <bootloaderHandle_serverConnected>:

static void bootloaderHandle_serverConnected(void){
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
	uint8_t ackBuf;
	 ackBuf = BL_ACK;
 8000f5c:	23a5      	movs	r3, #165	; 0xa5
 8000f5e:	71fb      	strb	r3, [r7, #7]
	 sendData(&ackBuf, 1);
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	2101      	movs	r1, #1
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa0b 	bl	8001380 <sendData>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <getBootloaderVersion>:

static uint8_t getBootloaderVersion(void){
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
	 return (uint8_t) BL_VERSION;
 8000f76:	230b      	movs	r3, #11
 }
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <getMCUChipID>:

 //Read the chip identifier or device Identifier
static uint16_t getMCUChipID(void)
 {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 	and the die revision. It is part of the DBG_MCU component and is mapped on the
 	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
 	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
 	It is even accessible while the MCU is under system reset. */
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <getMCUChipID+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f94:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 }
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e0042000 	.word	0xe0042000

08000fa8 <getMCUChipRev>:

//Read the revision chip ID
static uint16_t getMCUChipRev(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
	uint16_t cRev;
	cRev = (uint16_t)(((DBGMCU->IDCODE) & 0xFFFF0000) >> 16);
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <getMCUChipRev+0x1c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	80fb      	strh	r3, [r7, #6]
	return  cRev;
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e0042000 	.word	0xe0042000

08000fc8 <getFlashRdpLevel>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f407xx RM
 */
static uint8_t getFlashRdpLevel(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
	uint8_t rdpStatus = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	77fb      	strb	r3, [r7, #31]
	FLASH_OBProgramInitTypeDef  obHandle;
	HAL_FLASHEx_OBGetConfig(&obHandle);
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fc69 	bl	80038ac <HAL_FLASHEx_OBGetConfig>
	rdpStatus = (uint8_t)obHandle.RDPLevel;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	77fb      	strb	r3, [r7, #31]

	//volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
	//rdpStatus =  (uint8_t)(*pOB_addr >> 8);
	return rdpStatus;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <setFlashRdpLevel>:

/*This function sets the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f407xx RM
 */
static uint8_t setFlashRdpLevel(uint8_t rdpLevel){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]

	 //Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <setFlashRdpLevel+0xa8>)
 8000ff4:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]

	//Option byte configuration unlock
	HAL_FLASH_OB_Unlock();
 8000ffa:	f002 fa8b 	bl	8003514 <HAL_FLASH_OB_Unlock>
	//Wait till no active operation on flash
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000ffe:	bf00      	nop
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <setFlashRdpLevel+0xac>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f9      	bne.n	8001000 <setFlashRdpLevel+0x18>

	switch(rdpLevel){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d020      	beq.n	8001054 <setFlashRdpLevel+0x6c>
 8001012:	2b02      	cmp	r3, #2
 8001014:	dc2b      	bgt.n	800106e <setFlashRdpLevel+0x86>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <setFlashRdpLevel+0x38>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d00d      	beq.n	800103a <setFlashRdpLevel+0x52>
 800101e:	e026      	b.n	800106e <setFlashRdpLevel+0x86>
					case 0:
						*pOPTCR |= (0xAA << 8);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f443 422a 	orr.w	r2, r3, #43520	; 0xaa00
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f043 0202 	orr.w	r2, r3, #2
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	601a      	str	r2, [r3, #0]
						break;
 8001038:	e01c      	b.n	8001074 <setFlashRdpLevel+0x8c>
					case 1:
						*pOPTCR |= (0x55 << 8);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f043 0202 	orr.w	r2, r3, #2
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	601a      	str	r2, [r3, #0]
						break;
 8001052:	e00f      	b.n	8001074 <setFlashRdpLevel+0x8c>
					case 2:
						*pOPTCR |= (0xCC << 8);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f443 424c 	orr.w	r2, r3, #52224	; 0xcc00
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	601a      	str	r2, [r3, #0]
						//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
						*pOPTCR |= ( 1 << 1);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f043 0202 	orr.w	r2, r3, #2
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	601a      	str	r2, [r3, #0]
						break;
 800106c:	e002      	b.n	8001074 <setFlashRdpLevel+0x8c>
					default:
						status = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
						break;
 8001072:	bf00      	nop
	}

	//Wait till no active operation on flash
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001074:	bf00      	nop
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <setFlashRdpLevel+0xac>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f9      	bne.n	8001076 <setFlashRdpLevel+0x8e>
	HAL_FLASH_OB_Lock();
 8001082:	f002 fa63 	bl	800354c <HAL_FLASH_OB_Lock>

	return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023c14 	.word	0x40023c14
 8001094:	40023c00 	.word	0x40023c00

08001098 <verifyAddress>:

//Verify the address sent by the host .
static uint8_t verifyAddress(uint32_t checkAddress, verifyAddressOption verifyOption) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]

	if (verifyOption == Read)
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d133      	bne.n	8001112 <verifyAddress+0x7a>
	{
		if (checkAddress >= FLASH_OTP_BASE && checkAddress <= FLASH_OTP_END) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <verifyAddress+0x100>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d905      	bls.n	80010be <verifyAddress+0x26>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a39      	ldr	r2, [pc, #228]	; (800119c <verifyAddress+0x104>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d801      	bhi.n	80010be <verifyAddress+0x26>
			return ADDR_VALID;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e066      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= CCMDATARAM_BASE && checkAddress <= CCM_RAM_END) {
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010c4:	d305      	bcc.n	80010d2 <verifyAddress+0x3a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <verifyAddress+0x108>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d801      	bhi.n	80010d2 <verifyAddress+0x3a>
			return ADDR_VALID;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e05c      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= OTP_AREA_BASE && checkAddress <= OTP_AREA_END) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a30      	ldr	r2, [pc, #192]	; (8001198 <verifyAddress+0x100>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d905      	bls.n	80010e6 <verifyAddress+0x4e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <verifyAddress+0x10c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d801      	bhi.n	80010e6 <verifyAddress+0x4e>
			return ADDR_VALID;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e052      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= OPT_BYTES_BASE && checkAddress <= OPT_BYTES_END) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <verifyAddress+0x110>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d905      	bls.n	80010fa <verifyAddress+0x62>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <verifyAddress+0x114>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d801      	bhi.n	80010fa <verifyAddress+0x62>
			return ADDR_VALID;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e048      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= FLASH_BASE && checkAddress <= FLASH_END) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001100:	d305      	bcc.n	800110e <verifyAddress+0x76>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001108:	d201      	bcs.n	800110e <verifyAddress+0x76>
			return ADDR_VALID;
 800110a:	2300      	movs	r3, #0
 800110c:	e03e      	b.n	800118c <verifyAddress+0xf4>
		} else {
			return ADDR_INVALID;
 800110e:	2301      	movs	r3, #1
 8001110:	e03c      	b.n	800118c <verifyAddress+0xf4>
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	else if (verifyOption == Go)
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d129      	bne.n	800116c <verifyAddress+0xd4>
	{
		if (checkAddress >= SRAM1_BASE && checkAddress <= SRAM1_END) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111e:	d305      	bcc.n	800112c <verifyAddress+0x94>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <verifyAddress+0x118>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d801      	bhi.n	800112c <verifyAddress+0x94>
			return ADDR_VALID;
 8001128:	2300      	movs	r3, #0
 800112a:	e02f      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= SRAM2_BASE && checkAddress <= SRAM2_END) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <verifyAddress+0x118>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d305      	bcc.n	8001140 <verifyAddress+0xa8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <verifyAddress+0x11c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d801      	bhi.n	8001140 <verifyAddress+0xa8>
			return ADDR_VALID;
 800113c:	2300      	movs	r3, #0
 800113e:	e025      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= FLASH_BASE && checkAddress <= FLASH_END) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001146:	d305      	bcc.n	8001154 <verifyAddress+0xbc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800114e:	d201      	bcs.n	8001154 <verifyAddress+0xbc>
			return ADDR_VALID;
 8001150:	2300      	movs	r3, #0
 8001152:	e01b      	b.n	800118c <verifyAddress+0xf4>
		} else if (checkAddress >= BKPSRAM_BASE && checkAddress <= BKPSRAM_END) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <verifyAddress+0x120>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d305      	bcc.n	8001168 <verifyAddress+0xd0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <verifyAddress+0x124>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d801      	bhi.n	8001168 <verifyAddress+0xd0>
			return ADDR_VALID;
 8001164:	2300      	movs	r3, #0
 8001166:	e011      	b.n	800118c <verifyAddress+0xf4>
		} else {
			return ADDR_INVALID;
 8001168:	2301      	movs	r3, #1
 800116a:	e00f      	b.n	800118c <verifyAddress+0xf4>
		}
	}
	else if (verifyOption == Otp){
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d10b      	bne.n	800118a <verifyAddress+0xf2>
		if (checkAddress >= OTP_AREA_BASE && checkAddress <= OTP_AREA_END) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a08      	ldr	r2, [pc, #32]	; (8001198 <verifyAddress+0x100>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d905      	bls.n	8001186 <verifyAddress+0xee>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <verifyAddress+0x10c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d801      	bhi.n	8001186 <verifyAddress+0xee>
			return ADDR_VALID;
 8001182:	2300      	movs	r3, #0
 8001184:	e002      	b.n	800118c <verifyAddress+0xf4>
		}
		else {
			return ADDR_INVALID;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <verifyAddress+0xf4>
		}
	}
	return ADDR_INVALID;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	1fff77ff 	.word	0x1fff77ff
 800119c:	1fff7a0f 	.word	0x1fff7a0f
 80011a0:	10010000 	.word	0x10010000
 80011a4:	1fff7aff 	.word	0x1fff7aff
 80011a8:	1fffbfff 	.word	0x1fffbfff
 80011ac:	1fffc00f 	.word	0x1fffc00f
 80011b0:	2001c000 	.word	0x2001c000
 80011b4:	20020000 	.word	0x20020000
 80011b8:	40024000 	.word	0x40024000
 80011bc:	40025000 	.word	0x40025000

080011c0 <executeFlashErase>:

static uint8_t executeFlashErase(uint8_t sectorNumber, uint8_t numberOfSectors) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	// if sectorNumber = 0xff , that means mass erase !
	FLASH_EraseInitTypeDef flashEraseHandle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (numberOfSectors > MCU_NUMBER_OF_SECTORS)
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d901      	bls.n	80011da <executeFlashErase+0x1a>
		return INVALID_SECTOR;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e035      	b.n	8001246 <executeFlashErase+0x86>

	if ((sectorNumber == 0xff) || (sectorNumber <= (MCU_NUMBER_OF_SECTORS - 1))) {
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2bff      	cmp	r3, #255	; 0xff
 80011de:	d002      	beq.n	80011e6 <executeFlashErase+0x26>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b0b      	cmp	r3, #11
 80011e4:	d82e      	bhi.n	8001244 <executeFlashErase+0x84>
		if (sectorNumber == (uint8_t) 0xff) {
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2bff      	cmp	r3, #255	; 0xff
 80011ea:	d102      	bne.n	80011f2 <executeFlashErase+0x32>
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e012      	b.n	8001218 <executeFlashErase+0x58>
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remaniningSector = MCU_NUMBER_OF_SECTORS - sectorNumber;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f1c3 030c 	rsb	r3, r3, #12
 80011f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (numberOfSectors > remaniningSector) {
 80011fc:	79ba      	ldrb	r2, [r7, #6]
 80011fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001202:	429a      	cmp	r2, r3
 8001204:	d902      	bls.n	800120c <executeFlashErase+0x4c>
				numberOfSectors = remaniningSector;
 8001206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120a:	71bb      	strb	r3, [r7, #6]
			}
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
			flashEraseHandle.Sector = sectorNumber; // This is the initial sector
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	61bb      	str	r3, [r7, #24]
			flashEraseHandle.NbSectors = numberOfSectors;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	61fb      	str	r3, [r7, #28]
		}
		flashEraseHandle.Banks = FLASH_BANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 800121c:	f002 f948 	bl	80034b0 <HAL_FLASH_Unlock>
		flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 8001224:	f107 020c 	add.w	r2, r7, #12
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 facc 	bl	80037cc <HAL_FLASHEx_Erase>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 800123a:	f002 f95b 	bl	80034f4 <HAL_FLASH_Lock>

		return status;
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	e000      	b.n	8001246 <executeFlashErase+0x86>
	}

	return INVALID_SECTOR;
 8001244:	2304      	movs	r3, #4
}
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <configureFlashSectorRwProtection>:
 FLASH_SR register
 2. Write the desired option value in the FLASH_OPTCR register.
 3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
 4. Wait for the BSY bit to be cleared.
 */
static uint8_t configureFlashSectorRwProtection(uint16_t sectorDetails, uint8_t protectionMode, uint8_t disable) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
 800125a:	460b      	mov	r3, r1
 800125c:	717b      	strb	r3, [r7, #5]
 800125e:	4613      	mov	r3, r2
 8001260:	713b      	strb	r3, [r7, #4]
	//protection_mode =1 , means write protect of the user flash sectors
	//protection_mode =2, means read/write protect of the user flash sectors
	//According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <configureFlashSectorRwProtection+0xe8>)
 8001264:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	//wait till no active operation on flash
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001266:	bf00      	nop
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <configureFlashSectorRwProtection+0xec>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f9      	bne.n	8001268 <configureFlashSectorRwProtection+0x18>

	if (disable){
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d027      	beq.n	80012ca <configureFlashSectorRwProtection+0x7a>
		//disable all r/w protection on sectors
		//Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 800127a:	f002 f94b 	bl	8003514 <HAL_FLASH_OB_Unlock>
		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800127e:	bf00      	nop
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <configureFlashSectorRwProtection+0xec>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f9      	bne.n	8001280 <configureFlashSectorRwProtection+0x30>
		//clear the 31st bit (default state)
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	601a      	str	r2, [r3, #0]
		//clear the protection : make all bits belonging to sectors as 1
		*pOPTCR |= (sectorDetails << 16);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	0412      	lsls	r2, r2, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	601a      	str	r2, [r3, #0]
		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f043 0202 	orr.w	r2, r3, #2
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012b2:	bf00      	nop
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <configureFlashSectorRwProtection+0xec>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <configureFlashSectorRwProtection+0x64>
		HAL_FLASH_OB_Lock();
 80012c0:	f002 f944 	bl	800354c <HAL_FLASH_OB_Lock>
		status = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e030      	b.n	800132c <configureFlashSectorRwProtection+0xdc>
	}
	else{
		if (protectionMode == 1){
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d128      	bne.n	8001322 <configureFlashSectorRwProtection+0xd2>
	           //we are putting write protection on the sectors encoded in sector_details argument
				//Option byte configuration unlock
				HAL_FLASH_OB_Unlock();
 80012d0:	f002 f920 	bl	8003514 <HAL_FLASH_OB_Unlock>
				//wait till no active operation on flash
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012d4:	bf00      	nop
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <configureFlashSectorRwProtection+0xec>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <configureFlashSectorRwProtection+0x86>
				//here we are setting just write protection for the sectors
				//clear the 31st bit
				//please refer : Flash option control register (FLASH_OPTCR) in RM
				*pOPTCR &= ~(1 << 31);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	601a      	str	r2, [r3, #0]
				//put write protection on sectors
				*pOPTCR &= ~ (sectorDetails << 16);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	0412      	lsls	r2, r2, #16
 80012f6:	43d2      	mvns	r2, r2
 80012f8:	401a      	ands	r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	601a      	str	r2, [r3, #0]
				//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
				*pOPTCR |= ( 1 << 1);
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	601a      	str	r2, [r3, #0]
				//wait till no active operation on flash
				while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800130a:	bf00      	nop
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <configureFlashSectorRwProtection+0xec>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f9      	bne.n	800130c <configureFlashSectorRwProtection+0xbc>
				HAL_FLASH_OB_Lock();
 8001318:	f002 f918 	bl	800354c <HAL_FLASH_OB_Lock>
				status = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e004      	b.n	800132c <configureFlashSectorRwProtection+0xdc>
		}

		else if (protectionMode == 2){
 8001322:	797b      	ldrb	r3, [r7, #5]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d101      	bne.n	800132c <configureFlashSectorRwProtection+0xdc>
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
			HAL_FLASH_OB_Lock();
			status = 0;
#endif
#ifdef STM32F407xx
			status = 1;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}
	return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c14 	.word	0x40023c14
 800133c:	40023c00 	.word	0x40023c00

08001340 <readOBRwProtectionStatus>:

static uint16_t readOBRwProtectionStatus(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001346:	f002 f8e5 	bl	8003514 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4618      	mov	r0, r3
 800134e:	f002 faad 	bl	80038ac <HAL_FLASHEx_OBGetConfig>

	//Get SPRMOD bit (PCROP Protection mode activated)
	OBInit.WRPSector &= 0x7fff;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001358:	60fb      	str	r3, [r7, #12]
	OBInit.WRPSector |= ((*(__IO uint8_t *)(OPTCR_BYTE3_ADDRESS)) & 0x80);
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <readOBRwProtectionStatus+0x3c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

	//Lock back .
	HAL_FLASH_Lock();
 800136a:	f002 f8c3 	bl	80034f4 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b29b      	uxth	r3, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c17 	.word	0x40023c17

08001380 <sendData>:

 /* This function writes data in to C_UART */
static void sendData(uint8_t * pBuffer, uint32_t len)
 {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	uint8_t * auxBuffer = malloc(len + 1);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fc44 	bl	800ac1c <malloc>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	*auxBuffer = len;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	701a      	strb	r2, [r3, #0]
	memcpy(auxBuffer + 1, pBuffer, len);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fc55 	bl	800ac58 <memcpy>
	udpServer_send(auxBuffer, len + 1);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f9e1 	bl	8001780 <udpServer_send>
	free(auxBuffer);
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f009 fc34 	bl	800ac2c <free>
 }
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <sendNACK>:

 /*This function sends NACK */
static void sendNACK(void)
 {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 80013d2:	237f      	movs	r3, #127	; 0x7f
 80013d4:	71fb      	strb	r3, [r7, #7]
 	sendData(&nack, 1);
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	2101      	movs	r1, #1
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffd0 	bl	8001380 <sendData>
 }
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <verifyCRC>:

 /*This verifies the CRC of the given buffer in pData*/
static uint8_t verifyCRC (uint8_t *pData, uint32_t length, uint32_t hostCRC)
 {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue = 0xff;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	61fb      	str	r3, [r7, #28]

     for (uint32_t i = 0 ; i < length ; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	e00f      	b.n	800141e <verifyCRC+0x36>
 	{
         uint32_t iData = pData[i];
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &iData, 1);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2201      	movs	r2, #1
 800140e:	4619      	mov	r1, r3
 8001410:	480e      	ldr	r0, [pc, #56]	; (800144c <verifyCRC+0x64>)
 8001412:	f000 fea8 	bl	8002166 <HAL_CRC_Accumulate>
 8001416:	61f8      	str	r0, [r7, #28]
     for (uint32_t i = 0 ; i < length ; i++)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3301      	adds	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3eb      	bcc.n	80013fe <verifyCRC+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
    __HAL_CRC_DR_RESET(&hcrc);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <verifyCRC+0x64>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <verifyCRC+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	609a      	str	r2, [r3, #8]

 	if(uwCRCValue == hostCRC)
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d101      	bne.n	8001442 <verifyCRC+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <verifyCRC+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8001442:	2301      	movs	r3, #1
 }
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000238 	.word	0x20000238

08001450 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 8001454:	f002 f82c 	bl	80034b0 <HAL_FLASH_Unlock>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800146e:	d216      	bcs.n	800149e <FLASH_If_Erase+0x42>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = FLASH_SECTOR_5;
 8001478:	2305      	movs	r3, #5
 800147a:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 7;
 800147c:	2307      	movs	r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001480:	2302      	movs	r3, #2
 8001482:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8001484:	f107 020c 	add.w	r2, r7, #12
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f002 f99c 	bl	80037cc <HAL_FLASHEx_Erase>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <FLASH_If_Erase+0x46>
      return (1);
 800149a:	2301      	movs	r3, #1
 800149c:	e002      	b.n	80014a4 <FLASH_If_Erase+0x48>
  }
  else
  {
    return (1);
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <FLASH_If_Erase+0x48>
  }

  return (0);
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e026      	b.n	8001512 <FLASH_If_Write+0x66>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	2002      	movs	r0, #2
 80014da:	f001 ff95 	bl	8003408 <HAL_FLASH_Program>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <FLASH_If_Write+0x5c>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	440b      	add	r3, r1
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <FLASH_If_Write+0x50>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 80014f8:	2302      	movs	r3, #2
 80014fa:	e014      	b.n	8001526 <FLASH_If_Write+0x7a>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	1d1a      	adds	r2, r3, #4
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e001      	b.n	800150c <FLASH_If_Write+0x60>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 8001508:	2301      	movs	r3, #1
 800150a:	e00c      	b.n	8001526 <FLASH_If_Write+0x7a>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	429a      	cmp	r2, r3
 8001518:	d204      	bcs.n	8001524 <FLASH_If_Write+0x78>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <FLASH_If_Write+0x84>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d9cf      	bls.n	80014c4 <FLASH_If_Write+0x18>
    }
  }

  return (0);
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	080ffffb 	.word	0x080ffffb

08001534 <FLASH_If_UnInit>:
  * @brief  locks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_UnInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
   HAL_FLASH_Lock();
 8001538:	f001 ffdc 	bl	80034f4 <HAL_FLASH_Lock>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <openFile>:
* @param const char* fname filename
   * @param const char* mode
* @param u8_t write mode 1 write 0 read
* @returns file handle
  */
static void* openFile(const char *fname, const char *mode, u8_t write) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	4613      	mov	r3, r2
 800154c:	71fb      	strb	r3, [r7, #7]
	iapFlashStr.wrMode = write;
 800154e:	4a17      	ldr	r2, [pc, #92]	; (80015ac <openFile+0x6c>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	7053      	strb	r3, [r2, #1]

	if (iapFlashStr.wrMode == 1) {
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <openFile+0x6c>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10e      	bne.n	800157a <openFile+0x3a>
		FLASH_If_Init(); //Unlock
 800155c:	f7ff ff78 	bl	8001450 <FLASH_If_Init>
		iapFlashStr.flashAddress = USER_FLASH_FIRST_PAGE_ADDRESS; //FLASH start address
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <openFile+0x6c>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <openFile+0x70>)
 8001564:	605a      	str	r2, [r3, #4]
		if (FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS) == 0) //Erase user area FLASH data
 8001566:	4812      	ldr	r0, [pc, #72]	; (80015b0 <openFile+0x70>)
 8001568:	f7ff ff78 	bl	800145c <FLASH_If_Erase>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d111      	bne.n	8001596 <openFile+0x56>
				{
			iapFlashStr.initFlat = 1; //mark initialization is complete
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <openFile+0x6c>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e00d      	b.n	8001596 <openFile+0x56>
		}
	} //If it is a read file mode
	else if (memcmp(fname, "firmwareSTM32.bin", strlen("firmwareSTM32.bin")) == 0) //Can read internal FLASH
 800157a:	2211      	movs	r2, #17
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <openFile+0x74>)
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f009 fb5c 	bl	800ac3c <memcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <openFile+0x56>
			{
		iapFlashStr.initFlat = 1; //mark initialization is complete
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <openFile+0x6c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
		iapFlashStr.flashAddress = USER_FLASH_FIRST_PAGE_ADDRESS; //FLASH start address
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <openFile+0x6c>)
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <openFile+0x70>)
 8001594:	605a      	str	r2, [r3, #4]
	}
	return (iapFlashStr.initFlat) ? (&iapFlashStr) : NULL; //If the initialization succeeds, return a valid handle
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <openFile+0x6c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <openFile+0x62>
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <openFile+0x6c>)
 80015a0:	e000      	b.n	80015a4 <openFile+0x64>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000008c 	.word	0x2000008c
 80015b0:	08010000 	.word	0x08010000
 80015b4:	0800bcc4 	.word	0x0800bcc4

080015b8 <closeFile>:
   * @param None
   * @param None
   * @param None
   * @returns None
   */
static void closeFile(void *handle) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	61fb      	str	r3, [r7, #28]

	FLASH_If_UnInit(); //FLASH lock
 80015c4:	f7ff ffb6 	bl	8001534 <FLASH_If_UnInit>
	Filehandle->initFlat = 0;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	if (Filehandle->wrMode) //If the file was previously written
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d010      	beq.n	80015f8 <closeFile+0x40>
	{
		void (*jumpAddress)(void);

		uint32_t mspValue = *(volatile uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <closeFile+0x48>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f383 8808 	msr	MSP, r3
}
 80015e6:	bf00      	nop

		//This function comes from CMSIS.
		__set_MSP(mspValue);

		uint32_t jumpToApplication = *(volatile uint32_t*) (FLASH_APP_BASE_ADDRESS + 4);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <closeFile+0x4c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	617b      	str	r3, [r7, #20]

		jumpAddress = (void*) jumpToApplication;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	613b      	str	r3, [r7, #16]

		//3. jump to reset handler of the user application
		jumpAddress();
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4798      	blx	r3

		while (1)
 80015f6:	e7fe      	b.n	80015f6 <closeFile+0x3e>
			;
	}

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	08010000 	.word	0x08010000
 8001604:	08010004 	.word	0x08010004

08001608 <readFile>:
* @param handle file handle
* @param *buf Save the cache of data
* @param bytes The length of the data read
* @returns returns the read data length is less than 0 error
   */
static int readFile(void *handle, void *buf, int bytes) {
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	613b      	str	r3, [r7, #16]

	if (!Filehandle->initFlat) //not initialized
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <readFile+0x1e>
	{
		return ERR_MEM;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e01d      	b.n	8001662 <readFile+0x5a>
	}
	uint16_t Count;
	for (Count = 0; (Count < bytes) && (Filehandle->flashAddress <= FLASH_END);
 8001626:	2300      	movs	r3, #0
 8001628:	82fb      	strh	r3, [r7, #22]
 800162a:	e010      	b.n	800164e <readFile+0x46>
			Count++, Filehandle->flashAddress++) {
		((uint8_t*) buf)[Count] = *((__IO uint8_t*) Filehandle->flashAddress);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4413      	add	r3, r2
 8001638:	780a      	ldrb	r2, [r1, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
			Count++, Filehandle->flashAddress++) {
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	3301      	adds	r3, #1
 8001642:	82fb      	strh	r3, [r7, #22]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
	for (Count = 0; (Count < bytes) && (Filehandle->flashAddress <= FLASH_END);
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dd04      	ble.n	8001660 <readFile+0x58>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800165e:	d3e5      	bcc.n	800162c <readFile+0x24>
	}
	return Count;
 8001660:	8afb      	ldrh	r3, [r7, #22]
}
 8001662:	4618      	mov	r0, r3
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <writeFile>:
* Write file data
* @param handle file handle
* @param struct pbuf* p Data cache structure The data cache inside is all the data that needs to be written.
* @returns is less than 0 for error
   */
static int writeFile(void *handle, struct pbuf *p) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	uint16_t Count;
	iapFlash_Struct *Filehandle = (iapFlash_Struct*) handle;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60fb      	str	r3, [r7, #12]

	if (!Filehandle->initFlat) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <writeFile+0x1c>

		return ERR_MEM;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e01f      	b.n	80016ca <writeFile+0x5c>
	}
	Count = p->len / 4 + ((p->len % 4) > 0); //Get the data to be written
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	895b      	ldrh	r3, [r3, #10]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	b29a      	uxth	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	895b      	ldrh	r3, [r3, #10]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	817b      	strh	r3, [r7, #10]

	if (FLASH_If_Write((__IO uint32_t*) &Filehandle->flashAddress,
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1d18      	adds	r0, r3, #4
			(uint32_t*) p->payload, Count) == 0) {
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
	if (FLASH_If_Write((__IO uint32_t*) &Filehandle->flashAddress,
 80016b4:	897a      	ldrh	r2, [r7, #10]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fef8 	bl	80014ac <FLASH_If_Write>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <writeFile+0x58>

		return ERR_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e001      	b.n	80016ca <writeFile+0x5c>
	} else {

	}
	return ERR_MEM;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <udpServer_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udpServer_init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   //struct udp_pcb *upcb;
   err_t err;

   /* Create a new UDP control block  */
   udp_pcb = udp_new();
 80016da:	f006 ff71 	bl	80085c0 <udp_new>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <udpServer_init+0x54>)
 80016e2:	6013      	str	r3, [r2, #0]

   if (udp_pcb)
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <udpServer_init+0x54>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d019      	beq.n	8001720 <udpServer_init+0x4c>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(udp_pcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <udpServer_init+0x54>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2207      	movs	r2, #7
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <udpServer_init+0x58>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fde3 	bl	80082c0 <udp_bind>
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]

      if(err == ERR_OK)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <udpServer_init+0x42>
      {
        /* Set a receive callback for the upcb */
        udp_recv(udp_pcb, udpServer_receiveCallback, NULL);
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <udpServer_init+0x54>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <udpServer_init+0x5c>)
 800170e:	4618      	mov	r0, r3
 8001710:	f006 fef4 	bl	80084fc <udp_recv>
      else
      {
        udp_remove(udp_pcb);
      }
   }
}
 8001714:	e004      	b.n	8001720 <udpServer_init+0x4c>
        udp_remove(udp_pcb);
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <udpServer_init+0x54>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f006 ff0e 	bl	800853c <udp_remove>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000234 	.word	0x20000234
 800172c:	0800d49c 	.word	0x0800d49c
 8001730:	08001735 	.word	0x08001735

08001734 <udpServer_receiveCallback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udpServer_receiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, port);
 8001742:	8b3b      	ldrh	r3, [r7, #24]
 8001744:	461a      	mov	r2, r3
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f006 fe41 	bl	80083d0 <udp_connect>

  memcpy(udp_pcb, upcb, sizeof(struct udp_pcb));
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <udpServer_receiveCallback+0x44>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	4618      	mov	r0, r3
 8001758:	f009 fa7e 	bl	800ac58 <memcpy>
  pbuf_copy_partial(p, &bootloaderBuffer, p -> tot_len, 0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	891a      	ldrh	r2, [r3, #8]
 8001760:	2300      	movs	r3, #0
 8001762:	4906      	ldr	r1, [pc, #24]	; (800177c <udpServer_receiveCallback+0x48>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f005 fe7f 	bl	8007468 <pbuf_copy_partial>

  /* Free the p buffer */
  pbuf_free(p);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f005 fc82 	bl	8007074 <pbuf_free>

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000234 	.word	0x20000234
 800177c:	200001f4 	.word	0x200001f4

08001780 <udpServer_send>:


void udpServer_send(uint8_t * pBuffer, uint16_t length){
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]

	struct pbuf * p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001792:	4619      	mov	r1, r3
 8001794:	2036      	movs	r0, #54	; 0x36
 8001796:	f005 f98b 	bl	8006ab0 <pbuf_alloc>
 800179a:	60f8      	str	r0, [r7, #12]

	pbuf_take(p, pBuffer, length);
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	461a      	mov	r2, r3
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f005 fefc 	bl	80075a0 <pbuf_take>

	udp_send(udp_pcb, p);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <udpServer_send+0x4c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fb9c 	bl	8007eec <udp_send>

	/* Free the p buffer */
	pbuf_free(p);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f005 fc5d 	bl	8007074 <pbuf_free>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(udp_pcb);
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <udpServer_send+0x4c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fe74 	bl	80084ac <udp_disconnect>

}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000234 	.word	0x20000234

080017d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_CRC_Init+0x20>)
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <MX_CRC_Init+0x24>)
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_CRC_Init+0x20>)
 80017dc:	f000 fca7 	bl	800212e <HAL_CRC_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017e6:	f000 f9bf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000238 	.word	0x20000238
 80017f4:	40023000 	.word	0x40023000

080017f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x3c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10d      	bne.n	8001826 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_CRC_MspInit+0x40>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_CRC_MspInit+0x40>)
 8001814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <HAL_CRC_MspInit+0x40>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023000 	.word	0x40023000
 8001838:	40023800 	.word	0x40023800

0800183c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <MX_GPIO_Init+0xe8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <MX_GPIO_Init+0xe8>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_GPIO_Init+0xe8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_GPIO_Init+0xe8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c8:	4817      	ldr	r0, [pc, #92]	; (8001928 <MX_GPIO_Init+0xec>)
 80018ca:	f002 fac5 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <MX_GPIO_Init+0xf0>)
 80018e2:	f002 f905 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018e6:	2304      	movs	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_GPIO_Init+0xf4>)
 80018fa:	f002 f8f9 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xec>)
 8001918:	f002 f8ea 	bl	8003af0 <HAL_GPIO_Init>

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400

08001934 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <MX_I2C1_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <MX_I2C1_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_I2C1_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_I2C1_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_I2C1_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_I2C1_Init+0x50>)
 8001972:	f002 fa8b 	bl	8003e8c <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 f8f4 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000240 	.word	0x20000240
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <HAL_I2C_MspInit+0x84>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12b      	bne.n	8001a0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23c0      	movs	r3, #192	; 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d2:	2312      	movs	r3, #18
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019de:	2304      	movs	r3, #4
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <HAL_I2C_MspInit+0x8c>)
 80019ea:	f002 f881 	bl	8003af0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_I2C_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020400 	.word	0x40020400

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a26:	f000 fa07 	bl	8001e38 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2a:	f000 f833 	bl	8001a94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2e:	f7ff ff05 	bl	800183c <MX_GPIO_Init>
  MX_CRC_Init();
 8001a32:	f7ff fecd 	bl	80017d0 <MX_CRC_Init>
  MX_LWIP_Init();
 8001a36:	f002 ffcd 	bl	80049d4 <MX_LWIP_Init>
  MX_I2C1_Init();
 8001a3a:	f7ff ff7b 	bl	8001934 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t bootloaderInitRam    = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
  uint8_t bootloaderInitButton = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71bb      	strb	r3, [r7, #6]

  bootloaderInitRam = * (volatile uint8_t *) BOOTLOADER_INIT_ADDRESS;
 8001a46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	71fb      	strb	r3, [r7, #7]
  bootloaderInitButton = HAL_GPIO_ReadPin(BOOTLOADER_RESET_PORT, BOOTLOADER_RESET_PIN);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <main+0x6c>)
 8001a52:	f002 f9e9 	bl	8003e28 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (bootloaderInitRam == BOOTLOADER_INIT_VALUE || bootloaderInitButton == RESET){
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2baa      	cmp	r3, #170	; 0xaa
 8001a5e:	d002      	beq.n	8001a66 <main+0x46>
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <main+0x5e>
	  BOOTLOADER_START = BOOTLOADER_RESET_VALUE;
 8001a66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a6a:	22ff      	movs	r2, #255	; 0xff
 8001a6c:	701a      	strb	r2, [r3, #0]
  	  udpServer_init();
 8001a6e:	f7ff fe31 	bl	80016d4 <udpServer_init>
  	  tftp_init(&tftpContext);
 8001a72:	4807      	ldr	r0, [pc, #28]	; (8001a90 <main+0x70>)
 8001a74:	f003 fff2 	bl	8005a5c <tftp_init>
  	  bootloaderReadData();
 8001a78:	f7fe fd7e 	bl	8000578 <bootloaderReadData>
 8001a7c:	e001      	b.n	8001a82 <main+0x62>
  }
  else{
  	  bootloaderJumpToUserApp();
 8001a7e:	f7fe feab 	bl	80007d8 <bootloaderJumpToUserApp>
 8001a82:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	0800d404 	.word	0x0800d404

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	; 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2230      	movs	r2, #48	; 0x30
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f009 f8e6 	bl	800ac74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <SystemClock_Config+0xcc>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	4a27      	ldr	r2, [pc, #156]	; (8001b60 <SystemClock_Config+0xcc>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <SystemClock_Config+0xcc>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <SystemClock_Config+0xd0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2310      	movs	r3, #16
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b04:	2308      	movs	r3, #8
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b08:	23a8      	movs	r3, #168	; 0xa8
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b10:	2307      	movs	r3, #7
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fafb 	bl	8004114 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b24:	f000 f820 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2105      	movs	r1, #5
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fd5c 	bl	8004604 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b52:	f000 f809 	bl	8001b68 <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	; 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bb6:	2007      	movs	r0, #7
 8001bb8:	f000 fa86 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f95e 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <_kill+0x20>)
 8001c40:	2216      	movs	r2, #22
 8001c42:	601a      	str	r2, [r3, #0]
	return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200085e4 	.word	0x200085e4

08001c58 <_exit>:

void _exit (int status)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe5 	bl	8001c34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6a:	e7fe      	b.n	8001c6a <_exit+0x12>

08001c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
	}

return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
	}
	return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:

int _close(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d205      	bcs.n	8001d84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <_sbrk+0x6c>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a06      	ldr	r2, [pc, #24]	; (8001dac <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	20020000 	.word	0x20020000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000094 	.word	0x20000094
 8001db0:	200085f8 	.word	0x200085f8
 8001db4:	200085e4 	.word	0x200085e4

08001db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <SystemInit+0x28>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <SystemInit+0x28>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SystemInit+0x28>)
 8001dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd2:	609a      	str	r2, [r3, #8]
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001de8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dea:	e003      	b.n	8001df4 <LoopCopyDataInit>

08001dec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001df0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001df2:	3104      	adds	r1, #4

08001df4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001df4:	480b      	ldr	r0, [pc, #44]	; (8001e24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001df8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dfc:	d3f6      	bcc.n	8001dec <CopyDataInit>
  ldr  r2, =_sbss
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e00:	e002      	b.n	8001e08 <LoopFillZerobss>

08001e02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e04:	f842 3b04 	str.w	r3, [r2], #4

08001e08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e0c:	d3f9      	bcc.n	8001e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e0e:	f7ff ffd3 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e12:	f008 fedf 	bl	800abd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e16:	f7ff fe03 	bl	8001a20 <main>
  bx  lr    
 8001e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e20:	0800d60c 	.word	0x0800d60c
  ldr  r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e28:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001e2c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001e30:	200085f4 	.word	0x200085f4

08001e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_Init+0x40>)
 8001e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_Init+0x40>)
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_Init+0x40>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f931 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f808 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff fe84 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f93b 	bl	8002116 <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f000 f911 	bl	80020de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_InitTick+0x5c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	20000294 	.word	0x20000294

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000294 	.word	0x20000294

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_Delay+0x44>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f7ff ff8e 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff47 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff5c 	bl	8001fac <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff8e 	bl	800201c <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffb0 	bl	8002084 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e00e      	b.n	800215e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	795b      	ldrb	r3, [r3, #5]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fb51 	bl	80017f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2202      	movs	r2, #2
 800217a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e00a      	b.n	8002198 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	441a      	add	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3f0      	bcc.n	8002182 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80021ae:	693b      	ldr	r3, [r7, #16]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80021cc:	4baa      	ldr	r3, [pc, #680]	; (8002478 <HAL_ETH_Init+0x2bc>)
 80021ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e183      	b.n	80024ea <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f002 fd2c 	bl	8004c54 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	4b9e      	ldr	r3, [pc, #632]	; (800247c <HAL_ETH_Init+0x2c0>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	4a9d      	ldr	r2, [pc, #628]	; (800247c <HAL_ETH_Init+0x2c0>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6453      	str	r3, [r2, #68]	; 0x44
 800220c:	4b9b      	ldr	r3, [pc, #620]	; (800247c <HAL_ETH_Init+0x2c0>)
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002218:	4b99      	ldr	r3, [pc, #612]	; (8002480 <HAL_ETH_Init+0x2c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_ETH_Init+0x2c4>)
 800221e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002222:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002224:	4b96      	ldr	r3, [pc, #600]	; (8002480 <HAL_ETH_Init+0x2c4>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4994      	ldr	r1, [pc, #592]	; (8002480 <HAL_ETH_Init+0x2c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800224a:	f7ff fe5b 	bl	8001f04 <HAL_GetTick>
 800224e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002250:	e011      	b.n	8002276 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002252:	f7ff fe57 	bl	8001f04 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002260:	d909      	bls.n	8002276 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e139      	b.n	80024ea <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e4      	bne.n	8002252 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f023 031c 	bic.w	r3, r3, #28
 8002296:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002298:	f002 fb7c 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 800229c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4a78      	ldr	r2, [pc, #480]	; (8002484 <HAL_ETH_Init+0x2c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d908      	bls.n	80022b8 <HAL_ETH_Init+0xfc>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_ETH_Init+0x2cc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d804      	bhi.n	80022b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e027      	b.n	8002308 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4a73      	ldr	r2, [pc, #460]	; (8002488 <HAL_ETH_Init+0x2cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <HAL_ETH_Init+0x116>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4a6d      	ldr	r2, [pc, #436]	; (8002478 <HAL_ETH_Init+0x2bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d204      	bcs.n	80022d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f043 030c 	orr.w	r3, r3, #12
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e01a      	b.n	8002308 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4a68      	ldr	r2, [pc, #416]	; (8002478 <HAL_ETH_Init+0x2bc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d303      	bcc.n	80022e2 <HAL_ETH_Init+0x126>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4a6b      	ldr	r2, [pc, #428]	; (800248c <HAL_ETH_Init+0x2d0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d911      	bls.n	8002306 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_ETH_Init+0x2d0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d908      	bls.n	80022fc <HAL_ETH_Init+0x140>
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_ETH_Init+0x2d4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d804      	bhi.n	80022fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e005      	b.n	8002308 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	e000      	b.n	8002308 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002306:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002310:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002314:	2100      	movs	r1, #0
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fb98 	bl	8002a4c <HAL_ETH_WritePHYRegister>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fd4d 	bl	8002dc8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0d7      	b.n	80024ea <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800233a:	20ff      	movs	r0, #255	; 0xff
 800233c:	f7ff fdee 	bl	8001f1c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a5 	beq.w	8002494 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800234a:	f7ff fddb 	bl	8001f04 <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb0f 	bl	800297c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800235e:	f7ff fdd1 	bl	8001f04 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d90f      	bls.n	8002390 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fd26 	bl	8002dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0ac      	b.n	80024ea <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0da      	beq.n	8002350 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800239a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fb53 	bl	8002a4c <HAL_ETH_WritePHYRegister>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fd08 	bl	8002dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023c0:	2301      	movs	r3, #1
 80023c2:	e092      	b.n	80024ea <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff fd9e 	bl	8001f04 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	461a      	mov	r2, r3
 80023d0:	2101      	movs	r1, #1
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fad2 	bl	800297c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023d8:	f7ff fd94 	bl	8001f04 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d90f      	bls.n	800240a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80023ee:	6939      	ldr	r1, [r7, #16]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fce9 	bl	8002dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e06f      	b.n	80024ea <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0da      	beq.n	80023ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	461a      	mov	r2, r3
 800241a:	2110      	movs	r1, #16
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 faad 	bl	800297c <HAL_ETH_ReadPHYRegister>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fcca 	bl	8002dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800243c:	2301      	movs	r3, #1
 800243e:	e054      	b.n	80024ea <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	e002      	b.n	800245a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	e035      	b.n	80024d8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e030      	b.n	80024d8 <HAL_ETH_Init+0x31c>
 8002476:	bf00      	nop
 8002478:	03938700 	.word	0x03938700
 800247c:	40023800 	.word	0x40023800
 8002480:	40013800 	.word	0x40013800
 8002484:	01312cff 	.word	0x01312cff
 8002488:	02160ebf 	.word	0x02160ebf
 800248c:	05f5e0ff 	.word	0x05f5e0ff
 8002490:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 facd 	bl	8002a4c <HAL_ETH_WritePHYRegister>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fc82 	bl	8002dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e00c      	b.n	80024ea <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80024d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024d4:	f7ff fd22 	bl	8001f1c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fc74 	bl	8002dc8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop

080024f4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_ETH_DMATxDescListInit+0x20>
 8002510:	2302      	movs	r3, #2
 8002512:	e052      	b.n	80025ba <HAL_ETH_DMATxDescListInit+0xc6>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e030      	b.n	8002592 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	015b      	lsls	r3, r3, #5
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4413      	add	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002540:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	461a      	mov	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	d208      	bcs.n	8002586 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3301      	adds	r3, #1
 8002578:	015b      	lsls	r3, r3, #5
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	461a      	mov	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	e002      	b.n	800258c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3ca      	bcc.n	8002530 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a4:	3310      	adds	r3, #16
 80025a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b087      	sub	sp, #28
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ETH_DMARxDescListInit+0x20>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e056      	b.n	8002694 <HAL_ETH_DMARxDescListInit+0xce>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e034      	b.n	800266c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015b      	lsls	r3, r3, #5
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002612:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800261a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	461a      	mov	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	3b01      	subs	r3, #1
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	429a      	cmp	r2, r3
 800264c:	d208      	bcs.n	8002660 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	4413      	add	r3, r2
 8002658:	461a      	mov	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	e002      	b.n	8002666 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3c6      	bcc.n	8002602 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	330c      	adds	r3, #12
 8002680:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ETH_TransmitFrame+0x24>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0cd      	b.n	8002860 <HAL_ETH_TransmitFrame+0x1c0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0b8      	b.n	8002860 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da09      	bge.n	800270c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2212      	movs	r2, #18
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0a9      	b.n	8002860 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002712:	4293      	cmp	r3, r2
 8002714:	d915      	bls.n	8002742 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_ETH_TransmitFrame+0x1cc>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_ETH_TransmitFrame+0x1cc>)
 8002726:	fba3 1302 	umull	r1, r3, r3, r2
 800272a:	0a9b      	lsrs	r3, r3, #10
 800272c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e001      	b.n	8002746 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d11c      	bne.n	8002786 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800275a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002766:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002776:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c
 8002784:	e04b      	b.n	800281e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e044      	b.n	8002816 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800279a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027b0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027ba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3b01      	subs	r3, #1
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d116      	bne.n	80027f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <HAL_ETH_TransmitFrame+0x1d0>)
 80027da:	fb02 f203 	mul.w	r2, r2, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80027e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80027f2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002802:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3301      	adds	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3b6      	bcc.n	800278c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002826:	3314      	adds	r3, #20
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	3314      	adds	r3, #20
 800283c:	2204      	movs	r2, #4
 800283e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	3304      	adds	r3, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	ac02b00b 	.word	0xac02b00b
 8002870:	fffffa0c 	.word	0xfffffa0c

08002874 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ETH_GetReceivedFrame+0x1a>
 800288a:	2302      	movs	r3, #2
 800288c:	e070      	b.n	8002970 <HAL_ETH_GetReceivedFrame+0xfc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db5a      	blt.n	800295e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d030      	beq.n	8002918 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d103      	bne.n	80028d0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0c1b      	lsrs	r3, r3, #16
 80028e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028e4:	3b04      	subs	r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e02b      	b.n	8002970 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002922:	2b00      	cmp	r3, #0
 8002924:	d010      	beq.n	8002948 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
 8002946:	e00a      	b.n	800295e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	460b      	mov	r3, r1
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b82      	cmp	r3, #130	; 0x82
 800299c:	d101      	bne.n	80029a2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e050      	b.n	8002a44 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2282      	movs	r2, #130	; 0x82
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 031c 	and.w	r3, r3, #28
 80029b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8a1b      	ldrh	r3, [r3, #16]
 80029be:	02db      	lsls	r3, r3, #11
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80029c8:	897b      	ldrh	r3, [r7, #10]
 80029ca:	019b      	lsls	r3, r3, #6
 80029cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 0302 	bic.w	r3, r3, #2
 80029dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80029ee:	f7ff fa89 	bl	8001f04 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029f4:	e015      	b.n	8002a22 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80029f6:	f7ff fa85 	bl	8001f04 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d309      	bcc.n	8002a1a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e014      	b.n	8002a44 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e4      	bne.n	80029f6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	460b      	mov	r3, r1
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b42      	cmp	r3, #66	; 0x42
 8002a6c:	d101      	bne.n	8002a72 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e04e      	b.n	8002b10 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2242      	movs	r2, #66	; 0x42
 8002a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 031c 	and.w	r3, r3, #28
 8002a88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8a1b      	ldrh	r3, [r3, #16]
 8002a8e:	02db      	lsls	r3, r3, #11
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a98:	897b      	ldrh	r3, [r7, #10]
 8002a9a:	019b      	lsls	r3, r3, #6
 8002a9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7ff fa1c 	bl	8001f04 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ace:	e015      	b.n	8002afc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002ad0:	f7ff fa18 	bl	8001f04 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d309      	bcc.n	8002af4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e00d      	b.n	8002b10 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e4      	bne.n	8002ad0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_ETH_Start+0x16>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e01f      	b.n	8002b6e <HAL_ETH_Start+0x56>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fb44 	bl	80031cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fb7b 	bl	8003240 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fc12 	bl	8003374 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fbaf 	bl	80032b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fbdc 	bl	8003314 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_ETH_Stop+0x16>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e01f      	b.n	8002bcc <HAL_ETH_Stop+0x56>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fba1 	bl	80032e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fbce 	bl	8003344 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fb66 	bl	800327a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fbe0 	bl	8003374 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fb26 	bl	8003206 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ETH_ConfigMAC+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0e4      	b.n	8002dba <HAL_ETH_ConfigMAC+0x1e6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80b1 	beq.w	8002d6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002c20:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002c26:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002c2c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002c32:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002c38:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002c3e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002c44:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002c4a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002c50:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002c56:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002c5c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002c62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7ff f94e 	bl	8001f1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002c96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002c9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002ca2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002ca8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002cba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002cbc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7ff f928 	bl	8001f1c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cdc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002d04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002d0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002d10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002d16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002d1c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7ff f8f1 	bl	8001f1c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f7ff f8de 	bl	8001f1c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	61da      	str	r2, [r3, #28]
 8002d68:	e01e      	b.n	8002da8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d78:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff f8be 	bl	8001f1c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	ff20810f 	.word	0xff20810f

08002dc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0b0      	sub	sp, #192	; 0xc0
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002df6:	2300      	movs	r3, #0
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e12:	663b      	str	r3, [r7, #96]	; 0x60
 8002e14:	e001      	b.n	8002e1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e24:	2300      	movs	r3, #0
 8002e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002e34:	2340      	movs	r3, #64	; 0x40
 8002e36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ea0:	4bac      	ldr	r3, [pc, #688]	; (8003154 <ETH_MACDMAConfig+0x38c>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002eac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002eb0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002eb4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002eba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ebe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002ec2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002ec8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ecc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002ed0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002ed4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ed8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002edc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002ede:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ef0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7ff f80d 	bl	8001f1c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002f14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002f1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002f20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002f26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002f30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002f38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f7fe ffe8 	bl	8001f1c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002f92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002f98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002f9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002fa4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002fa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7fe ffa9 	bl	8001f1c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fd2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f7fe ff94 	bl	8001f1c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ffc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003006:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800300c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003010:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003022:	2304      	movs	r3, #4
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800302c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003042:	2300      	movs	r3, #0
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003046:	2300      	movs	r3, #0
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	3318      	adds	r3, #24
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800305a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800305e:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <ETH_MACDMAConfig+0x390>)
 8003060:	4013      	ands	r3, r2
 8003062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003066:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003068:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800306a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800306c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800306e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003070:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003072:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003074:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003076:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003078:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800307a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800307c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800307e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003082:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003086:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309a:	3318      	adds	r3, #24
 800309c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030aa:	3318      	adds	r3, #24
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7fe ff32 	bl	8001f1c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c0:	3318      	adds	r3, #24
 80030c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80030d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80030d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80030d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80030da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80030de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80030e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80030e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe ff0b 	bl	8001f1c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003112:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d10f      	bne.n	800313c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	331c      	adds	r3, #28
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003138:	331c      	adds	r3, #28
 800313a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	461a      	mov	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f809 	bl	800315c <ETH_MACAddressConfig>
}
 800314a:	bf00      	nop
 800314c:	37c0      	adds	r7, #192	; 0xc0
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	ff20810f 	.word	0xff20810f
 8003158:	f8de3f23 	.word	0xf8de3f23

0800315c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3305      	adds	r3, #5
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	3204      	adds	r2, #4
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <ETH_MACAddressConfig+0x68>)
 800317e:	4413      	add	r3, r2
 8003180:	461a      	mov	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3303      	adds	r3, #3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	061a      	lsls	r2, r3, #24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3302      	adds	r3, #2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3301      	adds	r3, #1
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4313      	orrs	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <ETH_MACAddressConfig+0x6c>)
 80031ae:	4413      	add	r3, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6013      	str	r3, [r2, #0]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40028040 	.word	0x40028040
 80031c8:	40028044 	.word	0x40028044

080031cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f000 f8e9 	bl	80033c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800322a:	2001      	movs	r0, #1
 800322c:	f000 f8cc 	bl	80033c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0204 	orr.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003264:	2001      	movs	r0, #1
 8003266:	f000 f8af 	bl	80033c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 f892 	bl	80033c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c4:	3318      	adds	r3, #24
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d4:	3318      	adds	r3, #24
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f4:	3318      	adds	r3, #24
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003304:	3318      	adds	r3, #24
 8003306:	601a      	str	r2, [r3, #0]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003324:	3318      	adds	r3, #24
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0202 	orr.w	r2, r2, #2
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	3318      	adds	r3, #24
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003354:	3318      	adds	r3, #24
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0202 	bic.w	r2, r2, #2
 8003360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003364:	3318      	adds	r3, #24
 8003366:	601a      	str	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003388:	3318      	adds	r3, #24
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003398:	3318      	adds	r3, #24
 800339a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a4:	3318      	adds	r3, #24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f000 f80c 	bl	80033c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ba:	3318      	adds	r3, #24
 80033bc:	601a      	str	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <ETH_Delay+0x38>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <ETH_Delay+0x3c>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0a5b      	lsrs	r3, r3, #9
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80033e4:	bf00      	nop
  } 
  while (Delay --);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <ETH_Delay+0x1c>
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 800341c:	7e1b      	ldrb	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_FLASH_Program+0x1e>
 8003422:	2302      	movs	r3, #2
 8003424:	e03b      	b.n	800349e <HAL_FLASH_Program+0x96>
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 8003428:	2201      	movs	r2, #1
 800342a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800342c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003430:	f000 f89c 	bl	800356c <FLASH_WaitForLastOperation>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d12b      	bne.n	8003496 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003444:	783b      	ldrb	r3, [r7, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	68b8      	ldr	r0, [r7, #8]
 800344a:	f000 f947 	bl	80036dc <FLASH_Program_Byte>
 800344e:	e016      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003456:	883b      	ldrh	r3, [r7, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 f91a 	bl	8003694 <FLASH_Program_HalfWord>
 8003460:	e00d      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d105      	bne.n	8003474 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68b8      	ldr	r0, [r7, #8]
 800346e:	f000 f8ef 	bl	8003650 <FLASH_Program_Word>
 8003472:	e004      	b.n	800347e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f000 f8b7 	bl	80035ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800347e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003482:	f000 f873 	bl	800356c <FLASH_WaitForLastOperation>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_FLASH_Program+0xa4>)
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_FLASH_Program+0xa4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_FLASH_Program+0xa0>)
 8003498:	2200      	movs	r2, #0
 800349a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800349c:	7dfb      	ldrb	r3, [r7, #23]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000298 	.word	0x20000298
 80034ac:	40023c00 	.word	0x40023c00

080034b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0b      	bge.n	80034da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_FLASH_Unlock+0x3c>)
 80034c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034ca:	4a09      	ldr	r2, [pc, #36]	; (80034f0 <HAL_FLASH_Unlock+0x40>)
 80034cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_FLASH_Unlock+0x38>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da01      	bge.n	80034da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80034da:	79fb      	ldrb	r3, [r7, #7]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	45670123 	.word	0x45670123
 80034f0:	cdef89ab 	.word	0xcdef89ab

080034f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_FLASH_Lock+0x1c>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_FLASH_Lock+0x1c>)
 80034fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003502:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40023c00 	.word	0x40023c00

08003514 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_FLASH_OB_Unlock+0x2c>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_FLASH_OB_Unlock+0x2c>)
 8003526:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_FLASH_OB_Unlock+0x30>)
 8003528:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_FLASH_OB_Unlock+0x2c>)
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <HAL_FLASH_OB_Unlock+0x34>)
 800352e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40023c00 	.word	0x40023c00
 8003544:	08192a3b 	.word	0x08192a3b
 8003548:	4c5d6e7f 	.word	0x4c5d6e7f

0800354c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_FLASH_OB_Lock+0x1c>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_FLASH_OB_Lock+0x1c>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40023c00 	.word	0x40023c00

0800356c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <FLASH_WaitForLastOperation+0x78>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800357e:	f7fe fcc1 	bl	8001f04 <HAL_GetTick>
 8003582:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003584:	e010      	b.n	80035a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d00c      	beq.n	80035a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <FLASH_WaitForLastOperation+0x38>
 8003594:	f7fe fcb6 	bl	8001f04 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d201      	bcs.n	80035a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e019      	b.n	80035dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <FLASH_WaitForLastOperation+0x7c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e8      	bne.n	8003586 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <FLASH_WaitForLastOperation+0x7c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <FLASH_WaitForLastOperation+0x7c>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <FLASH_WaitForLastOperation+0x7c>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80035d2:	f000 f8a5 	bl	8003720 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
  
}  
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000298 	.word	0x20000298
 80035e8:	40023c00 	.word	0x40023c00

080035ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	4a10      	ldr	r2, [pc, #64]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 800360a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800360e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <FLASH_Program_DoubleWord+0x60>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003622:	f3bf 8f6f 	isb	sy
}
 8003626:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	000a      	movs	r2, r1
 8003636:	2300      	movs	r3, #0
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	3104      	adds	r1, #4
 800363c:	4613      	mov	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40023c00 	.word	0x40023c00

08003650 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <FLASH_Program_Word+0x40>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <FLASH_Program_Word+0x40>)
 8003660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003664:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <FLASH_Program_Word+0x40>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <FLASH_Program_Word+0x40>)
 800366c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <FLASH_Program_Word+0x40>)
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <FLASH_Program_Word+0x40>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40023c00 	.word	0x40023c00

08003694 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <FLASH_Program_HalfWord+0x44>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	801a      	strh	r2, [r3, #0]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00

080036dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <FLASH_Program_Byte+0x40>)
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <FLASH_Program_Byte+0x40>)
 80036ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <FLASH_Program_Byte+0x40>)
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <FLASH_Program_Byte+0x40>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <FLASH_Program_Byte+0x40>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <FLASH_Program_Byte+0x40>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	701a      	strb	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023c00 	.word	0x40023c00

08003720 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	4a23      	ldr	r2, [pc, #140]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 800373a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 800373e:	2210      	movs	r2, #16
 8003740:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f043 0308 	orr.w	r3, r3, #8
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 8003758:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 800375c:	2220      	movs	r2, #32
 800375e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003760:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 8003776:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 8003794:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <FLASH_SetErrorCode+0xa8>)
 80037b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <FLASH_SetErrorCode+0xa4>)
 80037b6:	2202      	movs	r2, #2
 80037b8:	60da      	str	r2, [r3, #12]
  }
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	20000298 	.word	0x20000298

080037cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_FLASHEx_Erase+0xd8>)
 80037e0:	7e1b      	ldrb	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_FLASHEx_Erase+0x1e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e058      	b.n	800389c <HAL_FLASHEx_Erase+0xd0>
 80037ea:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <HAL_FLASHEx_Erase+0xd8>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037f4:	f7ff feba 	bl	800356c <FLASH_WaitForLastOperation>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d148      	bne.n	8003894 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d115      	bne.n	800383e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 f868 	bl	80038f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003824:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003828:	f7ff fea0 	bl	800356c <FLASH_WaitForLastOperation>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_FLASHEx_Erase+0xdc>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <HAL_FLASHEx_Erase+0xdc>)
 8003836:	f023 0304 	bic.w	r3, r3, #4
 800383a:	6113      	str	r3, [r2, #16]
 800383c:	e028      	b.n	8003890 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	e01c      	b.n	8003880 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	68b8      	ldr	r0, [r7, #8]
 8003850:	f000 f874 	bl	800393c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003854:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003858:	f7ff fe88 	bl	800356c <FLASH_WaitForLastOperation>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_FLASHEx_Erase+0xdc>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <HAL_FLASHEx_Erase+0xdc>)
 8003866:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800386a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	601a      	str	r2, [r3, #0]
          break;
 8003878:	e00a      	b.n	8003890 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3301      	adds	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4413      	add	r3, r2
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d3da      	bcc.n	8003846 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8003890:	f000 f8e8 	bl	8003a64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <HAL_FLASHEx_Erase+0xd8>)
 8003896:	2200      	movs	r2, #0
 8003898:	761a      	strb	r2, [r3, #24]

  return status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000298 	.word	0x20000298
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	220f      	movs	r2, #15
 80038b8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80038ba:	f000 f897 	bl	80039ec <FLASH_OB_GetWRP>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80038c6:	f000 f89d 	bl	8003a04 <FLASH_OB_GetRDP>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80038d2:	f000 f87b 	bl	80039cc <FLASH_OB_GetUser>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80038de:	f000 f8b1 	bl	8003a44 <FLASH_OB_GetBOR>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	615a      	str	r2, [r3, #20]
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <FLASH_MassErase+0x44>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <FLASH_MassErase+0x44>)
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <FLASH_MassErase+0x44>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <FLASH_MassErase+0x44>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <FLASH_MassErase+0x44>)
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	4313      	orrs	r3, r2
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <FLASH_MassErase+0x44>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6113      	str	r3, [r2, #16]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00

0800393c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	e010      	b.n	800397a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d103      	bne.n	8003966 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800395e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e009      	b.n	800397a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d103      	bne.n	8003974 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800396c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e002      	b.n	800397a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003974:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003978:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	490f      	ldr	r1, [pc, #60]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 8003998:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800399c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <FLASH_Erase_Sector+0x8c>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	6113      	str	r3, [r2, #16]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40023c00 	.word	0x40023c00

080039cc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <FLASH_OB_GetUser+0x1c>)
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f023 031f 	bic.w	r3, r3, #31
 80039da:	b2db      	uxtb	r3, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00

080039ec <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <FLASH_OB_GetWRP+0x14>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40023c16 	.word	0x40023c16

08003a04 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8003a0a:	23aa      	movs	r3, #170	; 0xaa
 8003a0c:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <FLASH_OB_GetRDP+0x3c>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2bcc      	cmp	r3, #204	; 0xcc
 8003a16:	d102      	bne.n	8003a1e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8003a18:	23cc      	movs	r3, #204	; 0xcc
 8003a1a:	71fb      	strb	r3, [r7, #7]
 8003a1c:	e009      	b.n	8003a32 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <FLASH_OB_GetRDP+0x3c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2baa      	cmp	r3, #170	; 0xaa
 8003a26:	d102      	bne.n	8003a2e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8003a28:	23aa      	movs	r3, #170	; 0xaa
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	e001      	b.n	8003a32 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8003a2e:	2355      	movs	r3, #85	; 0x55
 8003a30:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8003a32:	79fb      	ldrb	r3, [r7, #7]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40023c15 	.word	0x40023c15

08003a44 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <FLASH_OB_GetBOR+0x1c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40023c14 	.word	0x40023c14

08003a64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a16      	ldr	r2, [pc, #88]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a07      	ldr	r2, [pc, #28]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <FLASH_FlushCaches+0x88>)
 8003ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ade:	6013      	str	r3, [r2, #0]
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e16b      	b.n	8003de4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	f040 815a 	bne.w	8003dde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d005      	beq.n	8003b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d130      	bne.n	8003ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0201 	and.w	r2, r3, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d017      	beq.n	8003be0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d123      	bne.n	8003c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	08da      	lsrs	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80b4 	beq.w	8003dde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	4b60      	ldr	r3, [pc, #384]	; (8003dfc <HAL_GPIO_Init+0x30c>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	; (8003dfc <HAL_GPIO_Init+0x30c>)
 8003c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b5d      	ldr	r3, [pc, #372]	; (8003dfc <HAL_GPIO_Init+0x30c>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c92:	4a5b      	ldr	r2, [pc, #364]	; (8003e00 <HAL_GPIO_Init+0x310>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a52      	ldr	r2, [pc, #328]	; (8003e04 <HAL_GPIO_Init+0x314>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02b      	beq.n	8003d16 <HAL_GPIO_Init+0x226>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a51      	ldr	r2, [pc, #324]	; (8003e08 <HAL_GPIO_Init+0x318>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d025      	beq.n	8003d12 <HAL_GPIO_Init+0x222>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a50      	ldr	r2, [pc, #320]	; (8003e0c <HAL_GPIO_Init+0x31c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01f      	beq.n	8003d0e <HAL_GPIO_Init+0x21e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4f      	ldr	r2, [pc, #316]	; (8003e10 <HAL_GPIO_Init+0x320>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d019      	beq.n	8003d0a <HAL_GPIO_Init+0x21a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a4e      	ldr	r2, [pc, #312]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_GPIO_Init+0x216>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4d      	ldr	r2, [pc, #308]	; (8003e18 <HAL_GPIO_Init+0x328>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00d      	beq.n	8003d02 <HAL_GPIO_Init+0x212>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <HAL_GPIO_Init+0x32c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x20e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_GPIO_Init+0x330>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <HAL_GPIO_Init+0x20a>
 8003cf6:	2307      	movs	r3, #7
 8003cf8:	e00e      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	e00c      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003cfe:	2306      	movs	r3, #6
 8003d00:	e00a      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d02:	2305      	movs	r3, #5
 8003d04:	e008      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d06:	2304      	movs	r3, #4
 8003d08:	e006      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e004      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e002      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_GPIO_Init+0x228>
 8003d16:	2300      	movs	r3, #0
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f002 0203 	and.w	r2, r2, #3
 8003d1e:	0092      	lsls	r2, r2, #2
 8003d20:	4093      	lsls	r3, r2
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d28:	4935      	ldr	r1, [pc, #212]	; (8003e00 <HAL_GPIO_Init+0x310>)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	3302      	adds	r3, #2
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d36:	4b3b      	ldr	r3, [pc, #236]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d5a:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d60:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d84:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3301      	adds	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	f67f ae90 	bls.w	8003b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40020800 	.word	0x40020800
 8003e10:	40020c00 	.word	0x40020c00
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40021400 	.word	0x40021400
 8003e1c:	40021800 	.word	0x40021800
 8003e20:	40021c00 	.word	0x40021c00
 8003e24:	40013c00 	.word	0x40013c00

08003e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e001      	b.n	8003e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e74:	e003      	b.n	8003e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e12b      	b.n	80040f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fd6c 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f000 fd5c 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8003ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a81      	ldr	r2, [pc, #516]	; (8004100 <HAL_I2C_Init+0x274>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d807      	bhi.n	8003f10 <HAL_I2C_Init+0x84>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a80      	ldr	r2, [pc, #512]	; (8004104 <HAL_I2C_Init+0x278>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bf94      	ite	ls
 8003f08:	2301      	movls	r3, #1
 8003f0a:	2300      	movhi	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e006      	b.n	8003f1e <HAL_I2C_Init+0x92>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <HAL_I2C_Init+0x27c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	bf94      	ite	ls
 8003f18:	2301      	movls	r3, #1
 8003f1a:	2300      	movhi	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0e7      	b.n	80040f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a78      	ldr	r2, [pc, #480]	; (800410c <HAL_I2C_Init+0x280>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0c9b      	lsrs	r3, r3, #18
 8003f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a6a      	ldr	r2, [pc, #424]	; (8004100 <HAL_I2C_Init+0x274>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d802      	bhi.n	8003f60 <HAL_I2C_Init+0xd4>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	e009      	b.n	8003f74 <HAL_I2C_Init+0xe8>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	4a69      	ldr	r2, [pc, #420]	; (8004110 <HAL_I2C_Init+0x284>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	3301      	adds	r3, #1
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	495c      	ldr	r1, [pc, #368]	; (8004100 <HAL_I2C_Init+0x274>)
 8003f90:	428b      	cmp	r3, r1
 8003f92:	d819      	bhi.n	8003fc8 <HAL_I2C_Init+0x13c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e59      	subs	r1, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fa8:	400b      	ands	r3, r1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_I2C_Init+0x138>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1e59      	subs	r1, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	e051      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e04f      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d111      	bne.n	8003ff4 <HAL_I2C_Init+0x168>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	440b      	add	r3, r1
 8003fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e012      	b.n	800401a <HAL_I2C_Init+0x18e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	0099      	lsls	r1, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_I2C_Init+0x196>
 800401e:	2301      	movs	r3, #1
 8004020:	e022      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10e      	bne.n	8004048 <HAL_I2C_Init+0x1bc>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e58      	subs	r0, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	440b      	add	r3, r1
 8004038:	fbb0 f3f3 	udiv	r3, r0, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	e00f      	b.n	8004068 <HAL_I2C_Init+0x1dc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	0099      	lsls	r1, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6809      	ldr	r1, [r1, #0]
 800406c:	4313      	orrs	r3, r2
 800406e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69da      	ldr	r2, [r3, #28]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6911      	ldr	r1, [r2, #16]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	000186a0 	.word	0x000186a0
 8004104:	001e847f 	.word	0x001e847f
 8004108:	003d08ff 	.word	0x003d08ff
 800410c:	431bde83 	.word	0x431bde83
 8004110:	10624dd3 	.word	0x10624dd3

08004114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e264      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d075      	beq.n	800421e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004132:	4ba3      	ldr	r3, [pc, #652]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d00c      	beq.n	8004158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4ba0      	ldr	r3, [pc, #640]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004146:	2b08      	cmp	r3, #8
 8004148:	d112      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b9d      	ldr	r3, [pc, #628]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d157      	bne.n	800421c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e23f      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x74>
 800417a:	4b91      	ldr	r3, [pc, #580]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a90      	ldr	r2, [pc, #576]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x98>
 8004192:	4b8b      	ldr	r3, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a8a      	ldr	r2, [pc, #552]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a87      	ldr	r2, [pc, #540]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 80041ac:	4b84      	ldr	r3, [pc, #528]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a83      	ldr	r2, [pc, #524]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fe9a 	bl	8001f04 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fe96 	bl	8001f04 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e204      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b76      	ldr	r3, [pc, #472]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fe86 	bl	8001f04 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fe82 	bl	8001f04 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1f0      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d063      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1c4      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4952      	ldr	r1, [pc, #328]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	e03a      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_RCC_OscConfig+0x2b0>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd fe3b 	bl	8001f04 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004292:	f7fd fe37 	bl	8001f04 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1a5      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4940      	ldr	r1, [pc, #256]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
 80042c4:	e015      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x2b0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fe1a 	bl	8001f04 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fd fe16 	bl	8001f04 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e184      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d030      	beq.n	8004360 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_OscConfig+0x2b4>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd fdfa 	bl	8001f04 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004314:	f7fd fdf6 	bl	8001f04 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e164      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
 8004332:	e015      	b.n	8004360 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x2b4>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433a:	f7fd fde3 	bl	8001f04 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd fddf 	bl	8001f04 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e14d      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a0 	beq.w	80044ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d121      	bne.n	80043ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fd fda5 	bl	8001f04 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e011      	b.n	80043e2 <HAL_RCC_OscConfig+0x2ce>
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470000 	.word	0x42470000
 80043c8:	42470e80 	.word	0x42470e80
 80043cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fd fd98 	bl	8001f04 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e106      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_OscConfig+0x4e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x2f0>
 80043f6:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a80      	ldr	r2, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6713      	str	r3, [r2, #112]	; 0x70
 8004402:	e01c      	b.n	800443e <HAL_RCC_OscConfig+0x32a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d10c      	bne.n	8004426 <HAL_RCC_OscConfig+0x312>
 800440c:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
 8004418:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
 8004424:	e00b      	b.n	800443e <HAL_RCC_OscConfig+0x32a>
 8004426:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a74      	ldr	r2, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d015      	beq.n	8004472 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd fd5d 	bl	8001f04 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd fd59 	bl	8001f04 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0c5      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ee      	beq.n	800444e <HAL_RCC_OscConfig+0x33a>
 8004470:	e014      	b.n	800449c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004472:	f7fd fd47 	bl	8001f04 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fd fd43 	bl	8001f04 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0af      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004490:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ee      	bne.n	800447a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a55      	ldr	r2, [pc, #340]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 809b 	beq.w	80045ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d05c      	beq.n	800457e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d141      	bne.n	8004550 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044cc:	4b4c      	ldr	r3, [pc, #304]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fd fd17 	bl	8001f04 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd fd13 	bl	8001f04 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e081      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	019b      	lsls	r3, r3, #6
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	3b01      	subs	r3, #1
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	4937      	ldr	r1, [pc, #220]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd fcec 	bl	8001f04 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd fce8 	bl	8001f04 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e056      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x41c>
 800454e:	e04e      	b.n	80045ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fd fcd5 	bl	8001f04 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fd fcd1 	bl	8001f04 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e03f      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x44a>
 800457c:	e037      	b.n	80045ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e032      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d028      	beq.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d121      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d11a      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d111      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40007000 	.word	0x40007000
 80045fc:	40023800 	.word	0x40023800
 8004600:	42470060 	.word	0x42470060

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0cc      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90c      	bls.n	8004640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d119      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e067      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4934      	ldr	r1, [pc, #208]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fd fc06 	bl	8001f04 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fd fc02 	bl	8001f04 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20c      	bcs.n	800474c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f821 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fd fb66 	bl	8001e7c <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800d414 	.word	0x0800d414
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	2300      	movs	r3, #0
 80047e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d00d      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x40>
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	f200 80bd 	bhi.w	8004974 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d003      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x3a>
 8004802:	e0b7      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004806:	60bb      	str	r3, [r7, #8]
       break;
 8004808:	e0b7      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800480c:	60bb      	str	r3, [r7, #8]
      break;
 800480e:	e0b4      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04d      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	ea02 0800 	and.w	r8, r2, r0
 800483e:	ea03 0901 	and.w	r9, r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	014b      	lsls	r3, r1, #5
 8004850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004854:	0142      	lsls	r2, r0, #5
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	ebb0 0008 	subs.w	r0, r0, r8
 800485e:	eb61 0109 	sbc.w	r1, r1, r9
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004870:	0182      	lsls	r2, r0, #6
 8004872:	1a12      	subs	r2, r2, r0
 8004874:	eb63 0301 	sbc.w	r3, r3, r1
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	00d9      	lsls	r1, r3, #3
 8004882:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004886:	00d0      	lsls	r0, r2, #3
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	eb12 0208 	adds.w	r2, r2, r8
 8004890:	eb43 0309 	adc.w	r3, r3, r9
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0259      	lsls	r1, r3, #9
 800489e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048a2:	0250      	lsls	r0, r2, #9
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	f7fb fce4 	bl	8000280 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e04a      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	ea02 0400 	and.w	r4, r2, r0
 80048da:	ea03 0501 	and.w	r5, r3, r1
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	014b      	lsls	r3, r1, #5
 80048ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048f0:	0142      	lsls	r2, r0, #5
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	1b00      	subs	r0, r0, r4
 80048f8:	eb61 0105 	sbc.w	r1, r1, r5
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	018b      	lsls	r3, r1, #6
 8004906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800490a:	0182      	lsls	r2, r0, #6
 800490c:	1a12      	subs	r2, r2, r0
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	00d9      	lsls	r1, r3, #3
 800491c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004920:	00d0      	lsls	r0, r2, #3
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	1912      	adds	r2, r2, r4
 8004928:	eb45 0303 	adc.w	r3, r5, r3
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0299      	lsls	r1, r3, #10
 8004936:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800493a:	0290      	lsls	r0, r2, #10
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f7fb fc98 	bl	8000280 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	60bb      	str	r3, [r7, #8]
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004976:	60bb      	str	r3, [r7, #8]
      break;
 8004978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497a:	68bb      	ldr	r3, [r7, #8]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000000 	.word	0x20000000

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800d424 	.word	0x0800d424

080049d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80049da:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <MX_LWIP_Init+0x23c>)
 80049dc:	22c0      	movs	r2, #192	; 0xc0
 80049de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80049e0:	4b8b      	ldr	r3, [pc, #556]	; (8004c10 <MX_LWIP_Init+0x23c>)
 80049e2:	22a8      	movs	r2, #168	; 0xa8
 80049e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80049e6:	4b8a      	ldr	r3, [pc, #552]	; (8004c10 <MX_LWIP_Init+0x23c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80049ec:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <MX_LWIP_Init+0x23c>)
 80049ee:	220a      	movs	r2, #10
 80049f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80049f2:	4b88      	ldr	r3, [pc, #544]	; (8004c14 <MX_LWIP_Init+0x240>)
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80049f8:	4b86      	ldr	r3, [pc, #536]	; (8004c14 <MX_LWIP_Init+0x240>)
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80049fe:	4b85      	ldr	r3, [pc, #532]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004a00:	22ff      	movs	r2, #255	; 0xff
 8004a02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a04:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004a0a:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004a0c:	22c0      	movs	r2, #192	; 0xc0
 8004a0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004a10:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004a12:	22a8      	movs	r2, #168	; 0xa8
 8004a14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004a16:	4b80      	ldr	r3, [pc, #512]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004a1c:	4b7e      	ldr	r3, [pc, #504]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS = getGatewayFromEprom();
#endif
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004a22:	f001 f872 	bl	8005b0a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a26:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	061a      	lsls	r2, r3, #24
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	041b      	lsls	r3, r3, #16
 8004a32:	431a      	orrs	r2, r3
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a36:	789b      	ldrb	r3, [r3, #2]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	4a74      	ldr	r2, [pc, #464]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a3e:	78d2      	ldrb	r2, [r2, #3]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	061a      	lsls	r2, r3, #24
 8004a44:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	0619      	lsls	r1, r3, #24
 8004a4a:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	4319      	orrs	r1, r3
 8004a52:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a54:	789b      	ldrb	r3, [r3, #2]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	496d      	ldr	r1, [pc, #436]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a5c:	78c9      	ldrb	r1, [r1, #3]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a66:	431a      	orrs	r2, r3
 8004a68:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	0619      	lsls	r1, r3, #24
 8004a6e:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	4319      	orrs	r1, r3
 8004a76:	4b66      	ldr	r3, [pc, #408]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a78:	789b      	ldrb	r3, [r3, #2]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	4964      	ldr	r1, [pc, #400]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a80:	78c9      	ldrb	r1, [r1, #3]
 8004a82:	430b      	orrs	r3, r1
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	4b60      	ldr	r3, [pc, #384]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	0619      	lsls	r1, r3, #24
 8004a92:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	4319      	orrs	r1, r3
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004a9c:	789b      	ldrb	r3, [r3, #2]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	495b      	ldr	r1, [pc, #364]	; (8004c10 <MX_LWIP_Init+0x23c>)
 8004aa4:	78c9      	ldrb	r1, [r1, #3]
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	0e1b      	lsrs	r3, r3, #24
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	4a5b      	ldr	r2, [pc, #364]	; (8004c1c <MX_LWIP_Init+0x248>)
 8004aae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ab0:	4b58      	ldr	r3, [pc, #352]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	061a      	lsls	r2, r3, #24
 8004ab6:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ab8:	785b      	ldrb	r3, [r3, #1]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ac0:	789b      	ldrb	r3, [r3, #2]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a53      	ldr	r2, [pc, #332]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ac8:	78d2      	ldrb	r2, [r2, #3]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	061a      	lsls	r2, r3, #24
 8004ace:	4b51      	ldr	r3, [pc, #324]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	0619      	lsls	r1, r3, #24
 8004ad4:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	4319      	orrs	r1, r3
 8004adc:	4b4d      	ldr	r3, [pc, #308]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ade:	789b      	ldrb	r3, [r3, #2]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	494b      	ldr	r1, [pc, #300]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004ae6:	78c9      	ldrb	r1, [r1, #3]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004af0:	431a      	orrs	r2, r3
 8004af2:	4b48      	ldr	r3, [pc, #288]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	0619      	lsls	r1, r3, #24
 8004af8:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	4319      	orrs	r1, r3
 8004b00:	4b44      	ldr	r3, [pc, #272]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b02:	789b      	ldrb	r3, [r3, #2]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	430b      	orrs	r3, r1
 8004b08:	4942      	ldr	r1, [pc, #264]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b0a:	78c9      	ldrb	r1, [r1, #3]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b14:	431a      	orrs	r2, r3
 8004b16:	4b3f      	ldr	r3, [pc, #252]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	0619      	lsls	r1, r3, #24
 8004b1c:	4b3d      	ldr	r3, [pc, #244]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	4319      	orrs	r1, r3
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b26:	789b      	ldrb	r3, [r3, #2]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	4939      	ldr	r1, [pc, #228]	; (8004c14 <MX_LWIP_Init+0x240>)
 8004b2e:	78c9      	ldrb	r1, [r1, #3]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	0e1b      	lsrs	r3, r3, #24
 8004b34:	4313      	orrs	r3, r2
 8004b36:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <MX_LWIP_Init+0x24c>)
 8004b38:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	061a      	lsls	r2, r3, #24
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	431a      	orrs	r2, r3
 8004b48:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b4a:	789b      	ldrb	r3, [r3, #2]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b52:	78d2      	ldrb	r2, [r2, #3]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	061a      	lsls	r2, r3, #24
 8004b58:	4b2f      	ldr	r3, [pc, #188]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	0619      	lsls	r1, r3, #24
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	4319      	orrs	r1, r3
 8004b66:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b68:	789b      	ldrb	r3, [r3, #2]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	492a      	ldr	r1, [pc, #168]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b70:	78c9      	ldrb	r1, [r1, #3]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	0619      	lsls	r1, r3, #24
 8004b82:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	4319      	orrs	r1, r3
 8004b8a:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b8c:	789b      	ldrb	r3, [r3, #2]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	430b      	orrs	r3, r1
 8004b92:	4921      	ldr	r1, [pc, #132]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004b94:	78c9      	ldrb	r1, [r1, #3]
 8004b96:	430b      	orrs	r3, r1
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	0619      	lsls	r1, r3, #24
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	4319      	orrs	r1, r3
 8004bae:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004bb0:	789b      	ldrb	r3, [r3, #2]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	4918      	ldr	r1, [pc, #96]	; (8004c18 <MX_LWIP_Init+0x244>)
 8004bb8:	78c9      	ldrb	r1, [r1, #3]
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <MX_LWIP_Init+0x250>)
 8004bc2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004bc4:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <MX_LWIP_Init+0x254>)
 8004bc6:	9302      	str	r3, [sp, #8]
 8004bc8:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <MX_LWIP_Init+0x258>)
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <MX_LWIP_Init+0x250>)
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <MX_LWIP_Init+0x24c>)
 8004bd4:	4911      	ldr	r1, [pc, #68]	; (8004c1c <MX_LWIP_Init+0x248>)
 8004bd6:	4816      	ldr	r0, [pc, #88]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004bd8:	f001 fc3a 	bl	8006450 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004bdc:	4814      	ldr	r0, [pc, #80]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004bde:	f001 fde5 	bl	80067ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004be4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004bf4:	480e      	ldr	r0, [pc, #56]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004bf6:	f001 fde9 	bl	80067cc <netif_set_up>
 8004bfa:	e002      	b.n	8004c02 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004bfe:	f001 fe51 	bl	80068a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004c02:	490c      	ldr	r1, [pc, #48]	; (8004c34 <MX_LWIP_Init+0x260>)
 8004c04:	480a      	ldr	r0, [pc, #40]	; (8004c30 <MX_LWIP_Init+0x25c>)
 8004c06:	f001 fee3 	bl	80069d0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	200002f8 	.word	0x200002f8
 8004c14:	200002f4 	.word	0x200002f4
 8004c18:	200002b8 	.word	0x200002b8
 8004c1c:	200002f0 	.word	0x200002f0
 8004c20:	200002fc 	.word	0x200002fc
 8004c24:	20000300 	.word	0x20000300
 8004c28:	0800aa29 	.word	0x0800aa29
 8004c2c:	080051e1 	.word	0x080051e1
 8004c30:	200002bc 	.word	0x200002bc
 8004c34:	080052d5 	.word	0x080052d5

08004c38 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004c3c:	4804      	ldr	r0, [pc, #16]	; (8004c50 <MX_LWIP_Process+0x18>)
 8004c3e:	f000 faaf 	bl	80051a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004c42:	f002 ff57 	bl	8007af4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 8004c46:	4802      	ldr	r0, [pc, #8]	; (8004c50 <MX_LWIP_Process+0x18>)
 8004c48:	f000 fb00 	bl	800524c <ethernetif_set_link>
/* USER CODE END 4_3 */
}
 8004c4c:	bf00      	nop
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200002bc 	.word	0x200002bc

08004c54 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	; 0x38
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a46      	ldr	r2, [pc, #280]	; (8004d8c <HAL_ETH_MspInit+0x138>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f040 8085 	bne.w	8004d82 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c78:	2300      	movs	r3, #0
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	4a43      	ldr	r2, [pc, #268]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c86:	6313      	str	r3, [r2, #48]	; 0x30
 8004c88:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	4a3c      	ldr	r2, [pc, #240]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca4:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	4a35      	ldr	r2, [pc, #212]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc0:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	6313      	str	r3, [r2, #48]	; 0x30
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	6313      	str	r3, [r2, #48]	; 0x30
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_ETH_MspInit+0x13c>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004d20:	2332      	movs	r3, #50	; 0x32
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d24:	2302      	movs	r3, #2
 8004d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d30:	230b      	movs	r3, #11
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4816      	ldr	r0, [pc, #88]	; (8004d94 <HAL_ETH_MspInit+0x140>)
 8004d3c:	f7fe fed8 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004d40:	2386      	movs	r3, #134	; 0x86
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d50:	230b      	movs	r3, #11
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d58:	4619      	mov	r1, r3
 8004d5a:	480f      	ldr	r0, [pc, #60]	; (8004d98 <HAL_ETH_MspInit+0x144>)
 8004d5c:	f7fe fec8 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004d60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	2302      	movs	r3, #2
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d72:	230b      	movs	r3, #11
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4807      	ldr	r0, [pc, #28]	; (8004d9c <HAL_ETH_MspInit+0x148>)
 8004d7e:	f7fe feb7 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d82:	bf00      	nop
 8004d84:	3738      	adds	r7, #56	; 0x38
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40028000 	.word	0x40028000
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40020800 	.word	0x40020800
 8004d98:	40020000 	.word	0x40020000
 8004d9c:	40020400 	.word	0x40020400

08004da0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004dac:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <low_level_init+0x144>)
 8004dae:	4a4e      	ldr	r2, [pc, #312]	; (8004ee8 <low_level_init+0x148>)
 8004db0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004db2:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <low_level_init+0x144>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004db8:	4b4a      	ldr	r3, [pc, #296]	; (8004ee4 <low_level_init+0x144>)
 8004dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dbe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004dc0:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <low_level_init+0x144>)
 8004dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004dc8:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <low_level_init+0x144>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x4A;
 8004dce:	234a      	movs	r3, #74	; 0x4a
 8004dd0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x43;
 8004dd2:	2343      	movs	r3, #67	; 0x43
 8004dd4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x4F;
 8004dd6:	234f      	movs	r3, #79	; 0x4f
 8004dd8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x52;
 8004dda:	2352      	movs	r3, #82	; 0x52
 8004ddc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x39;
 8004dde:	2339      	movs	r3, #57	; 0x39
 8004de0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x33;
 8004de2:	2333      	movs	r3, #51	; 0x33
 8004de4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004de6:	4a3f      	ldr	r2, [pc, #252]	; (8004ee4 <low_level_init+0x144>)
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <low_level_init+0x144>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004df4:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <low_level_init+0x144>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004dfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <low_level_init+0x144>)
 8004dfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e00:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004e02:	4838      	ldr	r0, [pc, #224]	; (8004ee4 <low_level_init+0x144>)
 8004e04:	f7fd f9da 	bl	80021bc <HAL_ETH_Init>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004e24:	2304      	movs	r3, #4
 8004e26:	4a31      	ldr	r2, [pc, #196]	; (8004eec <low_level_init+0x14c>)
 8004e28:	4931      	ldr	r1, [pc, #196]	; (8004ef0 <low_level_init+0x150>)
 8004e2a:	482e      	ldr	r0, [pc, #184]	; (8004ee4 <low_level_init+0x144>)
 8004e2c:	f7fd fb62 	bl	80024f4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004e30:	2304      	movs	r3, #4
 8004e32:	4a30      	ldr	r2, [pc, #192]	; (8004ef4 <low_level_init+0x154>)
 8004e34:	4930      	ldr	r1, [pc, #192]	; (8004ef8 <low_level_init+0x158>)
 8004e36:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <low_level_init+0x144>)
 8004e38:	f7fd fbc5 	bl	80025c6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2206      	movs	r2, #6
 8004e40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <low_level_init+0x144>)
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <low_level_init+0x144>)
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	785a      	ldrb	r2, [r3, #1]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <low_level_init+0x144>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	789a      	ldrb	r2, [r3, #2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <low_level_init+0x144>)
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	78da      	ldrb	r2, [r3, #3]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <low_level_init+0x144>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	791a      	ldrb	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <low_level_init+0x144>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	795a      	ldrb	r2, [r3, #5]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e92:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e9a:	f043 030a 	orr.w	r3, r3, #10
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004ea6:	480f      	ldr	r0, [pc, #60]	; (8004ee4 <low_level_init+0x144>)
 8004ea8:	f7fd fe36 	bl	8002b18 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	211d      	movs	r1, #29
 8004eb4:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <low_level_init+0x144>)
 8004eb6:	f7fd fd61 	bl	800297c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f043 030b 	orr.w	r3, r3, #11
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	211d      	movs	r1, #29
 8004ec8:	4806      	ldr	r0, [pc, #24]	; (8004ee4 <low_level_init+0x144>)
 8004eca:	f7fd fdbf 	bl	8002a4c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004ece:	f107 0310 	add.w	r3, r7, #16
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	211d      	movs	r1, #29
 8004ed6:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <low_level_init+0x144>)
 8004ed8:	f7fd fd50 	bl	800297c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004edc:	bf00      	nop
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20001bd4 	.word	0x20001bd4
 8004ee8:	40028000 	.word	0x40028000
 8004eec:	20001c1c 	.word	0x20001c1c
 8004ef0:	20000304 	.word	0x20000304
 8004ef4:	20000384 	.word	0x20000384
 8004ef8:	20001b54 	.word	0x20001b54

08004efc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004f06:	4b4b      	ldr	r3, [pc, #300]	; (8005034 <low_level_output+0x138>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004f1e:	4b45      	ldr	r3, [pc, #276]	; (8005034 <low_level_output+0x138>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	e05a      	b.n	8004fe4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da03      	bge.n	8004f3e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004f36:	23f8      	movs	r3, #248	; 0xf8
 8004f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004f3c:	e05c      	b.n	8004ff8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	895b      	ldrh	r3, [r3, #10]
 8004f42:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f48:	e02f      	b.n	8004faa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	18d0      	adds	r0, r2, r3
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	18d1      	adds	r1, r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004f5e:	3304      	adds	r3, #4
 8004f60:	461a      	mov	r2, r3
 8004f62:	f005 fe79 	bl	800ac58 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da03      	bge.n	8004f7c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f74:	23f8      	movs	r3, #248	; 0xf8
 8004f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f7a:	e03d      	b.n	8004ff8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f8c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f98:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004fa4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d8c8      	bhi.n	8004f4a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	18d0      	adds	r0, r2, r3
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f005 fe45 	bl	800ac58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1a1      	bne.n	8004f2e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004fea:	6979      	ldr	r1, [r7, #20]
 8004fec:	4811      	ldr	r0, [pc, #68]	; (8005034 <low_level_output+0x138>)
 8004fee:	f7fd fb57 	bl	80026a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <low_level_output+0x138>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005000:	3314      	adds	r3, #20
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <low_level_output+0x138>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005014:	3314      	adds	r3, #20
 8005016:	2220      	movs	r2, #32
 8005018:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <low_level_output+0x138>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005022:	3304      	adds	r3, #4
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800502c:	4618      	mov	r0, r3
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20001bd4 	.word	0x20001bd4

08005038 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800505c:	484f      	ldr	r0, [pc, #316]	; (800519c <low_level_input+0x164>)
 800505e:	f7fd fc09 	bl	8002874 <HAL_ETH_GetReceivedFrame>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <low_level_input+0x34>

    return NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	e092      	b.n	8005192 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800506c:	4b4b      	ldr	r3, [pc, #300]	; (800519c <low_level_input+0x164>)
 800506e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005070:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005072:	4b4a      	ldr	r3, [pc, #296]	; (800519c <low_level_input+0x164>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800507e:	89fb      	ldrh	r3, [r7, #14]
 8005080:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005084:	4619      	mov	r1, r3
 8005086:	2000      	movs	r0, #0
 8005088:	f001 fd12 	bl	8006ab0 <pbuf_alloc>
 800508c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d04b      	beq.n	800512c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005094:	4b41      	ldr	r3, [pc, #260]	; (800519c <low_level_input+0x164>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a2:	e040      	b.n	8005126 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	895b      	ldrh	r3, [r3, #10]
 80050a8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80050ae:	e021      	b.n	80050f4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	18d0      	adds	r0, r2, r3
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	18d1      	adds	r1, r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80050c4:	3304      	adds	r3, #4
 80050c6:	461a      	mov	r2, r3
 80050c8:	f005 fdc6 	bl	800ac58 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80050e2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050ee:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050fe:	4293      	cmp	r3, r2
 8005100:	d8d6      	bhi.n	80050b0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	18d0      	adds	r0, r2, r3
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4619      	mov	r1, r3
 8005114:	f005 fda0 	bl	800ac58 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1bb      	bne.n	80050a4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <low_level_input+0x164>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e00b      	b.n	8005150 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3301      	adds	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	4b12      	ldr	r3, [pc, #72]	; (800519c <low_level_input+0x164>)
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3ee      	bcc.n	8005138 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <low_level_input+0x164>)
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <low_level_input+0x164>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005168:	3314      	adds	r3, #20
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <low_level_input+0x164>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	3314      	adds	r3, #20
 800517e:	2280      	movs	r2, #128	; 0x80
 8005180:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <low_level_input+0x164>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518a:	3308      	adds	r3, #8
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005192:	4618      	mov	r0, r3
 8005194:	3730      	adds	r7, #48	; 0x30
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20001bd4 	.word	0x20001bd4

080051a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff45 	bl	8005038 <low_level_input>
 80051ae:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d010      	beq.n	80051d8 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	4798      	blx	r3
 80051c0:	4603      	mov	r3, r0
 80051c2:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80051c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f001 ff51 	bl	8007074 <pbuf_free>
    p = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e000      	b.n	80051da <ethernetif_input+0x3a>
  if (p == NULL) return;
 80051d8:	bf00      	nop
  }
}
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <ethernetif_init+0x1c>
 80051ee:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <ethernetif_init+0x48>)
 80051f0:	f44f 7202 	mov.w	r2, #520	; 0x208
 80051f4:	490d      	ldr	r1, [pc, #52]	; (800522c <ethernetif_init+0x4c>)
 80051f6:	480e      	ldr	r0, [pc, #56]	; (8005230 <ethernetif_init+0x50>)
 80051f8:	f005 fdee 	bl	800add8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2265      	movs	r2, #101	; 0x65
 8005200:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2230      	movs	r2, #48	; 0x30
 8005208:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <ethernetif_init+0x54>)
 8005210:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a08      	ldr	r2, [pc, #32]	; (8005238 <ethernetif_init+0x58>)
 8005216:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fdc1 	bl	8004da0 <low_level_init>

  return ERR_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	0800bcd8 	.word	0x0800bcd8
 800522c:	0800bcf4 	.word	0x0800bcf4
 8005230:	0800bd04 	.word	0x0800bd04
 8005234:	08008f01 	.word	0x08008f01
 8005238:	08004efd 	.word	0x08004efd

0800523c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005240:	f7fc fe60 	bl	8001f04 <HAL_GetTick>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8005258:	f7fc fe54 	bl	8001f04 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <ethernetif_set_link+0x80>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2bc7      	cmp	r3, #199	; 0xc7
 8005266:	d92c      	bls.n	80052c2 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005268:	f7fc fe4c 	bl	8001f04 <HAL_GetTick>
 800526c:	4603      	mov	r3, r0
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <ethernetif_set_link+0x80>)
 8005270:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	461a      	mov	r2, r3
 8005278:	2101      	movs	r1, #1
 800527a:	4815      	ldr	r0, [pc, #84]	; (80052d0 <ethernetif_set_link+0x84>)
 800527c:	f7fd fb7e 	bl	800297c <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <ethernetif_set_link+0x58>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fb33 	bl	8006908 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 80052a2:	e00e      	b.n	80052c2 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <ethernetif_set_link+0x76>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fb57 	bl	8006970 <netif_set_link_down>
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000098 	.word	0x20000098
 80052d0:	20001bd4 	.word	0x20001bd4

080052d4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d05d      	beq.n	80053b2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <ethernetif_update_config+0xf4>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d03f      	beq.n	800537e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80052fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005302:	2100      	movs	r1, #0
 8005304:	4830      	ldr	r0, [pc, #192]	; (80053c8 <ethernetif_update_config+0xf4>)
 8005306:	f7fd fba1 	bl	8002a4c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800530a:	f7fc fdfb 	bl	8001f04 <HAL_GetTick>
 800530e:	4603      	mov	r3, r0
 8005310:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	461a      	mov	r2, r3
 8005318:	2101      	movs	r1, #1
 800531a:	482b      	ldr	r0, [pc, #172]	; (80053c8 <ethernetif_update_config+0xf4>)
 800531c:	f7fd fb2e 	bl	800297c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005320:	f7fc fdf0 	bl	8001f04 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532e:	d828      	bhi.n	8005382 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0eb      	beq.n	8005312 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	461a      	mov	r2, r3
 8005340:	2110      	movs	r1, #16
 8005342:	4821      	ldr	r0, [pc, #132]	; (80053c8 <ethernetif_update_config+0xf4>)
 8005344:	f7fd fb1a 	bl	800297c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <ethernetif_update_config+0xf4>)
 8005354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	e002      	b.n	8005362 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <ethernetif_update_config+0xf4>)
 800535e:	2200      	movs	r2, #0
 8005360:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <ethernetif_update_config+0xf4>)
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	e016      	b.n	80053a2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <ethernetif_update_config+0xf4>)
 8005376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	e011      	b.n	80053a2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800537e:	bf00      	nop
 8005380:	e000      	b.n	8005384 <ethernetif_update_config+0xb0>
          goto error;
 8005382:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <ethernetif_update_config+0xf4>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800538c:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <ethernetif_update_config+0xf4>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005394:	4313      	orrs	r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	2100      	movs	r1, #0
 800539c:	480a      	ldr	r0, [pc, #40]	; (80053c8 <ethernetif_update_config+0xf4>)
 800539e:	f7fd fb55 	bl	8002a4c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80053a2:	2100      	movs	r1, #0
 80053a4:	4808      	ldr	r0, [pc, #32]	; (80053c8 <ethernetif_update_config+0xf4>)
 80053a6:	f7fd fc15 	bl	8002bd4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80053aa:	4807      	ldr	r0, [pc, #28]	; (80053c8 <ethernetif_update_config+0xf4>)
 80053ac:	f7fd fbb4 	bl	8002b18 <HAL_ETH_Start>
 80053b0:	e002      	b.n	80053b8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <ethernetif_update_config+0xf4>)
 80053b4:	f7fd fbdf 	bl	8002b76 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f807 	bl	80053cc <ethernetif_notify_conn_changed>
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20001bd4 	.word	0x20001bd4

080053cc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */
	 if(netif_is_link_up(netif)){
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <ethernetif_notify_conn_changed+0x22>
	  netif_set_up(netif);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 f9f0 	bl	80067cc <netif_set_up>
	 }
	 else{
	   netif_set_down(netif);
	 }
}
 80053ec:	e002      	b.n	80053f4 <ethernetif_notify_conn_changed+0x28>
	   netif_set_down(netif);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fa58 	bl	80068a4 <netif_set_down>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <close_handle+0x50>)
 8005402:	2200      	movs	r2, #0
 8005404:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <close_handle+0x50>)
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <close_handle+0x50>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <close_handle+0x50>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f001 fe2b 	bl	8007074 <pbuf_free>
    tftp_state.last_data = NULL;
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <close_handle+0x50>)
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 8005424:	2100      	movs	r1, #0
 8005426:	480a      	ldr	r0, [pc, #40]	; (8005450 <close_handle+0x54>)
 8005428:	f002 fb2a 	bl	8007a80 <sys_untimeout>

  if (tftp_state.handle) {
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <close_handle+0x50>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <close_handle+0x4c>
    tftp_state.ctx->close(tftp_state.handle);
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <close_handle+0x50>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <close_handle+0x50>)
 800543c:	6852      	ldr	r2, [r2, #4]
 800543e:	4610      	mov	r0, r2
 8005440:	4798      	blx	r3
    tftp_state.handle = NULL;
 8005442:	4b02      	ldr	r3, [pc, #8]	; (800544c <close_handle+0x50>)
 8005444:	2200      	movs	r2, #0
 8005446:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}
 800544c:	2000009c 	.word	0x2000009c
 8005450:	080059e9 	.word	0x080059e9

08005454 <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	4613      	mov	r3, r2
 8005464:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fa feb2 	bl	80001d0 <strlen>
 800546c:	4603      	mov	r3, r0
 800546e:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	b29b      	uxth	r3, r3
 8005474:	3305      	adds	r3, #5
 8005476:	b29b      	uxth	r3, r3
 8005478:	f44f 7220 	mov.w	r2, #640	; 0x280
 800547c:	4619      	mov	r1, r3
 800547e:	2036      	movs	r0, #54	; 0x36
 8005480:	f001 fb16 	bl	8006ab0 <pbuf_alloc>
 8005484:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d022      	beq.n	80054d2 <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005498:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 800549a:	7a7b      	ldrb	r3, [r7, #9]
 800549c:	b29a      	uxth	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1c9c      	adds	r4, r3, #2
 80054a2:	4610      	mov	r0, r2
 80054a4:	f000 fb1c 	bl	8005ae0 <lwip_htons>
 80054a8:	4603      	mov	r3, r0
 80054aa:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1d18      	adds	r0, r3, #4
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	461a      	mov	r2, r3
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	f005 fbce 	bl	800ac58 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <send_error+0x88>)
 80054be:	68d8      	ldr	r0, [r3, #12]
 80054c0:	897b      	ldrh	r3, [r7, #10]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	f002 fd45 	bl	8007f54 <udp_sendto>
  pbuf_free(p);
 80054ca:	69b8      	ldr	r0, [r7, #24]
 80054cc:	f001 fdd2 	bl	8007074 <pbuf_free>
 80054d0:	e000      	b.n	80054d4 <send_error+0x80>
    return;
 80054d2:	bf00      	nop
}
 80054d4:	3724      	adds	r7, #36	; 0x24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000009c 	.word	0x2000009c

080054e0 <send_ack>:

static void
send_ack(u16_t blknum)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 80054ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80054ee:	2104      	movs	r1, #4
 80054f0:	2036      	movs	r0, #54	; 0x36
 80054f2:	f001 fadd 	bl	8006ab0 <pbuf_alloc>
 80054f6:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01a      	beq.n	8005534 <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800550a:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	1c9c      	adds	r4, r3, #2
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fae4 	bl	8005ae0 <lwip_htons>
 8005518:	4603      	mov	r3, r0
 800551a:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <send_ack+0x5c>)
 800551e:	68d8      	ldr	r0, [r3, #12]
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <send_ack+0x5c>)
 8005522:	8a9b      	ldrh	r3, [r3, #20]
 8005524:	4a06      	ldr	r2, [pc, #24]	; (8005540 <send_ack+0x60>)
 8005526:	68f9      	ldr	r1, [r7, #12]
 8005528:	f002 fd14 	bl	8007f54 <udp_sendto>
  pbuf_free(p);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f001 fda1 	bl	8007074 <pbuf_free>
 8005532:	e000      	b.n	8005536 <send_ack+0x56>
    return;
 8005534:	bf00      	nop
}
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}
 800553c:	2000009c 	.word	0x2000009c
 8005540:	200000ac 	.word	0x200000ac

08005544 <resend_data>:

static void
resend_data(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <resend_data+0x5c>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	895b      	ldrh	r3, [r3, #10]
 8005550:	f44f 7220 	mov.w	r2, #640	; 0x280
 8005554:	4619      	mov	r1, r3
 8005556:	2036      	movs	r0, #54	; 0x36
 8005558:	f001 faaa 	bl	8006ab0 <pbuf_alloc>
 800555c:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d018      	beq.n	8005596 <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <resend_data+0x5c>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 feaa 	bl	80072c4 <pbuf_copy>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <resend_data+0x3a>
    pbuf_free(p);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f001 fd7c 	bl	8007074 <pbuf_free>
    return;
 800557c:	e00c      	b.n	8005598 <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 800557e:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <resend_data+0x5c>)
 8005580:	68d8      	ldr	r0, [r3, #12]
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <resend_data+0x5c>)
 8005584:	8a9b      	ldrh	r3, [r3, #20]
 8005586:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <resend_data+0x60>)
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	f002 fce3 	bl	8007f54 <udp_sendto>
  pbuf_free(p);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 fd70 	bl	8007074 <pbuf_free>
 8005594:	e000      	b.n	8005598 <resend_data+0x54>
    return;
 8005596:	bf00      	nop
}
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000009c 	.word	0x2000009c
 80055a4:	200000ac 	.word	0x200000ac

080055a8 <send_data>:

static void
send_data(void)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 80055ae:	4b28      	ldr	r3, [pc, #160]	; (8005650 <send_data+0xa8>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <send_data+0xa8>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fd5a 	bl	8007074 <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 80055c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80055c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055c8:	2036      	movs	r0, #54	; 0x36
 80055ca:	f001 fa71 	bl	8006ab0 <pbuf_alloc>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <send_data+0xa8>)
 80055d2:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 80055d4:	4b1e      	ldr	r3, [pc, #120]	; (8005650 <send_data+0xa8>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d035      	beq.n	8005648 <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 80055dc:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <send_data+0xa8>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80055ea:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <send_data+0xa8>)
 80055ee:	8c1a      	ldrh	r2, [r3, #32]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1c9c      	adds	r4, r3, #2
 80055f4:	4610      	mov	r0, r2
 80055f6:	f000 fa73 	bl	8005ae0 <lwip_htons>
 80055fa:	4603      	mov	r3, r0
 80055fc:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 80055fe:	4b14      	ldr	r3, [pc, #80]	; (8005650 <send_data+0xa8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	4a12      	ldr	r2, [pc, #72]	; (8005650 <send_data+0xa8>)
 8005606:	6850      	ldr	r0, [r2, #4]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	1d11      	adds	r1, r2, #4
 800560c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005610:	4798      	blx	r3
 8005612:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	da09      	bge.n	800562e <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <send_data+0xa8>)
 800561c:	8a99      	ldrh	r1, [r3, #20]
 800561e:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <send_data+0xac>)
 8005620:	2202      	movs	r2, #2
 8005622:	480d      	ldr	r0, [pc, #52]	; (8005658 <send_data+0xb0>)
 8005624:	f7ff ff16 	bl	8005454 <send_error>
    close_handle();
 8005628:	f7ff fee8 	bl	80053fc <close_handle>
    return;
 800562c:	e00d      	b.n	800564a <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <send_data+0xa8>)
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	3304      	adds	r3, #4
 8005638:	b29b      	uxth	r3, r3
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f001 fb93 	bl	8006d68 <pbuf_realloc>
  resend_data();
 8005642:	f7ff ff7f 	bl	8005544 <resend_data>
 8005646:	e000      	b.n	800564a <send_data+0xa2>
    return;
 8005648:	bf00      	nop
}
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	2000009c 	.word	0x2000009c
 8005654:	0800bd2c 	.word	0x0800bd2c
 8005658:	200000ac 	.word	0x200000ac

0800565c <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b092      	sub	sp, #72	; 0x48
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8005670:	4ba7      	ldr	r3, [pc, #668]	; (8005910 <recv+0x2b4>)
 8005672:	8a9b      	ldrh	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <recv+0x28>
 8005678:	4ba5      	ldr	r3, [pc, #660]	; (8005910 <recv+0x2b4>)
 800567a:	8a9b      	ldrh	r3, [r3, #20]
 800567c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005680:	429a      	cmp	r2, r3
 8005682:	d109      	bne.n	8005698 <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8005684:	4ba2      	ldr	r3, [pc, #648]	; (8005910 <recv+0x2b4>)
 8005686:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8005688:	2b00      	cmp	r3, #0
 800568a:	d010      	beq.n	80056ae <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 800568c:	4ba0      	ldr	r3, [pc, #640]	; (8005910 <recv+0x2b4>)
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d00a      	beq.n	80056ae <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8005698:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800569c:	4b9d      	ldr	r3, [pc, #628]	; (8005914 <recv+0x2b8>)
 800569e:	2202      	movs	r2, #2
 80056a0:	6838      	ldr	r0, [r7, #0]
 80056a2:	f7ff fed7 	bl	8005454 <send_error>
    pbuf_free(p);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fce4 	bl	8007074 <pbuf_free>
    return;
 80056ac:	e190      	b.n	80059d0 <recv+0x374>
  }

  opcode = sbuf[0];
 80056ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  tftp_state.last_pkt = tftp_state.timer;
 80056b4:	4b96      	ldr	r3, [pc, #600]	; (8005910 <recv+0x2b4>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	4a95      	ldr	r2, [pc, #596]	; (8005910 <recv+0x2b4>)
 80056ba:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 80056bc:	4b94      	ldr	r3, [pc, #592]	; (8005910 <recv+0x2b4>)
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  switch (opcode) {
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ca:	f000 8114 	beq.w	80058f6 <recv+0x29a>
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	f300 8171 	bgt.w	80059ba <recv+0x35e>
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056de:	f000 80a3 	beq.w	8005828 <recv+0x1cc>
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e8:	f300 8167 	bgt.w	80059ba <recv+0x35e>
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f2:	d004      	beq.n	80056fe <recv+0xa2>
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fa:	f040 815e 	bne.w	80059ba <recv+0x35e>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 8005704:	4b82      	ldr	r3, [pc, #520]	; (8005910 <recv+0x2b4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 800570c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005710:	4b80      	ldr	r3, [pc, #512]	; (8005914 <recv+0x2b8>)
 8005712:	2202      	movs	r2, #2
 8005714:	6838      	ldr	r0, [r7, #0]
 8005716:	f7ff fe9d 	bl	8005454 <send_error>
        break;
 800571a:	e156      	b.n	80059ca <recv+0x36e>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800571c:	2200      	movs	r2, #0
 800571e:	497e      	ldr	r1, [pc, #504]	; (8005918 <recv+0x2bc>)
 8005720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005724:	f002 f986 	bl	8007a34 <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 8005728:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800572c:	2302      	movs	r3, #2
 800572e:	2201      	movs	r2, #1
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f002 f887 	bl	8007844 <pbuf_memfind>
 8005736:	4603      	mov	r3, r0
 8005738:	867b      	strh	r3, [r7, #50]	; 0x32
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 800573a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800573c:	3b01      	subs	r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b15      	cmp	r3, #21
 8005742:	d907      	bls.n	8005754 <recv+0xf8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 8005744:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005748:	4b74      	ldr	r3, [pc, #464]	; (800591c <recv+0x2c0>)
 800574a:	2202      	movs	r2, #2
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f7ff fe81 	bl	8005454 <send_error>
        break;
 8005752:	e13a      	b.n	80059ca <recv+0x36e>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 8005754:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	f107 0118 	add.w	r1, r7, #24
 800575e:	2302      	movs	r3, #2
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fe81 	bl	8007468 <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 8005766:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005768:	3301      	adds	r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8005770:	2201      	movs	r2, #1
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f002 f866 	bl	8007844 <pbuf_memfind>
 8005778:	4603      	mov	r3, r0
 800577a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 800577c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800577e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b08      	cmp	r3, #8
 8005786:	d907      	bls.n	8005798 <recv+0x13c>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 8005788:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800578c:	4b64      	ldr	r3, [pc, #400]	; (8005920 <recv+0x2c4>)
 800578e:	2202      	movs	r2, #2
 8005790:	6838      	ldr	r0, [r7, #0]
 8005792:	f7ff fe5f 	bl	8005454 <send_error>
        break;
 8005796:	e118      	b.n	80059ca <recv+0x36e>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 8005798:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800579a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	b29a      	uxth	r2, r3
 80057a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80057a2:	3301      	adds	r3, #1
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f107 0110 	add.w	r1, r7, #16
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 fe5c 	bl	8007468 <pbuf_copy_partial>

      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 80057b0:	4b57      	ldr	r3, [pc, #348]	; (8005910 <recv+0x2b4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80057bc:	bf0c      	ite	eq
 80057be:	2201      	moveq	r2, #1
 80057c0:	2200      	movne	r2, #0
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f107 0110 	add.w	r1, r7, #16
 80057c8:	f107 0018 	add.w	r0, r7, #24
 80057cc:	4798      	blx	r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	4a4f      	ldr	r2, [pc, #316]	; (8005910 <recv+0x2b4>)
 80057d2:	6053      	str	r3, [r2, #4]
      tftp_state.blknum = 1;
 80057d4:	4b4e      	ldr	r3, [pc, #312]	; (8005910 <recv+0x2b4>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <recv+0x2b4>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d107      	bne.n	80057f2 <recv+0x196>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 80057e2:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80057e6:	4b4f      	ldr	r3, [pc, #316]	; (8005924 <recv+0x2c8>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	6838      	ldr	r0, [r7, #0]
 80057ec:	f7ff fe32 	bl	8005454 <send_error>
        break;
 80057f0:	e0eb      	b.n	80059ca <recv+0x36e>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a46      	ldr	r2, [pc, #280]	; (8005910 <recv+0x2b4>)
 80057f8:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 80057fa:	4a45      	ldr	r2, [pc, #276]	; (8005910 <recv+0x2b4>)
 80057fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005800:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005808:	d107      	bne.n	800581a <recv+0x1be>
        tftp_state.mode_write = 1;
 800580a:	4b41      	ldr	r3, [pc, #260]	; (8005910 <recv+0x2b4>)
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_ack(0);
 8005812:	2000      	movs	r0, #0
 8005814:	f7ff fe64 	bl	80054e0 <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 8005818:	e0d7      	b.n	80059ca <recv+0x36e>
        tftp_state.mode_write = 0;
 800581a:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <recv+0x2b4>)
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_data();
 8005822:	f7ff fec1 	bl	80055a8 <send_data>
      break;
 8005826:	e0d0      	b.n	80059ca <recv+0x36e>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <recv+0x2b4>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <recv+0x1e4>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 8005830:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005834:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <recv+0x2cc>)
 8005836:	2202      	movs	r2, #2
 8005838:	6838      	ldr	r0, [r7, #0]
 800583a:	f7ff fe0b 	bl	8005454 <send_error>
        break;
 800583e:	e0c4      	b.n	80059ca <recv+0x36e>
      }

      if (tftp_state.mode_write != 1) {
 8005840:	4b33      	ldr	r3, [pc, #204]	; (8005910 <recv+0x2b4>)
 8005842:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005846:	2b01      	cmp	r3, #1
 8005848:	d007      	beq.n	800585a <recv+0x1fe>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 800584a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <recv+0x2d0>)
 8005850:	2202      	movs	r2, #2
 8005852:	6838      	ldr	r0, [r7, #0]
 8005854:	f7ff fdfe 	bl	8005454 <send_error>
        break;
 8005858:	e0b7      	b.n	80059ca <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 800585a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585c:	3302      	adds	r3, #2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f93d 	bl	8005ae0 <lwip_htons>
 8005866:	4603      	mov	r3, r0
 8005868:	873b      	strh	r3, [r7, #56]	; 0x38
      if (blknum == tftp_state.blknum) {
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <recv+0x2b4>)
 800586c:	8c1b      	ldrh	r3, [r3, #32]
 800586e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005870:	429a      	cmp	r2, r3
 8005872:	d12c      	bne.n	80058ce <recv+0x272>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8005874:	2104      	movs	r1, #4
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fb76 	bl	8006f68 <pbuf_remove_header>

        ret = tftp_state.ctx->write(tftp_state.handle, p);
 800587c:	4b24      	ldr	r3, [pc, #144]	; (8005910 <recv+0x2b4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4a23      	ldr	r2, [pc, #140]	; (8005910 <recv+0x2b4>)
 8005884:	6852      	ldr	r2, [r2, #4]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
 800588c:	6378      	str	r0, [r7, #52]	; 0x34
        if (ret < 0) {
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	2b00      	cmp	r3, #0
 8005892:	da09      	bge.n	80058a8 <recv+0x24c>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 8005894:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <recv+0x2d4>)
 800589a:	2202      	movs	r2, #2
 800589c:	6838      	ldr	r0, [r7, #0]
 800589e:	f7ff fdd9 	bl	8005454 <send_error>
          close_handle();
 80058a2:	f7ff fdab 	bl	80053fc <close_handle>
 80058a6:	e003      	b.n	80058b0 <recv+0x254>
        } else {
          send_ack(blknum);
 80058a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fe18 	bl	80054e0 <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	891b      	ldrh	r3, [r3, #8]
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d202      	bcs.n	80058c0 <recv+0x264>
          close_handle();
 80058ba:	f7ff fd9f 	bl	80053fc <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 80058be:	e084      	b.n	80059ca <recv+0x36e>
          tftp_state.blknum++;
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <recv+0x2b4>)
 80058c2:	8c1b      	ldrh	r3, [r3, #32]
 80058c4:	3301      	adds	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <recv+0x2b4>)
 80058ca:	841a      	strh	r2, [r3, #32]
      break;
 80058cc:	e07d      	b.n	80059ca <recv+0x36e>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 80058ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058d0:	3301      	adds	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <recv+0x2b4>)
 80058d6:	8c1b      	ldrh	r3, [r3, #32]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d104      	bne.n	80058e6 <recv+0x28a>
        send_ack(blknum);
 80058dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fdfe 	bl	80054e0 <send_ack>
      break;
 80058e4:	e071      	b.n	80059ca <recv+0x36e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 80058e6:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <recv+0x2d8>)
 80058ec:	2205      	movs	r2, #5
 80058ee:	6838      	ldr	r0, [r7, #0]
 80058f0:	f7ff fdb0 	bl	8005454 <send_error>
      break;
 80058f4:	e069      	b.n	80059ca <recv+0x36e>

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <recv+0x2b4>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11c      	bne.n	8005938 <recv+0x2dc>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 80058fe:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <recv+0x2cc>)
 8005904:	2202      	movs	r2, #2
 8005906:	6838      	ldr	r0, [r7, #0]
 8005908:	f7ff fda4 	bl	8005454 <send_error>
        break;
 800590c:	e05d      	b.n	80059ca <recv+0x36e>
 800590e:	bf00      	nop
 8005910:	2000009c 	.word	0x2000009c
 8005914:	0800bd54 	.word	0x0800bd54
 8005918:	080059e9 	.word	0x080059e9
 800591c:	0800bd80 	.word	0x0800bd80
 8005920:	0800bda8 	.word	0x0800bda8
 8005924:	0800bdcc 	.word	0x0800bdcc
 8005928:	0800bdec 	.word	0x0800bdec
 800592c:	0800bdfc 	.word	0x0800bdfc
 8005930:	0800be14 	.word	0x0800be14
 8005934:	0800be28 	.word	0x0800be28
      }

      if (tftp_state.mode_write != 0) {
 8005938:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <recv+0x37c>)
 800593a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <recv+0x2f6>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 8005942:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005946:	4b25      	ldr	r3, [pc, #148]	; (80059dc <recv+0x380>)
 8005948:	2202      	movs	r2, #2
 800594a:	6838      	ldr	r0, [r7, #0]
 800594c:	f7ff fd82 	bl	8005454 <send_error>
        break;
 8005950:	e03b      	b.n	80059ca <recv+0x36e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 8005952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005954:	3302      	adds	r3, #2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f8c1 	bl	8005ae0 <lwip_htons>
 800595e:	4603      	mov	r3, r0
 8005960:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (blknum != tftp_state.blknum) {
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <recv+0x37c>)
 8005964:	8c1b      	ldrh	r3, [r3, #32]
 8005966:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005968:	429a      	cmp	r2, r3
 800596a:	d007      	beq.n	800597c <recv+0x320>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800596c:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <recv+0x384>)
 8005972:	2205      	movs	r2, #5
 8005974:	6838      	ldr	r0, [r7, #0]
 8005976:	f7ff fd6d 	bl	8005454 <send_error>
        break;
 800597a:	e026      	b.n	80059ca <recv+0x36e>
      }

      lastpkt = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	647b      	str	r3, [r7, #68]	; 0x44

      if (tftp_state.last_data != NULL) {
 8005980:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <recv+0x37c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <recv+0x340>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 8005988:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <recv+0x37c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	891b      	ldrh	r3, [r3, #8]
 800598e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
      }

      if (!lastpkt) {
 800599c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d108      	bne.n	80059b4 <recv+0x358>
        tftp_state.blknum++;
 80059a2:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <recv+0x37c>)
 80059a4:	8c1b      	ldrh	r3, [r3, #32]
 80059a6:	3301      	adds	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <recv+0x37c>)
 80059ac:	841a      	strh	r2, [r3, #32]
        send_data();
 80059ae:	f7ff fdfb 	bl	80055a8 <send_data>
      } else {
        close_handle();
      }

      break;
 80059b2:	e00a      	b.n	80059ca <recv+0x36e>
        close_handle();
 80059b4:	f7ff fd22 	bl	80053fc <close_handle>
      break;
 80059b8:	e007      	b.n	80059ca <recv+0x36e>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 80059ba:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <recv+0x388>)
 80059c0:	2204      	movs	r2, #4
 80059c2:	6838      	ldr	r0, [r7, #0]
 80059c4:	f7ff fd46 	bl	8005454 <send_error>
      break;
 80059c8:	bf00      	nop
  }

  pbuf_free(p);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fb52 	bl	8007074 <pbuf_free>
}
 80059d0:	3748      	adds	r7, #72	; 0x48
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2000009c 	.word	0x2000009c
 80059dc:	0800be3c 	.word	0x0800be3c
 80059e0:	0800be28 	.word	0x0800be28
 80059e4:	0800be54 	.word	0x0800be54

080059e8 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <tftp_tmr+0x6c>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <tftp_tmr+0x6c>)
 80059f8:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 80059fa:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <tftp_tmr+0x6c>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d023      	beq.n	8005a4a <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 8005a02:	2200      	movs	r2, #0
 8005a04:	4914      	ldr	r1, [pc, #80]	; (8005a58 <tftp_tmr+0x70>)
 8005a06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a0a:	f002 f813 	bl	8007a34 <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <tftp_tmr+0x6c>)
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <tftp_tmr+0x6c>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b0a      	cmp	r3, #10
 8005a1a:	dd17      	ble.n	8005a4c <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <tftp_tmr+0x6c>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <tftp_tmr+0x5c>
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <tftp_tmr+0x6c>)
 8005a26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d80a      	bhi.n	8005a44 <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 8005a2e:	f7ff fd89 	bl	8005544 <resend_data>
      tftp_state.retries++;
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <tftp_tmr+0x6c>)
 8005a34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005a38:	3301      	adds	r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <tftp_tmr+0x6c>)
 8005a3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005a42:	e003      	b.n	8005a4c <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 8005a44:	f7ff fcda 	bl	80053fc <close_handle>
 8005a48:	e000      	b.n	8005a4c <tftp_tmr+0x64>
    return;
 8005a4a:	bf00      	nop
    }
  }
}
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	2000009c 	.word	0x2000009c
 8005a58:	080059e9 	.word	0x080059e9

08005a5c <tftp_init>:
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init(const struct tftp_context *ctx)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8005a64:	202e      	movs	r0, #46	; 0x2e
 8005a66:	f002 fdc2 	bl	80085ee <udp_new_ip_type>
 8005a6a:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <tftp_init+0x1c>
    return ERR_MEM;
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	e028      	b.n	8005aca <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 8005a78:	2245      	movs	r2, #69	; 0x45
 8005a7a:	4916      	ldr	r1, [pc, #88]	; (8005ad4 <tftp_init+0x78>)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f002 fc1f 	bl	80082c0 <udp_bind>
 8005a82:	4603      	mov	r3, r0
 8005a84:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 8005a86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <tftp_init+0x3e>
    udp_remove(pcb);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f002 fd54 	bl	800853c <udp_remove>
    return ret;
 8005a94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a98:	e017      	b.n	8005aca <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <tftp_init+0x7c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <tftp_init+0x7c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <tftp_init+0x7c>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <tftp_init+0x7c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <tftp_init+0x7c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 8005ab8:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <tftp_init+0x7c>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <tftp_init+0x80>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f002 fd1a 	bl	80084fc <udp_recv>

  return ERR_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	0800d49c 	.word	0x0800d49c
 8005ad8:	2000009c 	.word	0x2000009c
 8005adc:	0800565d 	.word	0x0800565d

08005ae0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	b21a      	sxth	r2, r3
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	b21b      	sxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	b29b      	uxth	r3, r3
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b14:	f000 f8d2 	bl	8005cbc <mem_init>
  memp_init();
 8005b18:	f000 fbd8 	bl	80062cc <memp_init>
  pbuf_init();
  netif_init();
 8005b1c:	f000 fc90 	bl	8006440 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005b20:	f002 f822 	bl	8007b68 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005b24:	f001 ff64 	bl	80079f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <ptr_to_mem+0x20>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	4413      	add	r3, r2
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	200000c0 	.word	0x200000c0

08005b54 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <mem_to_ptr+0x20>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	b29b      	uxth	r3, r3
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	200000c0 	.word	0x200000c0

08005b78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b80:	4b45      	ldr	r3, [pc, #276]	; (8005c98 <plug_holes+0x120>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d206      	bcs.n	8005b98 <plug_holes+0x20>
 8005b8a:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <plug_holes+0x124>)
 8005b8c:	f240 12df 	movw	r2, #479	; 0x1df
 8005b90:	4943      	ldr	r1, [pc, #268]	; (8005ca0 <plug_holes+0x128>)
 8005b92:	4844      	ldr	r0, [pc, #272]	; (8005ca4 <plug_holes+0x12c>)
 8005b94:	f005 f920 	bl	800add8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <plug_holes+0x130>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d306      	bcc.n	8005bb0 <plug_holes+0x38>
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <plug_holes+0x124>)
 8005ba4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ba8:	4940      	ldr	r1, [pc, #256]	; (8005cac <plug_holes+0x134>)
 8005baa:	483e      	ldr	r0, [pc, #248]	; (8005ca4 <plug_holes+0x12c>)
 8005bac:	f005 f914 	bl	800add8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	791b      	ldrb	r3, [r3, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <plug_holes+0x4e>
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <plug_holes+0x124>)
 8005bba:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005bbe:	493c      	ldr	r1, [pc, #240]	; (8005cb0 <plug_holes+0x138>)
 8005bc0:	4838      	ldr	r0, [pc, #224]	; (8005ca4 <plug_holes+0x12c>)
 8005bc2:	f005 f909 	bl	800add8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005bce:	d906      	bls.n	8005bde <plug_holes+0x66>
 8005bd0:	4b32      	ldr	r3, [pc, #200]	; (8005c9c <plug_holes+0x124>)
 8005bd2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005bd6:	4937      	ldr	r1, [pc, #220]	; (8005cb4 <plug_holes+0x13c>)
 8005bd8:	4832      	ldr	r0, [pc, #200]	; (8005ca4 <plug_holes+0x12c>)
 8005bda:	f005 f8fd 	bl	800add8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff ffa4 	bl	8005b30 <ptr_to_mem>
 8005be8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d024      	beq.n	8005c3c <plug_holes+0xc4>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	791b      	ldrb	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d120      	bne.n	8005c3c <plug_holes+0xc4>
 8005bfa:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <plug_holes+0x130>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d01b      	beq.n	8005c3c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c04:	4b2c      	ldr	r3, [pc, #176]	; (8005cb8 <plug_holes+0x140>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d102      	bne.n	8005c14 <plug_holes+0x9c>
      lfree = mem;
 8005c0e:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <plug_holes+0x140>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c24:	d00a      	beq.n	8005c3c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ff80 	bl	8005b30 <ptr_to_mem>
 8005c30:	4604      	mov	r4, r0
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ff8e 	bl	8005b54 <mem_to_ptr>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff75 	bl	8005b30 <ptr_to_mem>
 8005c46:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d01f      	beq.n	8005c90 <plug_holes+0x118>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	791b      	ldrb	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11b      	bne.n	8005c90 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005c58:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <plug_holes+0x140>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d102      	bne.n	8005c68 <plug_holes+0xf0>
      lfree = pmem;
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <plug_holes+0x140>)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	881a      	ldrh	r2, [r3, #0]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005c78:	d00a      	beq.n	8005c90 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff56 	bl	8005b30 <ptr_to_mem>
 8005c84:	4604      	mov	r4, r0
 8005c86:	68b8      	ldr	r0, [r7, #8]
 8005c88:	f7ff ff64 	bl	8005b54 <mem_to_ptr>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}
 8005c98:	200000c0 	.word	0x200000c0
 8005c9c:	0800bef4 	.word	0x0800bef4
 8005ca0:	0800bf24 	.word	0x0800bf24
 8005ca4:	0800bf3c 	.word	0x0800bf3c
 8005ca8:	200000c4 	.word	0x200000c4
 8005cac:	0800bf64 	.word	0x0800bf64
 8005cb0:	0800bf80 	.word	0x0800bf80
 8005cb4:	0800bf9c 	.word	0x0800bf9c
 8005cb8:	200000c8 	.word	0x200000c8

08005cbc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005cc2:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <mem_init+0x68>)
 8005cc4:	3303      	adds	r3, #3
 8005cc6:	f023 0303 	bic.w	r3, r3, #3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <mem_init+0x6c>)
 8005cce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <mem_init+0x6c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005cdc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005cea:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005cee:	f7ff ff1f 	bl	8005b30 <ptr_to_mem>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a0d      	ldr	r2, [pc, #52]	; (8005d2c <mem_init+0x70>)
 8005cf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <mem_init+0x70>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <mem_init+0x70>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005d08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <mem_init+0x70>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005d12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <mem_init+0x6c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <mem_init+0x74>)
 8005d1a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20003404 	.word	0x20003404
 8005d28:	200000c0 	.word	0x200000c0
 8005d2c:	200000c4 	.word	0x200000c4
 8005d30:	200000c8 	.word	0x200000c8

08005d34 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff09 	bl	8005b54 <mem_to_ptr>
 8005d42:	4603      	mov	r3, r0
 8005d44:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fef0 	bl	8005b30 <ptr_to_mem>
 8005d50:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	885b      	ldrh	r3, [r3, #2]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff feea 	bl	8005b30 <ptr_to_mem>
 8005d5c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d66:	d818      	bhi.n	8005d9a <mem_link_valid+0x66>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	885b      	ldrh	r3, [r3, #2]
 8005d6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005d70:	d813      	bhi.n	8005d9a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005d76:	8afa      	ldrh	r2, [r7, #22]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d004      	beq.n	8005d86 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	8afa      	ldrh	r2, [r7, #22]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d109      	bne.n	8005d9a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d86:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <mem_link_valid+0x74>)
 8005d88:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d006      	beq.n	8005d9e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	885b      	ldrh	r3, [r3, #2]
 8005d94:	8afa      	ldrh	r2, [r7, #22]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d001      	beq.n	8005d9e <mem_link_valid+0x6a>
    return 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <mem_link_valid+0x6c>
  }
  return 1;
 8005d9e:	2301      	movs	r3, #1
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200000c4 	.word	0x200000c4

08005dac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04c      	beq.n	8005e54 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005dc4:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <mem_free+0xb0>)
 8005dc6:	f240 2273 	movw	r2, #627	; 0x273
 8005dca:	4925      	ldr	r1, [pc, #148]	; (8005e60 <mem_free+0xb4>)
 8005dcc:	4825      	ldr	r0, [pc, #148]	; (8005e64 <mem_free+0xb8>)
 8005dce:	f005 f803 	bl	800add8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005dd2:	e040      	b.n	8005e56 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3b08      	subs	r3, #8
 8005dd8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005dda:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <mem_free+0xbc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d306      	bcc.n	8005df2 <mem_free+0x46>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 020c 	add.w	r2, r3, #12
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <mem_free+0xc0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d907      	bls.n	8005e02 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005df2:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <mem_free+0xb0>)
 8005df4:	f240 227f 	movw	r2, #639	; 0x27f
 8005df8:	491d      	ldr	r1, [pc, #116]	; (8005e70 <mem_free+0xc4>)
 8005dfa:	481a      	ldr	r0, [pc, #104]	; (8005e64 <mem_free+0xb8>)
 8005dfc:	f004 ffec 	bl	800add8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e00:	e029      	b.n	8005e56 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	791b      	ldrb	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d107      	bne.n	8005e1a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e0a:	4b14      	ldr	r3, [pc, #80]	; (8005e5c <mem_free+0xb0>)
 8005e0c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005e10:	4918      	ldr	r1, [pc, #96]	; (8005e74 <mem_free+0xc8>)
 8005e12:	4814      	ldr	r0, [pc, #80]	; (8005e64 <mem_free+0xb8>)
 8005e14:	f004 ffe0 	bl	800add8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e18:	e01d      	b.n	8005e56 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ff8a 	bl	8005d34 <mem_link_valid>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <mem_free+0xb0>)
 8005e28:	f240 2295 	movw	r2, #661	; 0x295
 8005e2c:	4912      	ldr	r1, [pc, #72]	; (8005e78 <mem_free+0xcc>)
 8005e2e:	480d      	ldr	r0, [pc, #52]	; (8005e64 <mem_free+0xb8>)
 8005e30:	f004 ffd2 	bl	800add8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e34:	e00f      	b.n	8005e56 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005e3c:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <mem_free+0xd0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d202      	bcs.n	8005e4c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005e46:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <mem_free+0xd0>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fe93 	bl	8005b78 <plug_holes>
 8005e52:	e000      	b.n	8005e56 <mem_free+0xaa>
    return;
 8005e54:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	0800bef4 	.word	0x0800bef4
 8005e60:	0800bfc8 	.word	0x0800bfc8
 8005e64:	0800bf3c 	.word	0x0800bf3c
 8005e68:	200000c0 	.word	0x200000c0
 8005e6c:	200000c4 	.word	0x200000c4
 8005e70:	0800bfec 	.word	0x0800bfec
 8005e74:	0800c008 	.word	0x0800c008
 8005e78:	0800c030 	.word	0x0800c030
 8005e7c:	200000c8 	.word	0x200000c8

08005e80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	3303      	adds	r3, #3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005e98:	8bfb      	ldrh	r3, [r7, #30]
 8005e9a:	2b0b      	cmp	r3, #11
 8005e9c:	d801      	bhi.n	8005ea2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005ea2:	8bfb      	ldrh	r3, [r7, #30]
 8005ea4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ea8:	d803      	bhi.n	8005eb2 <mem_trim+0x32>
 8005eaa:	8bfa      	ldrh	r2, [r7, #30]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d201      	bcs.n	8005eb6 <mem_trim+0x36>
    return NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e0cc      	b.n	8006050 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005eb6:	4b68      	ldr	r3, [pc, #416]	; (8006058 <mem_trim+0x1d8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d304      	bcc.n	8005eca <mem_trim+0x4a>
 8005ec0:	4b66      	ldr	r3, [pc, #408]	; (800605c <mem_trim+0x1dc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d306      	bcc.n	8005ed8 <mem_trim+0x58>
 8005eca:	4b65      	ldr	r3, [pc, #404]	; (8006060 <mem_trim+0x1e0>)
 8005ecc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005ed0:	4964      	ldr	r1, [pc, #400]	; (8006064 <mem_trim+0x1e4>)
 8005ed2:	4865      	ldr	r0, [pc, #404]	; (8006068 <mem_trim+0x1e8>)
 8005ed4:	f004 ff80 	bl	800add8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005ed8:	4b5f      	ldr	r3, [pc, #380]	; (8006058 <mem_trim+0x1d8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d304      	bcc.n	8005eec <mem_trim+0x6c>
 8005ee2:	4b5e      	ldr	r3, [pc, #376]	; (800605c <mem_trim+0x1dc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d301      	bcc.n	8005ef0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	e0af      	b.n	8006050 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b08      	subs	r3, #8
 8005ef4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005ef6:	69b8      	ldr	r0, [r7, #24]
 8005ef8:	f7ff fe2c 	bl	8005b54 <mem_to_ptr>
 8005efc:	4603      	mov	r3, r0
 8005efe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	8afb      	ldrh	r3, [r7, #22]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b08      	subs	r3, #8
 8005f0c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f0e:	8bfa      	ldrh	r2, [r7, #30]
 8005f10:	8abb      	ldrh	r3, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d906      	bls.n	8005f24 <mem_trim+0xa4>
 8005f16:	4b52      	ldr	r3, [pc, #328]	; (8006060 <mem_trim+0x1e0>)
 8005f18:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005f1c:	4953      	ldr	r1, [pc, #332]	; (800606c <mem_trim+0x1ec>)
 8005f1e:	4852      	ldr	r0, [pc, #328]	; (8006068 <mem_trim+0x1e8>)
 8005f20:	f004 ff5a 	bl	800add8 <iprintf>
  if (newsize > size) {
 8005f24:	8bfa      	ldrh	r2, [r7, #30]
 8005f26:	8abb      	ldrh	r3, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d901      	bls.n	8005f30 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e08f      	b.n	8006050 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005f30:	8bfa      	ldrh	r2, [r7, #30]
 8005f32:	8abb      	ldrh	r3, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d101      	bne.n	8005f3c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	e089      	b.n	8006050 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fdf5 	bl	8005b30 <ptr_to_mem>
 8005f46:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	791b      	ldrb	r3, [r3, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d13f      	bne.n	8005fd0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005f58:	d106      	bne.n	8005f68 <mem_trim+0xe8>
 8005f5a:	4b41      	ldr	r3, [pc, #260]	; (8006060 <mem_trim+0x1e0>)
 8005f5c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005f60:	4943      	ldr	r1, [pc, #268]	; (8006070 <mem_trim+0x1f0>)
 8005f62:	4841      	ldr	r0, [pc, #260]	; (8006068 <mem_trim+0x1e8>)
 8005f64:	f004 ff38 	bl	800add8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005f6e:	8afa      	ldrh	r2, [r7, #22]
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	4413      	add	r3, r2
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3308      	adds	r3, #8
 8005f78:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005f7a:	4b3e      	ldr	r3, [pc, #248]	; (8006074 <mem_trim+0x1f4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d106      	bne.n	8005f92 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fdd2 	bl	8005b30 <ptr_to_mem>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4a39      	ldr	r2, [pc, #228]	; (8006074 <mem_trim+0x1f4>)
 8005f90:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005f92:	89fb      	ldrh	r3, [r7, #14]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fdcb 	bl	8005b30 <ptr_to_mem>
 8005f9a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	89ba      	ldrh	r2, [r7, #12]
 8005fa6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	8afa      	ldrh	r2, [r7, #22]
 8005fac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	89fa      	ldrh	r2, [r7, #14]
 8005fb2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005fbc:	d047      	beq.n	800604e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fdb4 	bl	8005b30 <ptr_to_mem>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	8053      	strh	r3, [r2, #2]
 8005fce:	e03e      	b.n	800604e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005fd0:	8bfb      	ldrh	r3, [r7, #30]
 8005fd2:	f103 0214 	add.w	r2, r3, #20
 8005fd6:	8abb      	ldrh	r3, [r7, #20]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d838      	bhi.n	800604e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005fdc:	8afa      	ldrh	r2, [r7, #22]
 8005fde:	8bfb      	ldrh	r3, [r7, #30]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005ff0:	d106      	bne.n	8006000 <mem_trim+0x180>
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <mem_trim+0x1e0>)
 8005ff4:	f240 3216 	movw	r2, #790	; 0x316
 8005ff8:	491d      	ldr	r1, [pc, #116]	; (8006070 <mem_trim+0x1f0>)
 8005ffa:	481b      	ldr	r0, [pc, #108]	; (8006068 <mem_trim+0x1e8>)
 8005ffc:	f004 feec 	bl	800add8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006000:	89fb      	ldrh	r3, [r7, #14]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fd94 	bl	8005b30 <ptr_to_mem>
 8006008:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800600a:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <mem_trim+0x1f4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d202      	bcs.n	800601a <mem_trim+0x19a>
      lfree = mem2;
 8006014:	4a17      	ldr	r2, [pc, #92]	; (8006074 <mem_trim+0x1f4>)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2200      	movs	r2, #0
 800601e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	8afa      	ldrh	r2, [r7, #22]
 800602c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	89fa      	ldrh	r2, [r7, #14]
 8006032:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800603c:	d007      	beq.n	800604e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fd74 	bl	8005b30 <ptr_to_mem>
 8006048:	4602      	mov	r2, r0
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800604e:	687b      	ldr	r3, [r7, #4]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	200000c0 	.word	0x200000c0
 800605c:	200000c4 	.word	0x200000c4
 8006060:	0800bef4 	.word	0x0800bef4
 8006064:	0800c064 	.word	0x0800c064
 8006068:	0800bf3c 	.word	0x0800bf3c
 800606c:	0800c07c 	.word	0x0800c07c
 8006070:	0800c09c 	.word	0x0800c09c
 8006074:	200000c8 	.word	0x200000c8

08006078 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <mem_malloc+0x14>
    return NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	e0d9      	b.n	8006240 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	3303      	adds	r3, #3
 8006090:	b29b      	uxth	r3, r3
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006098:	8bbb      	ldrh	r3, [r7, #28]
 800609a:	2b0b      	cmp	r3, #11
 800609c:	d801      	bhi.n	80060a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800609e:	230c      	movs	r3, #12
 80060a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80060a2:	8bbb      	ldrh	r3, [r7, #28]
 80060a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80060a8:	d803      	bhi.n	80060b2 <mem_malloc+0x3a>
 80060aa:	8bba      	ldrh	r2, [r7, #28]
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d201      	bcs.n	80060b6 <mem_malloc+0x3e>
    return NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e0c4      	b.n	8006240 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060b6:	4b64      	ldr	r3, [pc, #400]	; (8006248 <mem_malloc+0x1d0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fd4a 	bl	8005b54 <mem_to_ptr>
 80060c0:	4603      	mov	r3, r0
 80060c2:	83fb      	strh	r3, [r7, #30]
 80060c4:	e0b4      	b.n	8006230 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80060c6:	8bfb      	ldrh	r3, [r7, #30]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fd31 	bl	8005b30 <ptr_to_mem>
 80060ce:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	791b      	ldrb	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 80a4 	bne.w	8006222 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	8bfb      	ldrh	r3, [r7, #30]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f1a3 0208 	sub.w	r2, r3, #8
 80060e8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f0c0 8099 	bcc.w	8006222 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	8bfb      	ldrh	r3, [r7, #30]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f1a3 0208 	sub.w	r2, r3, #8
 80060fe:	8bbb      	ldrh	r3, [r7, #28]
 8006100:	3314      	adds	r3, #20
 8006102:	429a      	cmp	r2, r3
 8006104:	d333      	bcc.n	800616e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006106:	8bfa      	ldrh	r2, [r7, #30]
 8006108:	8bbb      	ldrh	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	3308      	adds	r3, #8
 8006110:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006112:	8a7b      	ldrh	r3, [r7, #18]
 8006114:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006118:	d106      	bne.n	8006128 <mem_malloc+0xb0>
 800611a:	4b4c      	ldr	r3, [pc, #304]	; (800624c <mem_malloc+0x1d4>)
 800611c:	f240 3287 	movw	r2, #903	; 0x387
 8006120:	494b      	ldr	r1, [pc, #300]	; (8006250 <mem_malloc+0x1d8>)
 8006122:	484c      	ldr	r0, [pc, #304]	; (8006254 <mem_malloc+0x1dc>)
 8006124:	f004 fe58 	bl	800add8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006128:	8a7b      	ldrh	r3, [r7, #18]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fd00 	bl	8005b30 <ptr_to_mem>
 8006130:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8bfa      	ldrh	r2, [r7, #30]
 8006144:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	8a7a      	ldrh	r2, [r7, #18]
 800614a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2201      	movs	r2, #1
 8006150:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800615a:	d00b      	beq.n	8006174 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fce5 	bl	8005b30 <ptr_to_mem>
 8006166:	4602      	mov	r2, r0
 8006168:	8a7b      	ldrh	r3, [r7, #18]
 800616a:	8053      	strh	r3, [r2, #2]
 800616c:	e002      	b.n	8006174 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2201      	movs	r2, #1
 8006172:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006174:	4b34      	ldr	r3, [pc, #208]	; (8006248 <mem_malloc+0x1d0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d127      	bne.n	80061ce <mem_malloc+0x156>
          struct mem *cur = lfree;
 800617e:	4b32      	ldr	r3, [pc, #200]	; (8006248 <mem_malloc+0x1d0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006184:	e005      	b.n	8006192 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fcd0 	bl	8005b30 <ptr_to_mem>
 8006190:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <mem_malloc+0x12c>
 800619a:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <mem_malloc+0x1e0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1f0      	bne.n	8006186 <mem_malloc+0x10e>
          }
          lfree = cur;
 80061a4:	4a28      	ldr	r2, [pc, #160]	; (8006248 <mem_malloc+0x1d0>)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80061aa:	4b27      	ldr	r3, [pc, #156]	; (8006248 <mem_malloc+0x1d0>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <mem_malloc+0x1e0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d00b      	beq.n	80061ce <mem_malloc+0x156>
 80061b6:	4b24      	ldr	r3, [pc, #144]	; (8006248 <mem_malloc+0x1d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	791b      	ldrb	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <mem_malloc+0x156>
 80061c0:	4b22      	ldr	r3, [pc, #136]	; (800624c <mem_malloc+0x1d4>)
 80061c2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80061c6:	4925      	ldr	r1, [pc, #148]	; (800625c <mem_malloc+0x1e4>)
 80061c8:	4822      	ldr	r0, [pc, #136]	; (8006254 <mem_malloc+0x1dc>)
 80061ca:	f004 fe05 	bl	800add8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80061ce:	8bba      	ldrh	r2, [r7, #28]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4413      	add	r3, r2
 80061d4:	3308      	adds	r3, #8
 80061d6:	4a20      	ldr	r2, [pc, #128]	; (8006258 <mem_malloc+0x1e0>)
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	4293      	cmp	r3, r2
 80061dc:	d906      	bls.n	80061ec <mem_malloc+0x174>
 80061de:	4b1b      	ldr	r3, [pc, #108]	; (800624c <mem_malloc+0x1d4>)
 80061e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80061e4:	491e      	ldr	r1, [pc, #120]	; (8006260 <mem_malloc+0x1e8>)
 80061e6:	481b      	ldr	r0, [pc, #108]	; (8006254 <mem_malloc+0x1dc>)
 80061e8:	f004 fdf6 	bl	800add8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <mem_malloc+0x18c>
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <mem_malloc+0x1d4>)
 80061f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80061fc:	4919      	ldr	r1, [pc, #100]	; (8006264 <mem_malloc+0x1ec>)
 80061fe:	4815      	ldr	r0, [pc, #84]	; (8006254 <mem_malloc+0x1dc>)
 8006200:	f004 fdea 	bl	800add8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <mem_malloc+0x1a4>
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <mem_malloc+0x1d4>)
 8006210:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006214:	4914      	ldr	r1, [pc, #80]	; (8006268 <mem_malloc+0x1f0>)
 8006216:	480f      	ldr	r0, [pc, #60]	; (8006254 <mem_malloc+0x1dc>)
 8006218:	f004 fdde 	bl	800add8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3308      	adds	r3, #8
 8006220:	e00e      	b.n	8006240 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006222:	8bfb      	ldrh	r3, [r7, #30]
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fc83 	bl	8005b30 <ptr_to_mem>
 800622a:	4603      	mov	r3, r0
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006230:	8bfa      	ldrh	r2, [r7, #30]
 8006232:	8bbb      	ldrh	r3, [r7, #28]
 8006234:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006238:	429a      	cmp	r2, r3
 800623a:	f4ff af44 	bcc.w	80060c6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	200000c8 	.word	0x200000c8
 800624c:	0800bef4 	.word	0x0800bef4
 8006250:	0800c09c 	.word	0x0800c09c
 8006254:	0800bf3c 	.word	0x0800bf3c
 8006258:	200000c4 	.word	0x200000c4
 800625c:	0800c0b0 	.word	0x0800c0b0
 8006260:	0800c0cc 	.word	0x0800c0cc
 8006264:	0800c0fc 	.word	0x0800c0fc
 8006268:	0800c12c 	.word	0x0800c12c

0800626c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	3303      	adds	r3, #3
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e011      	b.n	80062b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	dbe7      	blt.n	800628e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80062d2:	2300      	movs	r3, #0
 80062d4:	80fb      	strh	r3, [r7, #6]
 80062d6:	e009      	b.n	80062ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <memp_init+0x30>)
 80062dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff ffc3 	bl	800626c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	3301      	adds	r3, #1
 80062ea:	80fb      	strh	r3, [r7, #6]
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	2b05      	cmp	r3, #5
 80062f0:	d9f2      	bls.n	80062d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	0800d474 	.word	0x0800d474

08006300 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d012      	beq.n	800633c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <do_memp_malloc_pool+0x38>
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <do_memp_malloc_pool+0x48>)
 800632c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006330:	4906      	ldr	r1, [pc, #24]	; (800634c <do_memp_malloc_pool+0x4c>)
 8006332:	4807      	ldr	r0, [pc, #28]	; (8006350 <do_memp_malloc_pool+0x50>)
 8006334:	f004 fd50 	bl	800add8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	e000      	b.n	800633e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	0800c150 	.word	0x0800c150
 800634c:	0800c180 	.word	0x0800c180
 8006350:	0800c1a4 	.word	0x0800c1a4

08006354 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b05      	cmp	r3, #5
 8006362:	d908      	bls.n	8006376 <memp_malloc+0x22>
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <memp_malloc+0x3c>)
 8006366:	f240 1257 	movw	r2, #343	; 0x157
 800636a:	490a      	ldr	r1, [pc, #40]	; (8006394 <memp_malloc+0x40>)
 800636c:	480a      	ldr	r0, [pc, #40]	; (8006398 <memp_malloc+0x44>)
 800636e:	f004 fd33 	bl	800add8 <iprintf>
 8006372:	2300      	movs	r3, #0
 8006374:	e008      	b.n	8006388 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4a08      	ldr	r2, [pc, #32]	; (800639c <memp_malloc+0x48>)
 800637a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff ffbe 	bl	8006300 <do_memp_malloc_pool>
 8006384:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	0800c150 	.word	0x0800c150
 8006394:	0800c1e0 	.word	0x0800c1e0
 8006398:	0800c1a4 	.word	0x0800c1a4
 800639c:	0800d474 	.word	0x0800d474

080063a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	f003 0303 	and.w	r3, r3, #3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d006      	beq.n	80063c2 <do_memp_free_pool+0x22>
 80063b4:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <do_memp_free_pool+0x40>)
 80063b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80063ba:	490a      	ldr	r1, [pc, #40]	; (80063e4 <do_memp_free_pool+0x44>)
 80063bc:	480a      	ldr	r0, [pc, #40]	; (80063e8 <do_memp_free_pool+0x48>)
 80063be:	f004 fd0b 	bl	800add8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	0800c150 	.word	0x0800c150
 80063e4:	0800c200 	.word	0x0800c200
 80063e8:	0800c1a4 	.word	0x0800c1a4

080063ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	6039      	str	r1, [r7, #0]
 80063f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d907      	bls.n	800640e <memp_free+0x22>
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <memp_free+0x44>)
 8006400:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006404:	490b      	ldr	r1, [pc, #44]	; (8006434 <memp_free+0x48>)
 8006406:	480c      	ldr	r0, [pc, #48]	; (8006438 <memp_free+0x4c>)
 8006408:	f004 fce6 	bl	800add8 <iprintf>
 800640c:	e00c      	b.n	8006428 <memp_free+0x3c>

  if (mem == NULL) {
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <memp_free+0x50>)
 8006418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ffbe 	bl	80063a0 <do_memp_free_pool>
 8006424:	e000      	b.n	8006428 <memp_free+0x3c>
    return;
 8006426:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	0800c150 	.word	0x0800c150
 8006434:	0800c220 	.word	0x0800c220
 8006438:	0800c1a4 	.word	0x0800c1a4
 800643c:	0800d474 	.word	0x0800d474

08006440 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d108      	bne.n	8006476 <netif_add+0x26>
 8006464:	4b57      	ldr	r3, [pc, #348]	; (80065c4 <netif_add+0x174>)
 8006466:	f240 1227 	movw	r2, #295	; 0x127
 800646a:	4957      	ldr	r1, [pc, #348]	; (80065c8 <netif_add+0x178>)
 800646c:	4857      	ldr	r0, [pc, #348]	; (80065cc <netif_add+0x17c>)
 800646e:	f004 fcb3 	bl	800add8 <iprintf>
 8006472:	2300      	movs	r3, #0
 8006474:	e0a2      	b.n	80065bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d108      	bne.n	800648e <netif_add+0x3e>
 800647c:	4b51      	ldr	r3, [pc, #324]	; (80065c4 <netif_add+0x174>)
 800647e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006482:	4953      	ldr	r1, [pc, #332]	; (80065d0 <netif_add+0x180>)
 8006484:	4851      	ldr	r0, [pc, #324]	; (80065cc <netif_add+0x17c>)
 8006486:	f004 fca7 	bl	800add8 <iprintf>
 800648a:	2300      	movs	r3, #0
 800648c:	e096      	b.n	80065bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006494:	4b4f      	ldr	r3, [pc, #316]	; (80065d4 <netif_add+0x184>)
 8006496:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800649e:	4b4d      	ldr	r3, [pc, #308]	; (80065d4 <netif_add+0x184>)
 80064a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80064a8:	4b4a      	ldr	r3, [pc, #296]	; (80065d4 <netif_add+0x184>)
 80064aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a45      	ldr	r2, [pc, #276]	; (80065d8 <netif_add+0x188>)
 80064c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80064de:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <netif_add+0x18c>)
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f90f 	bl	8006718 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <netif_add+0xba>
    return NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	e058      	b.n	80065bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006510:	2bff      	cmp	r3, #255	; 0xff
 8006512:	d103      	bne.n	800651c <netif_add+0xcc>
        netif->num = 0;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006520:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <netif_add+0x190>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e02b      	b.n	8006580 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	429a      	cmp	r2, r3
 800652e:	d106      	bne.n	800653e <netif_add+0xee>
 8006530:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <netif_add+0x174>)
 8006532:	f240 128b 	movw	r2, #395	; 0x18b
 8006536:	492b      	ldr	r1, [pc, #172]	; (80065e4 <netif_add+0x194>)
 8006538:	4824      	ldr	r0, [pc, #144]	; (80065cc <netif_add+0x17c>)
 800653a:	f004 fc4d 	bl	800add8 <iprintf>
        num_netifs++;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2bff      	cmp	r3, #255	; 0xff
 8006548:	dd06      	ble.n	8006558 <netif_add+0x108>
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <netif_add+0x174>)
 800654c:	f240 128d 	movw	r2, #397	; 0x18d
 8006550:	4925      	ldr	r1, [pc, #148]	; (80065e8 <netif_add+0x198>)
 8006552:	481e      	ldr	r0, [pc, #120]	; (80065cc <netif_add+0x17c>)
 8006554:	f004 fc40 	bl	800add8 <iprintf>
        if (netif2->num == netif->num) {
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006564:	429a      	cmp	r2, r3
 8006566:	d108      	bne.n	800657a <netif_add+0x12a>
          netif->num++;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800656e:	3301      	adds	r3, #1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006578:	e005      	b.n	8006586 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1d0      	bne.n	8006528 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1be      	bne.n	800650a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006592:	2bfe      	cmp	r3, #254	; 0xfe
 8006594:	d103      	bne.n	800659e <netif_add+0x14e>
    netif_num = 0;
 8006596:	4b11      	ldr	r3, [pc, #68]	; (80065dc <netif_add+0x18c>)
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	e006      	b.n	80065ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a4:	3301      	adds	r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <netif_add+0x18c>)
 80065aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <netif_add+0x190>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80065b4:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <netif_add+0x190>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	0800c23c 	.word	0x0800c23c
 80065c8:	0800c2d0 	.word	0x0800c2d0
 80065cc:	0800c28c 	.word	0x0800c28c
 80065d0:	0800c2ec 	.word	0x0800c2ec
 80065d4:	0800d49c 	.word	0x0800d49c
 80065d8:	080069f3 	.word	0x080069f3
 80065dc:	200000e4 	.word	0x200000e4
 80065e0:	200085d8 	.word	0x200085d8
 80065e4:	0800c310 	.word	0x0800c310
 80065e8:	0800c324 	.word	0x0800c324

080065ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f002 f805 	bl	8008608 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <netif_do_set_ipaddr+0x20>
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <netif_do_set_ipaddr+0x88>)
 800661c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006620:	491c      	ldr	r1, [pc, #112]	; (8006694 <netif_do_set_ipaddr+0x8c>)
 8006622:	481d      	ldr	r0, [pc, #116]	; (8006698 <netif_do_set_ipaddr+0x90>)
 8006624:	f004 fbd8 	bl	800add8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <netif_do_set_ipaddr+0x34>
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <netif_do_set_ipaddr+0x88>)
 8006630:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006634:	4917      	ldr	r1, [pc, #92]	; (8006694 <netif_do_set_ipaddr+0x8c>)
 8006636:	4818      	ldr	r0, [pc, #96]	; (8006698 <netif_do_set_ipaddr+0x90>)
 8006638:	f004 fbce 	bl	800add8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3304      	adds	r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d01c      	beq.n	8006684 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3304      	adds	r3, #4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffc3 	bl	80065ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <netif_do_set_ipaddr+0x6a>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	e000      	b.n	8006674 <netif_do_set_ipaddr+0x6c>
 8006672:	2300      	movs	r3, #0
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006678:	2101      	movs	r1, #1
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f8d2 	bl	8006824 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	0800c23c 	.word	0x0800c23c
 8006694:	0800c354 	.word	0x0800c354
 8006698:	0800c28c 	.word	0x0800c28c

0800669c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3308      	adds	r3, #8
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d00a      	beq.n	80066cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <netif_do_set_netmask+0x26>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	e000      	b.n	80066c4 <netif_do_set_netmask+0x28>
 80066c2:	2300      	movs	r3, #0
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	330c      	adds	r3, #12
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d00a      	beq.n	800670a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <netif_do_set_gw+0x26>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	e000      	b.n	8006702 <netif_do_set_gw+0x28>
 8006700:	2300      	movs	r3, #0
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006734:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <netif_set_addr+0x90>)
 8006736:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800673e:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <netif_set_addr+0x90>)
 8006740:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <netif_set_addr+0x90>)
 800674a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <netif_set_addr+0x42>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <netif_set_addr+0x46>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <netif_set_addr+0x48>
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d006      	beq.n	8006776 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006768:	f107 0310 	add.w	r3, r7, #16
 800676c:	461a      	mov	r2, r3
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7ff ff49 	bl	8006608 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff ff8e 	bl	800669c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ffa8 	bl	80066da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006790:	f107 0310 	add.w	r3, r7, #16
 8006794:	461a      	mov	r2, r3
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff ff35 	bl	8006608 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800679e:	bf00      	nop
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	0800d49c 	.word	0x0800d49c

080067ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80067b4:	4a04      	ldr	r2, [pc, #16]	; (80067c8 <netif_set_default+0x1c>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	200085dc 	.word	0x200085dc

080067cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d107      	bne.n	80067ea <netif_set_up+0x1e>
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <netif_set_up+0x4c>)
 80067dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80067e0:	490e      	ldr	r1, [pc, #56]	; (800681c <netif_set_up+0x50>)
 80067e2:	480f      	ldr	r0, [pc, #60]	; (8006820 <netif_set_up+0x54>)
 80067e4:	f004 faf8 	bl	800add8 <iprintf>
 80067e8:	e013      	b.n	8006812 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800680a:	2103      	movs	r1, #3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f809 	bl	8006824 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	0800c23c 	.word	0x0800c23c
 800681c:	0800c3c4 	.word	0x0800c3c4
 8006820:	0800c28c 	.word	0x0800c28c

08006824 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <netif_issue_reports+0x20>
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <netif_issue_reports+0x74>)
 8006838:	f240 326d 	movw	r2, #877	; 0x36d
 800683c:	4917      	ldr	r1, [pc, #92]	; (800689c <netif_issue_reports+0x78>)
 800683e:	4818      	ldr	r0, [pc, #96]	; (80068a0 <netif_issue_reports+0x7c>)
 8006840:	f004 faca 	bl	800add8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01e      	beq.n	8006890 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006858:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800685c:	2b00      	cmp	r3, #0
 800685e:	d017      	beq.n	8006890 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f002 fe27 	bl	80094dc <etharp_request>
 800688e:	e000      	b.n	8006892 <netif_issue_reports+0x6e>
    return;
 8006890:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	0800c23c 	.word	0x0800c23c
 800689c:	0800c3e0 	.word	0x0800c3e0
 80068a0:	0800c28c 	.word	0x0800c28c

080068a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <netif_set_down+0x1e>
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <netif_set_down+0x58>)
 80068b4:	f240 329b 	movw	r2, #923	; 0x39b
 80068b8:	4911      	ldr	r1, [pc, #68]	; (8006900 <netif_set_down+0x5c>)
 80068ba:	4812      	ldr	r0, [pc, #72]	; (8006904 <netif_set_down+0x60>)
 80068bc:	f004 fa8c 	bl	800add8 <iprintf>
 80068c0:	e019      	b.n	80068f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 f9b1 	bl	8008c58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	0800c23c 	.word	0x0800c23c
 8006900:	0800c404 	.word	0x0800c404
 8006904:	0800c28c 	.word	0x0800c28c

08006908 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d107      	bne.n	8006926 <netif_set_link_up+0x1e>
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <netif_set_link_up+0x5c>)
 8006918:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800691c:	4912      	ldr	r1, [pc, #72]	; (8006968 <netif_set_link_up+0x60>)
 800691e:	4813      	ldr	r0, [pc, #76]	; (800696c <netif_set_link_up+0x64>)
 8006920:	f004 fa5a 	bl	800add8 <iprintf>
 8006924:	e01b      	b.n	800695e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d114      	bne.n	800695e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800693a:	f043 0304 	orr.w	r3, r3, #4
 800693e:	b2da      	uxtb	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006946:	2103      	movs	r1, #3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff6b 	bl	8006824 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <netif_set_link_up+0x56>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	0800c23c 	.word	0x0800c23c
 8006968:	0800c424 	.word	0x0800c424
 800696c:	0800c28c 	.word	0x0800c28c

08006970 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <netif_set_link_down+0x1e>
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <netif_set_link_down+0x54>)
 8006980:	f240 4206 	movw	r2, #1030	; 0x406
 8006984:	4910      	ldr	r1, [pc, #64]	; (80069c8 <netif_set_link_down+0x58>)
 8006986:	4811      	ldr	r0, [pc, #68]	; (80069cc <netif_set_link_down+0x5c>)
 8006988:	f004 fa26 	bl	800add8 <iprintf>
 800698c:	e017      	b.n	80069be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069a2:	f023 0304 	bic.w	r3, r3, #4
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <netif_set_link_down+0x4e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0800c23c 	.word	0x0800c23c
 80069c8:	0800c448 	.word	0x0800c448
 80069cc:	0800c28c 	.word	0x0800c28c

080069d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	61da      	str	r2, [r3, #28]
  }
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80069fe:	f06f 030b 	mvn.w	r3, #11
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d013      	beq.n	8006a48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <netif_get_by_index+0x48>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e00c      	b.n	8006a42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a2e:	3301      	adds	r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	79fa      	ldrb	r2, [r7, #7]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d101      	bne.n	8006a3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	e006      	b.n	8006a4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1ef      	bne.n	8006a28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	200085d8 	.word	0x200085d8

08006a5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	80fb      	strh	r3, [r7, #6]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88ba      	ldrh	r2, [r7, #4]
 8006a88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006a8a:	8b3b      	ldrh	r3, [r7, #24]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	7f3a      	ldrb	r2, [r7, #28]
 8006a96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	73da      	strb	r2, [r3, #15]
}
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	; 0x30
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	71fb      	strb	r3, [r7, #7]
 8006aba:	460b      	mov	r3, r1
 8006abc:	80bb      	strh	r3, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006acc:	d07d      	beq.n	8006bca <pbuf_alloc+0x11a>
 8006ace:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006ad2:	f300 80c6 	bgt.w	8006c62 <pbuf_alloc+0x1b2>
 8006ad6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006ada:	d010      	beq.n	8006afe <pbuf_alloc+0x4e>
 8006adc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006ae0:	f300 80bf 	bgt.w	8006c62 <pbuf_alloc+0x1b2>
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d002      	beq.n	8006aee <pbuf_alloc+0x3e>
 8006ae8:	2b41      	cmp	r3, #65	; 0x41
 8006aea:	f040 80ba 	bne.w	8006c62 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	88bb      	ldrh	r3, [r7, #4]
 8006af2:	4619      	mov	r1, r3
 8006af4:	2000      	movs	r0, #0
 8006af6:	f000 f8cf 	bl	8006c98 <pbuf_alloc_reference>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006afc:	e0bb      	b.n	8006c76 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006b06:	88bb      	ldrh	r3, [r7, #4]
 8006b08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006b0a:	2005      	movs	r0, #5
 8006b0c:	f7ff fc22 	bl	8006354 <memp_malloc>
 8006b10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <pbuf_alloc+0x74>
            pbuf_free(p);
 8006b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b20:	f000 faa8 	bl	8007074 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e0a7      	b.n	8006c78 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b2a:	3303      	adds	r3, #3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8b7a      	ldrh	r2, [r7, #26]
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	bf28      	it	cs
 8006b40:	4613      	movcs	r3, r2
 8006b42:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006b44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b46:	3310      	adds	r3, #16
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3303      	adds	r3, #3
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	4618      	mov	r0, r3
 8006b54:	89f9      	ldrh	r1, [r7, #14]
 8006b56:	8b7a      	ldrh	r2, [r7, #26]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	460b      	mov	r3, r1
 8006b62:	4601      	mov	r1, r0
 8006b64:	6938      	ldr	r0, [r7, #16]
 8006b66:	f7ff ff79 	bl	8006a5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d006      	beq.n	8006b84 <pbuf_alloc+0xd4>
 8006b76:	4b42      	ldr	r3, [pc, #264]	; (8006c80 <pbuf_alloc+0x1d0>)
 8006b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b7c:	4941      	ldr	r1, [pc, #260]	; (8006c84 <pbuf_alloc+0x1d4>)
 8006b7e:	4842      	ldr	r0, [pc, #264]	; (8006c88 <pbuf_alloc+0x1d8>)
 8006b80:	f004 f92a 	bl	800add8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b86:	3303      	adds	r3, #3
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006b90:	d106      	bne.n	8006ba0 <pbuf_alloc+0xf0>
 8006b92:	4b3b      	ldr	r3, [pc, #236]	; (8006c80 <pbuf_alloc+0x1d0>)
 8006b94:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006b98:	493c      	ldr	r1, [pc, #240]	; (8006c8c <pbuf_alloc+0x1dc>)
 8006b9a:	483b      	ldr	r0, [pc, #236]	; (8006c88 <pbuf_alloc+0x1d8>)
 8006b9c:	f004 f91c 	bl	800add8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	e002      	b.n	8006bb2 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006bb6:	8b7a      	ldrh	r2, [r7, #26]
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006bc2:	8b7b      	ldrh	r3, [r7, #26]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1a0      	bne.n	8006b0a <pbuf_alloc+0x5a>
      break;
 8006bc8:	e055      	b.n	8006c76 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bcc:	3303      	adds	r3, #3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f023 0303 	bic.w	r3, r3, #3
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	88bb      	ldrh	r3, [r7, #4]
 8006bd8:	3303      	adds	r3, #3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006be6:	8b3b      	ldrh	r3, [r7, #24]
 8006be8:	3310      	adds	r3, #16
 8006bea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006bec:	8b3a      	ldrh	r2, [r7, #24]
 8006bee:	88bb      	ldrh	r3, [r7, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d306      	bcc.n	8006c08 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006bfa:	8afa      	ldrh	r2, [r7, #22]
 8006bfc:	88bb      	ldrh	r3, [r7, #4]
 8006bfe:	3303      	adds	r3, #3
 8006c00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d201      	bcs.n	8006c0c <pbuf_alloc+0x15c>
        return NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e035      	b.n	8006c78 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006c0c:	8afb      	ldrh	r3, [r7, #22]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fa32 	bl	8006078 <mem_malloc>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <pbuf_alloc+0x170>
        return NULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e02b      	b.n	8006c78 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c22:	3310      	adds	r3, #16
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	4413      	add	r3, r2
 8006c28:	3303      	adds	r3, #3
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	4618      	mov	r0, r3
 8006c30:	88b9      	ldrh	r1, [r7, #4]
 8006c32:	88ba      	ldrh	r2, [r7, #4]
 8006c34:	2300      	movs	r3, #0
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	887b      	ldrh	r3, [r7, #2]
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4601      	mov	r1, r0
 8006c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c42:	f7ff ff0b 	bl	8006a5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <pbuf_alloc+0x1c4>
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <pbuf_alloc+0x1d0>)
 8006c54:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006c58:	490d      	ldr	r1, [pc, #52]	; (8006c90 <pbuf_alloc+0x1e0>)
 8006c5a:	480b      	ldr	r0, [pc, #44]	; (8006c88 <pbuf_alloc+0x1d8>)
 8006c5c:	f004 f8bc 	bl	800add8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006c60:	e008      	b.n	8006c74 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <pbuf_alloc+0x1d0>)
 8006c64:	f240 1227 	movw	r2, #295	; 0x127
 8006c68:	490a      	ldr	r1, [pc, #40]	; (8006c94 <pbuf_alloc+0x1e4>)
 8006c6a:	4807      	ldr	r0, [pc, #28]	; (8006c88 <pbuf_alloc+0x1d8>)
 8006c6c:	f004 f8b4 	bl	800add8 <iprintf>
      return NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e001      	b.n	8006c78 <pbuf_alloc+0x1c8>
      break;
 8006c74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3728      	adds	r7, #40	; 0x28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	0800c46c 	.word	0x0800c46c
 8006c84:	0800c49c 	.word	0x0800c49c
 8006c88:	0800c4cc 	.word	0x0800c4cc
 8006c8c:	0800c4f4 	.word	0x0800c4f4
 8006c90:	0800c528 	.word	0x0800c528
 8006c94:	0800c554 	.word	0x0800c554

08006c98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006ca8:	883b      	ldrh	r3, [r7, #0]
 8006caa:	2b41      	cmp	r3, #65	; 0x41
 8006cac:	d009      	beq.n	8006cc2 <pbuf_alloc_reference+0x2a>
 8006cae:	883b      	ldrh	r3, [r7, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d006      	beq.n	8006cc2 <pbuf_alloc_reference+0x2a>
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <pbuf_alloc_reference+0x5c>)
 8006cb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006cba:	490f      	ldr	r1, [pc, #60]	; (8006cf8 <pbuf_alloc_reference+0x60>)
 8006cbc:	480f      	ldr	r0, [pc, #60]	; (8006cfc <pbuf_alloc_reference+0x64>)
 8006cbe:	f004 f88b 	bl	800add8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006cc2:	2004      	movs	r0, #4
 8006cc4:	f7ff fb46 	bl	8006354 <memp_malloc>
 8006cc8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e00b      	b.n	8006cec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006cd4:	8879      	ldrh	r1, [r7, #2]
 8006cd6:	887a      	ldrh	r2, [r7, #2]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	883b      	ldrh	r3, [r7, #0]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff feb9 	bl	8006a5c <pbuf_init_alloced_pbuf>
  return p;
 8006cea:	68fb      	ldr	r3, [r7, #12]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	0800c46c 	.word	0x0800c46c
 8006cf8:	0800c570 	.word	0x0800c570
 8006cfc:	0800c4cc 	.word	0x0800c4cc

08006d00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	607b      	str	r3, [r7, #4]
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	81bb      	strh	r3, [r7, #12]
 8006d10:	4613      	mov	r3, r2
 8006d12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d18:	8a7b      	ldrh	r3, [r7, #18]
 8006d1a:	3303      	adds	r3, #3
 8006d1c:	f023 0203 	bic.w	r2, r3, #3
 8006d20:	89bb      	ldrh	r3, [r7, #12]
 8006d22:	441a      	add	r2, r3
 8006d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d901      	bls.n	8006d2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e018      	b.n	8006d60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d34:	8a7b      	ldrh	r3, [r7, #18]
 8006d36:	3303      	adds	r3, #3
 8006d38:	f023 0303 	bic.w	r3, r3, #3
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	4413      	add	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e001      	b.n	8006d48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	89b9      	ldrh	r1, [r7, #12]
 8006d4c:	89ba      	ldrh	r2, [r7, #12]
 8006d4e:	2302      	movs	r3, #2
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	897b      	ldrh	r3, [r7, #10]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	460b      	mov	r3, r1
 8006d58:	6979      	ldr	r1, [r7, #20]
 8006d5a:	f7ff fe7f 	bl	8006a5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006d5e:	687b      	ldr	r3, [r7, #4]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <pbuf_realloc+0x20>
 8006d7a:	4b3a      	ldr	r3, [pc, #232]	; (8006e64 <pbuf_realloc+0xfc>)
 8006d7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006d80:	4939      	ldr	r1, [pc, #228]	; (8006e68 <pbuf_realloc+0x100>)
 8006d82:	483a      	ldr	r0, [pc, #232]	; (8006e6c <pbuf_realloc+0x104>)
 8006d84:	f004 f828 	bl	800add8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	891b      	ldrh	r3, [r3, #8]
 8006d8c:	887a      	ldrh	r2, [r7, #2]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d263      	bcs.n	8006e5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	891a      	ldrh	r2, [r3, #8]
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006da4:	e018      	b.n	8006dd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	895b      	ldrh	r3, [r3, #10]
 8006daa:	897a      	ldrh	r2, [r7, #10]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	891a      	ldrh	r2, [r3, #8]
 8006db4:	893b      	ldrh	r3, [r7, #8]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <pbuf_realloc+0x70>
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <pbuf_realloc+0xfc>)
 8006dcc:	f240 12af 	movw	r2, #431	; 0x1af
 8006dd0:	4927      	ldr	r1, [pc, #156]	; (8006e70 <pbuf_realloc+0x108>)
 8006dd2:	4826      	ldr	r0, [pc, #152]	; (8006e6c <pbuf_realloc+0x104>)
 8006dd4:	f004 f800 	bl	800add8 <iprintf>
  while (rem_len > q->len) {
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	895b      	ldrh	r3, [r3, #10]
 8006ddc:	897a      	ldrh	r2, [r7, #10]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d8e1      	bhi.n	8006da6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7b1b      	ldrb	r3, [r3, #12]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d121      	bne.n	8006e32 <pbuf_realloc+0xca>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	895b      	ldrh	r3, [r3, #10]
 8006df2:	897a      	ldrh	r2, [r7, #10]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d01c      	beq.n	8006e32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	7b5b      	ldrb	r3, [r3, #13]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d116      	bne.n	8006e32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	897b      	ldrh	r3, [r7, #10]
 8006e10:	4413      	add	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4619      	mov	r1, r3
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff f832 	bl	8005e80 <mem_trim>
 8006e1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <pbuf_realloc+0xca>
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <pbuf_realloc+0xfc>)
 8006e26:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006e2a:	4912      	ldr	r1, [pc, #72]	; (8006e74 <pbuf_realloc+0x10c>)
 8006e2c:	480f      	ldr	r0, [pc, #60]	; (8006e6c <pbuf_realloc+0x104>)
 8006e2e:	f003 ffd3 	bl	800add8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	897a      	ldrh	r2, [r7, #10]
 8006e36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	895a      	ldrh	r2, [r3, #10]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 f911 	bl	8007074 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	e000      	b.n	8006e5c <pbuf_realloc+0xf4>
    return;
 8006e5a:	bf00      	nop

}
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	0800c46c 	.word	0x0800c46c
 8006e68:	0800c584 	.word	0x0800c584
 8006e6c:	0800c4cc 	.word	0x0800c4cc
 8006e70:	0800c59c 	.word	0x0800c59c
 8006e74:	0800c5b4 	.word	0x0800c5b4

08006e78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <pbuf_add_header_impl+0x22>
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <pbuf_add_header_impl+0xc4>)
 8006e8e:	f240 12df 	movw	r2, #479	; 0x1df
 8006e92:	492b      	ldr	r1, [pc, #172]	; (8006f40 <pbuf_add_header_impl+0xc8>)
 8006e94:	482b      	ldr	r0, [pc, #172]	; (8006f44 <pbuf_add_header_impl+0xcc>)
 8006e96:	f003 ff9f 	bl	800add8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <pbuf_add_header_impl+0x30>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d301      	bcc.n	8006eac <pbuf_add_header_impl+0x34>
    return 1;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e043      	b.n	8006f34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <pbuf_add_header_impl+0x3e>
    return 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e03e      	b.n	8006f34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	891a      	ldrh	r2, [r3, #8]
 8006ebe:	8a7b      	ldrh	r3, [r7, #18]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	8a7a      	ldrh	r2, [r7, #18]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d901      	bls.n	8006ece <pbuf_add_header_impl+0x56>
    return 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e032      	b.n	8006f34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006ed4:	8a3b      	ldrh	r3, [r7, #16]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	425b      	negs	r3, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3310      	adds	r3, #16
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d20d      	bcs.n	8006f10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e01d      	b.n	8006f34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	425b      	negs	r3, r3
 8006f06:	4413      	add	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e001      	b.n	8006f10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e011      	b.n	8006f34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	895a      	ldrh	r2, [r3, #10]
 8006f1a:	8a7b      	ldrh	r3, [r7, #18]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	891a      	ldrh	r2, [r3, #8]
 8006f28:	8a7b      	ldrh	r3, [r7, #18]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	811a      	strh	r2, [r3, #8]


  return 0;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	0800c46c 	.word	0x0800c46c
 8006f40:	0800c5d0 	.word	0x0800c5d0
 8006f44:	0800c4cc 	.word	0x0800c4cc

08006f48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006f52:	2200      	movs	r2, #0
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff ff8e 	bl	8006e78 <pbuf_add_header_impl>
 8006f5c:	4603      	mov	r3, r0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <pbuf_remove_header+0x1e>
 8006f78:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <pbuf_remove_header+0x94>)
 8006f7a:	f240 224b 	movw	r2, #587	; 0x24b
 8006f7e:	4920      	ldr	r1, [pc, #128]	; (8007000 <pbuf_remove_header+0x98>)
 8006f80:	4820      	ldr	r0, [pc, #128]	; (8007004 <pbuf_remove_header+0x9c>)
 8006f82:	f003 ff29 	bl	800add8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <pbuf_remove_header+0x2c>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f92:	d301      	bcc.n	8006f98 <pbuf_remove_header+0x30>
    return 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e02c      	b.n	8006ff2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <pbuf_remove_header+0x3a>
    return 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e027      	b.n	8006ff2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	895b      	ldrh	r3, [r3, #10]
 8006faa:	89fa      	ldrh	r2, [r7, #14]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d908      	bls.n	8006fc2 <pbuf_remove_header+0x5a>
 8006fb0:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <pbuf_remove_header+0x94>)
 8006fb2:	f240 2255 	movw	r2, #597	; 0x255
 8006fb6:	4914      	ldr	r1, [pc, #80]	; (8007008 <pbuf_remove_header+0xa0>)
 8006fb8:	4812      	ldr	r0, [pc, #72]	; (8007004 <pbuf_remove_header+0x9c>)
 8006fba:	f003 ff0d 	bl	800add8 <iprintf>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e017      	b.n	8006ff2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	895a      	ldrh	r2, [r3, #10]
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	891a      	ldrh	r2, [r3, #8]
 8006fe6:	89fb      	ldrh	r3, [r7, #14]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0800c46c 	.word	0x0800c46c
 8007000:	0800c5d0 	.word	0x0800c5d0
 8007004:	0800c4cc 	.word	0x0800c4cc
 8007008:	0800c5dc 	.word	0x0800c5dc

0800700c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]
 8007018:	4613      	mov	r3, r2
 800701a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800701c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	da08      	bge.n	8007036 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007028:	425b      	negs	r3, r3
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff ff9b 	bl	8006f68 <pbuf_remove_header>
 8007032:	4603      	mov	r3, r0
 8007034:	e007      	b.n	8007046 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800703a:	787a      	ldrb	r2, [r7, #1]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff1a 	bl	8006e78 <pbuf_add_header_impl>
 8007044:	4603      	mov	r3, r0
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800705a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800705e:	2201      	movs	r2, #1
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff ffd2 	bl	800700c <pbuf_header_impl>
 8007068:	4603      	mov	r3, r0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10b      	bne.n	800709a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <pbuf_free+0x22>
 8007088:	4b38      	ldr	r3, [pc, #224]	; (800716c <pbuf_free+0xf8>)
 800708a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800708e:	4938      	ldr	r1, [pc, #224]	; (8007170 <pbuf_free+0xfc>)
 8007090:	4838      	ldr	r0, [pc, #224]	; (8007174 <pbuf_free+0x100>)
 8007092:	f003 fea1 	bl	800add8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007096:	2300      	movs	r3, #0
 8007098:	e063      	b.n	8007162 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800709e:	e05c      	b.n	800715a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7b9b      	ldrb	r3, [r3, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <pbuf_free+0x42>
 80070a8:	4b30      	ldr	r3, [pc, #192]	; (800716c <pbuf_free+0xf8>)
 80070aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80070ae:	4932      	ldr	r1, [pc, #200]	; (8007178 <pbuf_free+0x104>)
 80070b0:	4830      	ldr	r0, [pc, #192]	; (8007174 <pbuf_free+0x100>)
 80070b2:	f003 fe91 	bl	800add8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7b9b      	ldrb	r3, [r3, #14]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	739a      	strb	r2, [r3, #14]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7b9b      	ldrb	r3, [r3, #14]
 80070c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d143      	bne.n	8007156 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	7b1b      	ldrb	r3, [r3, #12]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7b5b      	ldrb	r3, [r3, #13]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d011      	beq.n	800710e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <pbuf_free+0x90>
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <pbuf_free+0xf8>)
 80070f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80070fc:	491f      	ldr	r1, [pc, #124]	; (800717c <pbuf_free+0x108>)
 80070fe:	481d      	ldr	r0, [pc, #116]	; (8007174 <pbuf_free+0x100>)
 8007100:	f003 fe6a 	bl	800add8 <iprintf>
        pc->custom_free_function(p);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
 800710c:	e01d      	b.n	800714a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d104      	bne.n	800711e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	2005      	movs	r0, #5
 8007118:	f7ff f968 	bl	80063ec <memp_free>
 800711c:	e015      	b.n	800714a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d104      	bne.n	800712e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	2004      	movs	r0, #4
 8007128:	f7ff f960 	bl	80063ec <memp_free>
 800712c:	e00d      	b.n	800714a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <pbuf_free+0xc8>
          mem_free(p);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe fe39 	bl	8005dac <mem_free>
 800713a:	e006      	b.n	800714a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <pbuf_free+0xf8>)
 800713e:	f240 320f 	movw	r2, #783	; 0x30f
 8007142:	490f      	ldr	r1, [pc, #60]	; (8007180 <pbuf_free+0x10c>)
 8007144:	480b      	ldr	r0, [pc, #44]	; (8007174 <pbuf_free+0x100>)
 8007146:	f003 fe47 	bl	800add8 <iprintf>
        }
      }
      count++;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	3301      	adds	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	e001      	b.n	800715a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d19f      	bne.n	80070a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	0800c46c 	.word	0x0800c46c
 8007170:	0800c5d0 	.word	0x0800c5d0
 8007174:	0800c4cc 	.word	0x0800c4cc
 8007178:	0800c5fc 	.word	0x0800c5fc
 800717c:	0800c614 	.word	0x0800c614
 8007180:	0800c638 	.word	0x0800c638

08007184 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007190:	e005      	b.n	800719e <pbuf_clen+0x1a>
    ++len;
 8007192:	89fb      	ldrh	r3, [r7, #14]
 8007194:	3301      	adds	r3, #1
 8007196:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f6      	bne.n	8007192 <pbuf_clen+0xe>
  }
  return len;
 80071a4:	89fb      	ldrh	r3, [r7, #14]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d010      	beq.n	80071e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7b9b      	ldrb	r3, [r3, #14]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7b9b      	ldrb	r3, [r3, #14]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <pbuf_ref+0x30>
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <pbuf_ref+0x38>)
 80071d8:	f240 3242 	movw	r2, #834	; 0x342
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <pbuf_ref+0x3c>)
 80071de:	4805      	ldr	r0, [pc, #20]	; (80071f4 <pbuf_ref+0x40>)
 80071e0:	f003 fdfa 	bl	800add8 <iprintf>
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	0800c46c 	.word	0x0800c46c
 80071f0:	0800c64c 	.word	0x0800c64c
 80071f4:	0800c4cc 	.word	0x0800c4cc

080071f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <pbuf_cat+0x16>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <pbuf_cat+0x26>
 800720e:	4b20      	ldr	r3, [pc, #128]	; (8007290 <pbuf_cat+0x98>)
 8007210:	f240 3259 	movw	r2, #857	; 0x359
 8007214:	491f      	ldr	r1, [pc, #124]	; (8007294 <pbuf_cat+0x9c>)
 8007216:	4820      	ldr	r0, [pc, #128]	; (8007298 <pbuf_cat+0xa0>)
 8007218:	f003 fdde 	bl	800add8 <iprintf>
 800721c:	e034      	b.n	8007288 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	e00a      	b.n	800723a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	891a      	ldrh	r2, [r3, #8]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	891b      	ldrh	r3, [r3, #8]
 800722c:	4413      	add	r3, r2
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	891a      	ldrh	r2, [r3, #8]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	895b      	ldrh	r3, [r3, #10]
 800724a:	429a      	cmp	r2, r3
 800724c:	d006      	beq.n	800725c <pbuf_cat+0x64>
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <pbuf_cat+0x98>)
 8007250:	f240 3262 	movw	r2, #866	; 0x362
 8007254:	4911      	ldr	r1, [pc, #68]	; (800729c <pbuf_cat+0xa4>)
 8007256:	4810      	ldr	r0, [pc, #64]	; (8007298 <pbuf_cat+0xa0>)
 8007258:	f003 fdbe 	bl	800add8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d006      	beq.n	8007272 <pbuf_cat+0x7a>
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <pbuf_cat+0x98>)
 8007266:	f240 3263 	movw	r2, #867	; 0x363
 800726a:	490d      	ldr	r1, [pc, #52]	; (80072a0 <pbuf_cat+0xa8>)
 800726c:	480a      	ldr	r0, [pc, #40]	; (8007298 <pbuf_cat+0xa0>)
 800726e:	f003 fdb3 	bl	800add8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	891a      	ldrh	r2, [r3, #8]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	891b      	ldrh	r3, [r3, #8]
 800727a:	4413      	add	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	0800c46c 	.word	0x0800c46c
 8007294:	0800c660 	.word	0x0800c660
 8007298:	0800c4cc 	.word	0x0800c4cc
 800729c:	0800c698 	.word	0x0800c698
 80072a0:	0800c6c8 	.word	0x0800c6c8

080072a4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff ffa1 	bl	80071f8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f7ff ff7c 	bl	80071b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	2300      	movs	r3, #0
 80072d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <pbuf_copy+0x2a>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <pbuf_copy+0x2a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	891a      	ldrh	r2, [r3, #8]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d209      	bcs.n	8007302 <pbuf_copy+0x3e>
 80072ee:	4b57      	ldr	r3, [pc, #348]	; (800744c <pbuf_copy+0x188>)
 80072f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80072f4:	4956      	ldr	r1, [pc, #344]	; (8007450 <pbuf_copy+0x18c>)
 80072f6:	4857      	ldr	r0, [pc, #348]	; (8007454 <pbuf_copy+0x190>)
 80072f8:	f003 fd6e 	bl	800add8 <iprintf>
 80072fc:	f06f 030f 	mvn.w	r3, #15
 8007300:	e09f      	b.n	8007442 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	895b      	ldrh	r3, [r3, #10]
 8007306:	461a      	mov	r2, r3
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	895b      	ldrh	r3, [r3, #10]
 8007310:	4619      	mov	r1, r3
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1acb      	subs	r3, r1, r3
 8007316:	429a      	cmp	r2, r3
 8007318:	d306      	bcc.n	8007328 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	895b      	ldrh	r3, [r3, #10]
 800731e:	461a      	mov	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	e005      	b.n	8007334 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	895b      	ldrh	r3, [r3, #10]
 800732c:	461a      	mov	r2, r3
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	18d0      	adds	r0, r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4619      	mov	r1, r3
 8007348:	f003 fc86 	bl	800ac58 <memcpy>
    offset_to += len;
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	895b      	ldrh	r3, [r3, #10]
 8007360:	461a      	mov	r2, r3
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	4293      	cmp	r3, r2
 8007366:	d906      	bls.n	8007376 <pbuf_copy+0xb2>
 8007368:	4b38      	ldr	r3, [pc, #224]	; (800744c <pbuf_copy+0x188>)
 800736a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800736e:	493a      	ldr	r1, [pc, #232]	; (8007458 <pbuf_copy+0x194>)
 8007370:	4838      	ldr	r0, [pc, #224]	; (8007454 <pbuf_copy+0x190>)
 8007372:	f003 fd31 	bl	800add8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	895b      	ldrh	r3, [r3, #10]
 800737a:	461a      	mov	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	4293      	cmp	r3, r2
 8007380:	d906      	bls.n	8007390 <pbuf_copy+0xcc>
 8007382:	4b32      	ldr	r3, [pc, #200]	; (800744c <pbuf_copy+0x188>)
 8007384:	f240 32da 	movw	r2, #986	; 0x3da
 8007388:	4934      	ldr	r1, [pc, #208]	; (800745c <pbuf_copy+0x198>)
 800738a:	4832      	ldr	r0, [pc, #200]	; (8007454 <pbuf_copy+0x190>)
 800738c:	f003 fd24 	bl	800add8 <iprintf>
    if (offset_from >= p_from->len) {
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	895b      	ldrh	r3, [r3, #10]
 8007394:	461a      	mov	r2, r3
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4293      	cmp	r3, r2
 800739a:	d304      	bcc.n	80073a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	895b      	ldrh	r3, [r3, #10]
 80073aa:	461a      	mov	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d114      	bne.n	80073dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10c      	bne.n	80073dc <pbuf_copy+0x118>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <pbuf_copy+0x118>
 80073c8:	4b20      	ldr	r3, [pc, #128]	; (800744c <pbuf_copy+0x188>)
 80073ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80073ce:	4924      	ldr	r1, [pc, #144]	; (8007460 <pbuf_copy+0x19c>)
 80073d0:	4820      	ldr	r0, [pc, #128]	; (8007454 <pbuf_copy+0x190>)
 80073d2:	f003 fd01 	bl	800add8 <iprintf>
 80073d6:	f06f 030f 	mvn.w	r3, #15
 80073da:	e032      	b.n	8007442 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d013      	beq.n	800740a <pbuf_copy+0x146>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	895a      	ldrh	r2, [r3, #10]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	891b      	ldrh	r3, [r3, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d10d      	bne.n	800740a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <pbuf_copy+0x146>
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <pbuf_copy+0x188>)
 80073f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80073fc:	4919      	ldr	r1, [pc, #100]	; (8007464 <pbuf_copy+0x1a0>)
 80073fe:	4815      	ldr	r0, [pc, #84]	; (8007454 <pbuf_copy+0x190>)
 8007400:	f003 fcea 	bl	800add8 <iprintf>
 8007404:	f06f 0305 	mvn.w	r3, #5
 8007408:	e01b      	b.n	8007442 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d013      	beq.n	8007438 <pbuf_copy+0x174>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	895a      	ldrh	r2, [r3, #10]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	891b      	ldrh	r3, [r3, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	d10d      	bne.n	8007438 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d009      	beq.n	8007438 <pbuf_copy+0x174>
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <pbuf_copy+0x188>)
 8007426:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800742a:	490e      	ldr	r1, [pc, #56]	; (8007464 <pbuf_copy+0x1a0>)
 800742c:	4809      	ldr	r0, [pc, #36]	; (8007454 <pbuf_copy+0x190>)
 800742e:	f003 fcd3 	bl	800add8 <iprintf>
 8007432:	f06f 0305 	mvn.w	r3, #5
 8007436:	e004      	b.n	8007442 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f47f af61 	bne.w	8007302 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	0800c46c 	.word	0x0800c46c
 8007450:	0800c714 	.word	0x0800c714
 8007454:	0800c4cc 	.word	0x0800c4cc
 8007458:	0800c744 	.word	0x0800c744
 800745c:	0800c75c 	.word	0x0800c75c
 8007460:	0800c778 	.word	0x0800c778
 8007464:	0800c788 	.word	0x0800c788

08007468 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	460b      	mov	r3, r1
 8007478:	80fb      	strh	r3, [r7, #6]
 800747a:	4613      	mov	r3, r2
 800747c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d108      	bne.n	800749e <pbuf_copy_partial+0x36>
 800748c:	4b2b      	ldr	r3, [pc, #172]	; (800753c <pbuf_copy_partial+0xd4>)
 800748e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007492:	492b      	ldr	r1, [pc, #172]	; (8007540 <pbuf_copy_partial+0xd8>)
 8007494:	482b      	ldr	r0, [pc, #172]	; (8007544 <pbuf_copy_partial+0xdc>)
 8007496:	f003 fc9f 	bl	800add8 <iprintf>
 800749a:	2300      	movs	r3, #0
 800749c:	e04a      	b.n	8007534 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d108      	bne.n	80074b6 <pbuf_copy_partial+0x4e>
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <pbuf_copy_partial+0xd4>)
 80074a6:	f240 420b 	movw	r2, #1035	; 0x40b
 80074aa:	4927      	ldr	r1, [pc, #156]	; (8007548 <pbuf_copy_partial+0xe0>)
 80074ac:	4825      	ldr	r0, [pc, #148]	; (8007544 <pbuf_copy_partial+0xdc>)
 80074ae:	f003 fc93 	bl	800add8 <iprintf>
 80074b2:	2300      	movs	r3, #0
 80074b4:	e03e      	b.n	8007534 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	e034      	b.n	8007526 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80074bc:	88bb      	ldrh	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <pbuf_copy_partial+0x70>
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	895b      	ldrh	r3, [r3, #10]
 80074c6:	88ba      	ldrh	r2, [r7, #4]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d305      	bcc.n	80074d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	895b      	ldrh	r3, [r3, #10]
 80074d0:	88ba      	ldrh	r2, [r7, #4]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	80bb      	strh	r3, [r7, #4]
 80074d6:	e023      	b.n	8007520 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	895a      	ldrh	r2, [r3, #10]
 80074dc:	88bb      	ldrh	r3, [r7, #4]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80074e2:	8b3a      	ldrh	r2, [r7, #24]
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d901      	bls.n	80074ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80074ee:	8b7b      	ldrh	r3, [r7, #26]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	18d0      	adds	r0, r2, r3
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	88bb      	ldrh	r3, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	8b3a      	ldrh	r2, [r7, #24]
 80074fe:	4619      	mov	r1, r3
 8007500:	f003 fbaa 	bl	800ac58 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007504:	8afa      	ldrh	r2, [r7, #22]
 8007506:	8b3b      	ldrh	r3, [r7, #24]
 8007508:	4413      	add	r3, r2
 800750a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800750c:	8b7a      	ldrh	r2, [r7, #26]
 800750e:	8b3b      	ldrh	r3, [r7, #24]
 8007510:	4413      	add	r3, r2
 8007512:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	8b3b      	ldrh	r3, [r7, #24]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <pbuf_copy_partial+0xca>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1c4      	bne.n	80074bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007532:	8afb      	ldrh	r3, [r7, #22]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3720      	adds	r7, #32
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	0800c46c 	.word	0x0800c46c
 8007540:	0800c7b4 	.word	0x0800c7b4
 8007544:	0800c4cc 	.word	0x0800c4cc
 8007548:	0800c7d4 	.word	0x0800c7d4

0800754c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800755a:	897b      	ldrh	r3, [r7, #10]
 800755c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007562:	e007      	b.n	8007574 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	895b      	ldrh	r3, [r3, #10]
 8007568:	8afa      	ldrh	r2, [r7, #22]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <pbuf_skip_const+0x38>
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	895b      	ldrh	r3, [r3, #10]
 800757e:	8afa      	ldrh	r2, [r7, #22]
 8007580:	429a      	cmp	r2, r3
 8007582:	d2ef      	bcs.n	8007564 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8afa      	ldrh	r2, [r7, #22]
 800758e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8007590:	693b      	ldr	r3, [r7, #16]
}
 8007592:	4618      	mov	r0, r3
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
	...

080075a0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <pbuf_take+0x30>
 80075bc:	4b3a      	ldr	r3, [pc, #232]	; (80076a8 <pbuf_take+0x108>)
 80075be:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80075c2:	493a      	ldr	r1, [pc, #232]	; (80076ac <pbuf_take+0x10c>)
 80075c4:	483a      	ldr	r0, [pc, #232]	; (80076b0 <pbuf_take+0x110>)
 80075c6:	f003 fc07 	bl	800add8 <iprintf>
 80075ca:	f06f 030f 	mvn.w	r3, #15
 80075ce:	e067      	b.n	80076a0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <pbuf_take+0x4a>
 80075d6:	4b34      	ldr	r3, [pc, #208]	; (80076a8 <pbuf_take+0x108>)
 80075d8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80075dc:	4935      	ldr	r1, [pc, #212]	; (80076b4 <pbuf_take+0x114>)
 80075de:	4834      	ldr	r0, [pc, #208]	; (80076b0 <pbuf_take+0x110>)
 80075e0:	f003 fbfa 	bl	800add8 <iprintf>
 80075e4:	f06f 030f 	mvn.w	r3, #15
 80075e8:	e05a      	b.n	80076a0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	891b      	ldrh	r3, [r3, #8]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d909      	bls.n	8007608 <pbuf_take+0x68>
 80075f4:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <pbuf_take+0x108>)
 80075f6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80075fa:	492f      	ldr	r1, [pc, #188]	; (80076b8 <pbuf_take+0x118>)
 80075fc:	482c      	ldr	r0, [pc, #176]	; (80076b0 <pbuf_take+0x110>)
 80075fe:	f003 fbeb 	bl	800add8 <iprintf>
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	e04b      	b.n	80076a0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <pbuf_take+0x7e>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <pbuf_take+0x7e>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	891b      	ldrh	r3, [r3, #8]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	429a      	cmp	r2, r3
 800761c:	d902      	bls.n	8007624 <pbuf_take+0x84>
    return ERR_ARG;
 800761e:	f06f 030f 	mvn.w	r3, #15
 8007622:	e03d      	b.n	80076a0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e028      	b.n	800767c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <pbuf_take+0x9e>
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <pbuf_take+0x108>)
 8007632:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007636:	4921      	ldr	r1, [pc, #132]	; (80076bc <pbuf_take+0x11c>)
 8007638:	481d      	ldr	r0, [pc, #116]	; (80076b0 <pbuf_take+0x110>)
 800763a:	f003 fbcd 	bl	800add8 <iprintf>
    buf_copy_len = total_copy_len;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	895b      	ldrh	r3, [r3, #10]
 8007646:	461a      	mov	r2, r3
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	4293      	cmp	r3, r2
 800764c:	d902      	bls.n	8007654 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	895b      	ldrh	r3, [r3, #10]
 8007652:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	6858      	ldr	r0, [r3, #4]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4619      	mov	r1, r3
 8007662:	f003 faf9 	bl	800ac58 <memcpy>
    total_copy_len -= buf_copy_len;
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	4413      	add	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1d3      	bne.n	800762a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d103      	bne.n	8007690 <pbuf_take+0xf0>
 8007688:	88fb      	ldrh	r3, [r7, #6]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d006      	beq.n	800769e <pbuf_take+0xfe>
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <pbuf_take+0x108>)
 8007692:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8007696:	490a      	ldr	r1, [pc, #40]	; (80076c0 <pbuf_take+0x120>)
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <pbuf_take+0x110>)
 800769a:	f003 fb9d 	bl	800add8 <iprintf>
  return ERR_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3720      	adds	r7, #32
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	0800c46c 	.word	0x0800c46c
 80076ac:	0800c844 	.word	0x0800c844
 80076b0:	0800c4cc 	.word	0x0800c4cc
 80076b4:	0800c85c 	.word	0x0800c85c
 80076b8:	0800c878 	.word	0x0800c878
 80076bc:	0800c898 	.word	0x0800c898
 80076c0:	0800c8b0 	.word	0x0800c8b0

080076c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	603a      	str	r2, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
 80076d0:	460b      	mov	r3, r1
 80076d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	8919      	ldrh	r1, [r3, #8]
 80076d8:	88ba      	ldrh	r2, [r7, #4]
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7ff f9e7 	bl	8006ab0 <pbuf_alloc>
 80076e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <pbuf_clone+0x2a>
    return NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e011      	b.n	8007712 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff fde7 	bl	80072c4 <pbuf_copy>
 80076f6:	4603      	mov	r3, r0
 80076f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80076fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <pbuf_clone+0x4c>
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <pbuf_clone+0x58>)
 8007704:	f240 5224 	movw	r2, #1316	; 0x524
 8007708:	4905      	ldr	r1, [pc, #20]	; (8007720 <pbuf_clone+0x5c>)
 800770a:	4806      	ldr	r0, [pc, #24]	; (8007724 <pbuf_clone+0x60>)
 800770c:	f003 fb64 	bl	800add8 <iprintf>
  return q;
 8007710:	68fb      	ldr	r3, [r7, #12]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	0800c46c 	.word	0x0800c46c
 8007720:	0800c8e0 	.word	0x0800c8e0
 8007724:	0800c4cc 	.word	0x0800c4cc

08007728 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007734:	887b      	ldrh	r3, [r7, #2]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f80c 	bl	8007756 <pbuf_try_get_at>
 800773e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	db02      	blt.n	800774c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	e000      	b.n	800774e <pbuf_get_at+0x26>
  }
  return 0;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	460b      	mov	r3, r1
 8007760:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007762:	f107 020a 	add.w	r2, r7, #10
 8007766:	887b      	ldrh	r3, [r7, #2]
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff feee 	bl	800754c <pbuf_skip_const>
 8007770:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <pbuf_try_get_at+0x38>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	895a      	ldrh	r2, [r3, #10]
 800777c:	897b      	ldrh	r3, [r7, #10]
 800777e:	429a      	cmp	r2, r3
 8007780:	d905      	bls.n	800778e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	897a      	ldrh	r2, [r7, #10]
 8007788:	4413      	add	r3, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	e001      	b.n	8007792 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800778e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	461a      	mov	r2, r3
 80077a6:	460b      	mov	r3, r1
 80077a8:	817b      	strh	r3, [r7, #10]
 80077aa:	4613      	mov	r3, r2
 80077ac:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80077ae:	897b      	ldrh	r3, [r7, #10]
 80077b0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	891b      	ldrh	r3, [r3, #8]
 80077ba:	4619      	mov	r1, r3
 80077bc:	897a      	ldrh	r2, [r7, #10]
 80077be:	893b      	ldrh	r3, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	4299      	cmp	r1, r3
 80077c4:	da0a      	bge.n	80077dc <pbuf_memcmp+0x42>
    return 0xffff;
 80077c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077ca:	e037      	b.n	800783c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	895b      	ldrh	r3, [r3, #10]
 80077d0:	8bfa      	ldrh	r2, [r7, #30]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d004      	beq.n	80077ec <pbuf_memcmp+0x52>
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	895b      	ldrh	r3, [r3, #10]
 80077e6:	8bfa      	ldrh	r2, [r7, #30]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d2ef      	bcs.n	80077cc <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 80077ec:	2300      	movs	r3, #0
 80077ee:	82fb      	strh	r3, [r7, #22]
 80077f0:	e01f      	b.n	8007832 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 80077f2:	8bfa      	ldrh	r2, [r7, #30]
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	4413      	add	r3, r2
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	69b8      	ldr	r0, [r7, #24]
 80077fe:	f7ff ff93 	bl	8007728 <pbuf_get_at>
 8007802:	4603      	mov	r3, r0
 8007804:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8007806:	8afb      	ldrh	r3, [r7, #22]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8007810:	7d7a      	ldrb	r2, [r7, #21]
 8007812:	7d3b      	ldrb	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d009      	beq.n	800782c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8007818:	8afb      	ldrh	r3, [r7, #22]
 800781a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800781e:	4293      	cmp	r3, r2
 8007820:	bf28      	it	cs
 8007822:	4613      	movcs	r3, r2
 8007824:	b29b      	uxth	r3, r3
 8007826:	3301      	adds	r3, #1
 8007828:	b29b      	uxth	r3, r3
 800782a:	e007      	b.n	800783c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800782c:	8afb      	ldrh	r3, [r7, #22]
 800782e:	3301      	adds	r3, #1
 8007830:	82fb      	strh	r3, [r7, #22]
 8007832:	8afa      	ldrh	r2, [r7, #22]
 8007834:	893b      	ldrh	r3, [r7, #8]
 8007836:	429a      	cmp	r2, r3
 8007838:	d3db      	bcc.n	80077f2 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	460b      	mov	r3, r1
 8007854:	80fb      	strh	r3, [r7, #6]
 8007856:	4613      	mov	r3, r2
 8007858:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	891a      	ldrh	r2, [r3, #8]
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	891b      	ldrh	r3, [r3, #8]
 8007868:	4619      	mov	r1, r3
 800786a:	88fa      	ldrh	r2, [r7, #6]
 800786c:	88bb      	ldrh	r3, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	4299      	cmp	r1, r3
 8007872:	db16      	blt.n	80078a2 <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007874:	88bb      	ldrh	r3, [r7, #4]
 8007876:	82fb      	strh	r3, [r7, #22]
 8007878:	e00f      	b.n	800789a <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	8af9      	ldrh	r1, [r7, #22]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff ff8a 	bl	800779a <pbuf_memcmp>
 8007886:	4603      	mov	r3, r0
 8007888:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800788a:	8a7b      	ldrh	r3, [r7, #18]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <pbuf_memfind+0x50>
        return i;
 8007890:	8afb      	ldrh	r3, [r7, #22]
 8007892:	e008      	b.n	80078a6 <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 8007894:	8afb      	ldrh	r3, [r7, #22]
 8007896:	3301      	adds	r3, #1
 8007898:	82fb      	strh	r3, [r7, #22]
 800789a:	8afa      	ldrh	r2, [r7, #22]
 800789c:	8abb      	ldrh	r3, [r7, #20]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d9eb      	bls.n	800787a <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 80078a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80078bc:	2003      	movs	r0, #3
 80078be:	f7fe fd49 	bl	8006354 <memp_malloc>
 80078c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d151      	bne.n	8007974 <sys_timeout_abs+0xc4>
 80078d0:	4b2a      	ldr	r3, [pc, #168]	; (800797c <sys_timeout_abs+0xcc>)
 80078d2:	22be      	movs	r2, #190	; 0xbe
 80078d4:	492a      	ldr	r1, [pc, #168]	; (8007980 <sys_timeout_abs+0xd0>)
 80078d6:	482b      	ldr	r0, [pc, #172]	; (8007984 <sys_timeout_abs+0xd4>)
 80078d8:	f003 fa7e 	bl	800add8 <iprintf>
    return;
 80078dc:	e04a      	b.n	8007974 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <sys_timeout_abs+0xd8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80078fe:	4a22      	ldr	r2, [pc, #136]	; (8007988 <sys_timeout_abs+0xd8>)
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6013      	str	r3, [r2, #0]
    return;
 8007904:	e037      	b.n	8007976 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <sys_timeout_abs+0xd8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	0fdb      	lsrs	r3, r3, #31
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800791e:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <sys_timeout_abs+0xd8>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <sys_timeout_abs+0xd8>)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e023      	b.n	8007976 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800792e:	4b16      	ldr	r3, [pc, #88]	; (8007988 <sys_timeout_abs+0xd8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e01a      	b.n	800796c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00b      	beq.n	8007956 <sys_timeout_abs+0xa6>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	0fdb      	lsrs	r3, r3, #31
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	601a      	str	r2, [r3, #0]
        break;
 8007964:	e007      	b.n	8007976 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e1      	bne.n	8007936 <sys_timeout_abs+0x86>
 8007972:	e000      	b.n	8007976 <sys_timeout_abs+0xc6>
    return;
 8007974:	bf00      	nop
      }
    }
  }
}
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	0800c8f4 	.word	0x0800c8f4
 8007980:	0800c928 	.word	0x0800c928
 8007984:	0800c968 	.word	0x0800c968
 8007988:	200000e8 	.word	0x200000e8

0800798c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4798      	blx	r3

  now = sys_now();
 800799e:	f7fd fc4d 	bl	800523c <sys_now>
 80079a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <lwip_cyclic_timer+0x5c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4413      	add	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	0fdb      	lsrs	r3, r3, #31
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4413      	add	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4907      	ldr	r1, [pc, #28]	; (80079ec <lwip_cyclic_timer+0x60>)
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ff6e 	bl	80078b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80079d4:	e004      	b.n	80079e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4904      	ldr	r1, [pc, #16]	; (80079ec <lwip_cyclic_timer+0x60>)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff ff68 	bl	80078b0 <sys_timeout_abs>
}
 80079e0:	bf00      	nop
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200000ec 	.word	0x200000ec
 80079ec:	0800798d 	.word	0x0800798d

080079f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	e00e      	b.n	8007a1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80079fc:	4a0b      	ldr	r2, [pc, #44]	; (8007a2c <sys_timeouts_init+0x3c>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	4a08      	ldr	r2, [pc, #32]	; (8007a2c <sys_timeouts_init+0x3c>)
 8007a0a:	4413      	add	r3, r2
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4908      	ldr	r1, [pc, #32]	; (8007a30 <sys_timeouts_init+0x40>)
 8007a10:	f000 f810 	bl	8007a34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3301      	adds	r3, #1
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d9ed      	bls.n	80079fc <sys_timeouts_init+0xc>
  }
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	0800d48c 	.word	0x0800d48c
 8007a30:	0800798d 	.word	0x0800798d

08007a34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a46:	d306      	bcc.n	8007a56 <sys_timeout+0x22>
 8007a48:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <sys_timeout+0x40>)
 8007a4a:	f240 1229 	movw	r2, #297	; 0x129
 8007a4e:	490a      	ldr	r1, [pc, #40]	; (8007a78 <sys_timeout+0x44>)
 8007a50:	480a      	ldr	r0, [pc, #40]	; (8007a7c <sys_timeout+0x48>)
 8007a52:	f003 f9c1 	bl	800add8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8007a56:	f7fd fbf1 	bl	800523c <sys_now>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68b9      	ldr	r1, [r7, #8]
 8007a66:	6978      	ldr	r0, [r7, #20]
 8007a68:	f7ff ff22 	bl	80078b0 <sys_timeout_abs>
#endif
}
 8007a6c:	bf00      	nop
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	0800c8f4 	.word	0x0800c8f4
 8007a78:	0800c990 	.word	0x0800c990
 8007a7c:	0800c968 	.word	0x0800c968

08007a80 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8007a8a:	4b19      	ldr	r3, [pc, #100]	; (8007af0 <sys_untimeout+0x70>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d029      	beq.n	8007ae6 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <sys_untimeout+0x70>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60bb      	str	r3, [r7, #8]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	e01f      	b.n	8007ade <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d115      	bne.n	8007ad4 <sys_untimeout+0x54>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d110      	bne.n	8007ad4 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <sys_untimeout+0x42>
        next_timeout = t->next;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <sys_untimeout+0x70>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e003      	b.n	8007aca <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	2003      	movs	r0, #3
 8007ace:	f7fe fc8d 	bl	80063ec <memp_free>
      return;
 8007ad2:	e009      	b.n	8007ae8 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1dc      	bne.n	8007a9e <sys_untimeout+0x1e>
    }
  }
  return;
 8007ae4:	e000      	b.n	8007ae8 <sys_untimeout+0x68>
    return;
 8007ae6:	bf00      	nop
}
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200000e8 	.word	0x200000e8

08007af4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8007afa:	f7fd fb9f 	bl	800523c <sys_now>
 8007afe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8007b00:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <sys_check_timeouts+0x6c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d022      	beq.n	8007b52 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	0fdb      	lsrs	r3, r3, #31
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d11a      	bne.n	8007b56 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0e      	ldr	r2, [pc, #56]	; (8007b60 <sys_check_timeouts+0x6c>)
 8007b26:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <sys_check_timeouts+0x70>)
 8007b3a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	2003      	movs	r0, #3
 8007b40:	f7fe fc54 	bl	80063ec <memp_free>
    if (handler != NULL) {
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0da      	beq.n	8007b00 <sys_check_timeouts+0xc>
      handler(arg);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6838      	ldr	r0, [r7, #0]
 8007b4e:	4798      	blx	r3
  do {
 8007b50:	e7d6      	b.n	8007b00 <sys_check_timeouts+0xc>
      return;
 8007b52:	bf00      	nop
 8007b54:	e000      	b.n	8007b58 <sys_check_timeouts+0x64>
      return;
 8007b56:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200000e8 	.word	0x200000e8
 8007b64:	200000ec 	.word	0x200000ec

08007b68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007b6c:	f003 f94c 	bl	800ae08 <rand>
 8007b70:	4603      	mov	r3, r0
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <udp_init+0x20>)
 8007b82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007b84:	bf00      	nop
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	2000000a 	.word	0x2000000a

08007b8c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8007b96:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <udp_new_port+0x68>)
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	b291      	uxth	r1, r2
 8007b9e:	4a15      	ldr	r2, [pc, #84]	; (8007bf4 <udp_new_port+0x68>)
 8007ba0:	8011      	strh	r1, [r2, #0]
 8007ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d103      	bne.n	8007bb2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <udp_new_port+0x68>)
 8007bac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007bb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <udp_new_port+0x6c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	e011      	b.n	8007bde <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	8a5a      	ldrh	r2, [r3, #18]
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <udp_new_port+0x68>)
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d108      	bne.n	8007bd8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	80fb      	strh	r3, [r7, #6]
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd2:	d3e0      	bcc.n	8007b96 <udp_new_port+0xa>
        return 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e007      	b.n	8007be8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1ea      	bne.n	8007bba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <udp_new_port+0x68>)
 8007be6:	881b      	ldrh	r3, [r3, #0]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	2000000a 	.word	0x2000000a
 8007bf8:	200085e0 	.word	0x200085e0

08007bfc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <udp_input_local_match+0x20>
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <udp_input_local_match+0xb4>)
 8007c12:	2287      	movs	r2, #135	; 0x87
 8007c14:	4927      	ldr	r1, [pc, #156]	; (8007cb4 <udp_input_local_match+0xb8>)
 8007c16:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <udp_input_local_match+0xbc>)
 8007c18:	f003 f8de 	bl	800add8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d105      	bne.n	8007c2e <udp_input_local_match+0x32>
 8007c22:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <udp_input_local_match+0xb4>)
 8007c24:	2288      	movs	r2, #136	; 0x88
 8007c26:	4925      	ldr	r1, [pc, #148]	; (8007cbc <udp_input_local_match+0xc0>)
 8007c28:	4823      	ldr	r0, [pc, #140]	; (8007cb8 <udp_input_local_match+0xbc>)
 8007c2a:	f003 f8d5 	bl	800add8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7a1b      	ldrb	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	7a1a      	ldrb	r2, [r3, #8]
 8007c3a:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <udp_input_local_match+0xc4>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c42:	3301      	adds	r3, #1
 8007c44:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d001      	beq.n	8007c4e <udp_input_local_match+0x52>
    return 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e02b      	b.n	8007ca6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d018      	beq.n	8007c86 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <udp_input_local_match+0x86>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00f      	beq.n	8007c82 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <udp_input_local_match+0xc4>)
 8007c64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d00a      	beq.n	8007c82 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <udp_input_local_match+0xc4>)
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	405a      	eors	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d110      	bne.n	8007ca4 <udp_input_local_match+0xa8>
          return 1;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e00f      	b.n	8007ca6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <udp_input_local_match+0xa4>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <udp_input_local_match+0xa4>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <udp_input_local_match+0xc4>)
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d101      	bne.n	8007ca4 <udp_input_local_match+0xa8>
        return 1;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800c9dc 	.word	0x0800c9dc
 8007cb4:	0800ca0c 	.word	0x0800ca0c
 8007cb8:	0800ca30 	.word	0x0800ca30
 8007cbc:	0800ca58 	.word	0x0800ca58
 8007cc0:	200033ec 	.word	0x200033ec

08007cc4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b08d      	sub	sp, #52	; 0x34
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <udp_input+0x20>
 8007cd8:	4b7c      	ldr	r3, [pc, #496]	; (8007ecc <udp_input+0x208>)
 8007cda:	22cf      	movs	r2, #207	; 0xcf
 8007cdc:	497c      	ldr	r1, [pc, #496]	; (8007ed0 <udp_input+0x20c>)
 8007cde:	487d      	ldr	r0, [pc, #500]	; (8007ed4 <udp_input+0x210>)
 8007ce0:	f003 f87a 	bl	800add8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <udp_input+0x32>
 8007cea:	4b78      	ldr	r3, [pc, #480]	; (8007ecc <udp_input+0x208>)
 8007cec:	22d0      	movs	r2, #208	; 0xd0
 8007cee:	497a      	ldr	r1, [pc, #488]	; (8007ed8 <udp_input+0x214>)
 8007cf0:	4878      	ldr	r0, [pc, #480]	; (8007ed4 <udp_input+0x210>)
 8007cf2:	f003 f871 	bl	800add8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	895b      	ldrh	r3, [r3, #10]
 8007cfa:	2b07      	cmp	r3, #7
 8007cfc:	d803      	bhi.n	8007d06 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff f9b8 	bl	8007074 <pbuf_free>
    goto end;
 8007d04:	e0de      	b.n	8007ec4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007d0c:	4b73      	ldr	r3, [pc, #460]	; (8007edc <udp_input+0x218>)
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	4a72      	ldr	r2, [pc, #456]	; (8007edc <udp_input+0x218>)
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 f80c 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fd feda 	bl	8005ae0 <lwip_htons>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	885b      	ldrh	r3, [r3, #2]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fd fed2 	bl	8005ae0 <lwip_htons>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d4c:	4b64      	ldr	r3, [pc, #400]	; (8007ee0 <udp_input+0x21c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	e054      	b.n	8007dfe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	8a5b      	ldrh	r3, [r3, #18]
 8007d58:	89fa      	ldrh	r2, [r7, #14]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d14a      	bne.n	8007df4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8007d5e:	7cfb      	ldrb	r3, [r7, #19]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d66:	f7ff ff49 	bl	8007bfc <udp_input_local_match>
 8007d6a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d041      	beq.n	8007df4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	7c1b      	ldrb	r3, [r3, #16]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11d      	bne.n	8007db8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e017      	b.n	8007db8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8007d88:	7cfb      	ldrb	r3, [r7, #19]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d014      	beq.n	8007db8 <udp_input+0xf4>
 8007d8e:	4b53      	ldr	r3, [pc, #332]	; (8007edc <udp_input+0x218>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d10f      	bne.n	8007db8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d008      	beq.n	8007db8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	3304      	adds	r3, #4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d101      	bne.n	8007db8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	8a9b      	ldrh	r3, [r3, #20]
 8007dbc:	8a3a      	ldrh	r2, [r7, #16]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d118      	bne.n	8007df4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	4b43      	ldr	r3, [pc, #268]	; (8007edc <udp_input+0x218>)
 8007dd0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d10e      	bne.n	8007df4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d014      	beq.n	8007e06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8007de4:	4b3e      	ldr	r3, [pc, #248]	; (8007ee0 <udp_input+0x21c>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8007dec:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <udp_input+0x21c>)
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8007df2:	e008      	b.n	8007e06 <udp_input+0x142>
      }
    }

    prev = pcb;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1a7      	bne.n	8007d54 <udp_input+0x90>
 8007e04:	e000      	b.n	8007e08 <udp_input+0x144>
        break;
 8007e06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <udp_input+0x14e>
    pcb = uncon_pcb;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <udp_input+0x15a>
    for_us = 1;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	76fb      	strb	r3, [r7, #27]
 8007e1c:	e00a      	b.n	8007e34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	3304      	adds	r3, #4
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	4b2d      	ldr	r3, [pc, #180]	; (8007edc <udp_input+0x218>)
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8007e34:	7efb      	ldrb	r3, [r7, #27]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d041      	beq.n	8007ebe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8007e3a:	2108      	movs	r1, #8
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7ff f893 	bl	8006f68 <pbuf_remove_header>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00a      	beq.n	8007e5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8007e48:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <udp_input+0x208>)
 8007e4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8007e4e:	4925      	ldr	r1, [pc, #148]	; (8007ee4 <udp_input+0x220>)
 8007e50:	4820      	ldr	r0, [pc, #128]	; (8007ed4 <udp_input+0x210>)
 8007e52:	f002 ffc1 	bl	800add8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff f90c 	bl	8007074 <pbuf_free>
      goto end;
 8007e5c:	e032      	b.n	8007ec4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d012      	beq.n	8007e8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00a      	beq.n	8007e82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	699c      	ldr	r4, [r3, #24]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	69d8      	ldr	r0, [r3, #28]
 8007e74:	8a3b      	ldrh	r3, [r7, #16]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <udp_input+0x224>)
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8007e80:	e021      	b.n	8007ec6 <udp_input+0x202>
        pbuf_free(p);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff f8f6 	bl	8007074 <pbuf_free>
        goto end;
 8007e88:	e01c      	b.n	8007ec4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8007e8a:	7cfb      	ldrb	r3, [r7, #19]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d112      	bne.n	8007eb6 <udp_input+0x1f2>
 8007e90:	4b12      	ldr	r3, [pc, #72]	; (8007edc <udp_input+0x218>)
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e98:	2be0      	cmp	r3, #224	; 0xe0
 8007e9a:	d00c      	beq.n	8007eb6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <udp_input+0x218>)
 8007e9e:	899b      	ldrh	r3, [r3, #12]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	b21b      	sxth	r3, r3
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff f8d0 	bl	800704e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8007eae:	2103      	movs	r1, #3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fc29 	bl	8009708 <icmp_dest_unreach>
      pbuf_free(p);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff f8dc 	bl	8007074 <pbuf_free>
  return;
 8007ebc:	e003      	b.n	8007ec6 <udp_input+0x202>
    pbuf_free(p);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff f8d8 	bl	8007074 <pbuf_free>
  return;
 8007ec4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8007ec6:	372c      	adds	r7, #44	; 0x2c
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd90      	pop	{r4, r7, pc}
 8007ecc:	0800c9dc 	.word	0x0800c9dc
 8007ed0:	0800ca80 	.word	0x0800ca80
 8007ed4:	0800ca30 	.word	0x0800ca30
 8007ed8:	0800ca98 	.word	0x0800ca98
 8007edc:	200033ec 	.word	0x200033ec
 8007ee0:	200085e0 	.word	0x200085e0
 8007ee4:	0800cab4 	.word	0x0800cab4
 8007ee8:	200033fc 	.word	0x200033fc

08007eec <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <udp_send+0x24>
 8007efc:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <udp_send+0x58>)
 8007efe:	f240 12d5 	movw	r2, #469	; 0x1d5
 8007f02:	4911      	ldr	r1, [pc, #68]	; (8007f48 <udp_send+0x5c>)
 8007f04:	4811      	ldr	r0, [pc, #68]	; (8007f4c <udp_send+0x60>)
 8007f06:	f002 ff67 	bl	800add8 <iprintf>
 8007f0a:	f06f 030f 	mvn.w	r3, #15
 8007f0e:	e015      	b.n	8007f3c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <udp_send+0x3e>
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <udp_send+0x58>)
 8007f18:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8007f1c:	490c      	ldr	r1, [pc, #48]	; (8007f50 <udp_send+0x64>)
 8007f1e:	480b      	ldr	r0, [pc, #44]	; (8007f4c <udp_send+0x60>)
 8007f20:	f002 ff5a 	bl	800add8 <iprintf>
 8007f24:	f06f 030f 	mvn.w	r3, #15
 8007f28:	e008      	b.n	8007f3c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8a9b      	ldrh	r3, [r3, #20]
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f80d 	bl	8007f54 <udp_sendto>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	0800c9dc 	.word	0x0800c9dc
 8007f48:	0800cad0 	.word	0x0800cad0
 8007f4c:	0800ca30 	.word	0x0800ca30
 8007f50:	0800cae8 	.word	0x0800cae8

08007f54 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <udp_sendto+0x28>
 8007f68:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <udp_sendto+0xa4>)
 8007f6a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007f6e:	4923      	ldr	r1, [pc, #140]	; (8007ffc <udp_sendto+0xa8>)
 8007f70:	4823      	ldr	r0, [pc, #140]	; (8008000 <udp_sendto+0xac>)
 8007f72:	f002 ff31 	bl	800add8 <iprintf>
 8007f76:	f06f 030f 	mvn.w	r3, #15
 8007f7a:	e038      	b.n	8007fee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <udp_sendto+0x42>
 8007f82:	4b1d      	ldr	r3, [pc, #116]	; (8007ff8 <udp_sendto+0xa4>)
 8007f84:	f240 2219 	movw	r2, #537	; 0x219
 8007f88:	491e      	ldr	r1, [pc, #120]	; (8008004 <udp_sendto+0xb0>)
 8007f8a:	481d      	ldr	r0, [pc, #116]	; (8008000 <udp_sendto+0xac>)
 8007f8c:	f002 ff24 	bl	800add8 <iprintf>
 8007f90:	f06f 030f 	mvn.w	r3, #15
 8007f94:	e02b      	b.n	8007fee <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d109      	bne.n	8007fb0 <udp_sendto+0x5c>
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <udp_sendto+0xa4>)
 8007f9e:	f240 221a 	movw	r2, #538	; 0x21a
 8007fa2:	4919      	ldr	r1, [pc, #100]	; (8008008 <udp_sendto+0xb4>)
 8007fa4:	4816      	ldr	r0, [pc, #88]	; (8008000 <udp_sendto+0xac>)
 8007fa6:	f002 ff17 	bl	800add8 <iprintf>
 8007faa:	f06f 030f 	mvn.w	r3, #15
 8007fae:	e01e      	b.n	8007fee <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	7a1b      	ldrb	r3, [r3, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d006      	beq.n	8007fc6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	7a1b      	ldrb	r3, [r3, #8]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fd27 	bl	8006a10 <netif_get_by_index>
 8007fc2:	6178      	str	r0, [r7, #20]
 8007fc4:	e003      	b.n	8007fce <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fc28 	bl	800981c <ip4_route>
 8007fcc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8007fd4:	f06f 0303 	mvn.w	r3, #3
 8007fd8:	e009      	b.n	8007fee <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8007fda:	887a      	ldrh	r2, [r7, #2]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f810 	bl	800800c <udp_sendto_if>
 8007fec:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	0800c9dc 	.word	0x0800c9dc
 8007ffc:	0800cb00 	.word	0x0800cb00
 8008000:	0800ca30 	.word	0x0800ca30
 8008004:	0800cb18 	.word	0x0800cb18
 8008008:	0800cb34 	.word	0x0800cb34

0800800c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <udp_sendto_if+0x28>
 8008020:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <udp_sendto_if+0xd0>)
 8008022:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008026:	492e      	ldr	r1, [pc, #184]	; (80080e0 <udp_sendto_if+0xd4>)
 8008028:	482e      	ldr	r0, [pc, #184]	; (80080e4 <udp_sendto_if+0xd8>)
 800802a:	f002 fed5 	bl	800add8 <iprintf>
 800802e:	f06f 030f 	mvn.w	r3, #15
 8008032:	e04f      	b.n	80080d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <udp_sendto_if+0x42>
 800803a:	4b28      	ldr	r3, [pc, #160]	; (80080dc <udp_sendto_if+0xd0>)
 800803c:	f240 2281 	movw	r2, #641	; 0x281
 8008040:	4929      	ldr	r1, [pc, #164]	; (80080e8 <udp_sendto_if+0xdc>)
 8008042:	4828      	ldr	r0, [pc, #160]	; (80080e4 <udp_sendto_if+0xd8>)
 8008044:	f002 fec8 	bl	800add8 <iprintf>
 8008048:	f06f 030f 	mvn.w	r3, #15
 800804c:	e042      	b.n	80080d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d109      	bne.n	8008068 <udp_sendto_if+0x5c>
 8008054:	4b21      	ldr	r3, [pc, #132]	; (80080dc <udp_sendto_if+0xd0>)
 8008056:	f240 2282 	movw	r2, #642	; 0x282
 800805a:	4924      	ldr	r1, [pc, #144]	; (80080ec <udp_sendto_if+0xe0>)
 800805c:	4821      	ldr	r0, [pc, #132]	; (80080e4 <udp_sendto_if+0xd8>)
 800805e:	f002 febb 	bl	800add8 <iprintf>
 8008062:	f06f 030f 	mvn.w	r3, #15
 8008066:	e035      	b.n	80080d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <udp_sendto_if+0x76>
 800806e:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <udp_sendto_if+0xd0>)
 8008070:	f240 2283 	movw	r2, #643	; 0x283
 8008074:	491e      	ldr	r1, [pc, #120]	; (80080f0 <udp_sendto_if+0xe4>)
 8008076:	481b      	ldr	r0, [pc, #108]	; (80080e4 <udp_sendto_if+0xd8>)
 8008078:	f002 feae 	bl	800add8 <iprintf>
 800807c:	f06f 030f 	mvn.w	r3, #15
 8008080:	e028      	b.n	80080d4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d009      	beq.n	800809c <udp_sendto_if+0x90>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008098:	2be0      	cmp	r3, #224	; 0xe0
 800809a:	d103      	bne.n	80080a4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	3304      	adds	r3, #4
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	e00b      	b.n	80080bc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	3304      	adds	r3, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d002      	beq.n	80080b8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80080b2:	f06f 0303 	mvn.w	r3, #3
 80080b6:	e00d      	b.n	80080d4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80080bc:	887a      	ldrh	r2, [r7, #2]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f811 	bl	80080f4 <udp_sendto_if_src>
 80080d2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	0800c9dc 	.word	0x0800c9dc
 80080e0:	0800cb50 	.word	0x0800cb50
 80080e4:	0800ca30 	.word	0x0800ca30
 80080e8:	0800cb6c 	.word	0x0800cb6c
 80080ec:	0800cb88 	.word	0x0800cb88
 80080f0:	0800cba8 	.word	0x0800cba8

080080f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08c      	sub	sp, #48	; 0x30
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <udp_sendto_if_src+0x28>
 8008108:	4b65      	ldr	r3, [pc, #404]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 800810a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800810e:	4965      	ldr	r1, [pc, #404]	; (80082a4 <udp_sendto_if_src+0x1b0>)
 8008110:	4865      	ldr	r0, [pc, #404]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 8008112:	f002 fe61 	bl	800add8 <iprintf>
 8008116:	f06f 030f 	mvn.w	r3, #15
 800811a:	e0bc      	b.n	8008296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <udp_sendto_if_src+0x42>
 8008122:	4b5f      	ldr	r3, [pc, #380]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 8008124:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008128:	4960      	ldr	r1, [pc, #384]	; (80082ac <udp_sendto_if_src+0x1b8>)
 800812a:	485f      	ldr	r0, [pc, #380]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 800812c:	f002 fe54 	bl	800add8 <iprintf>
 8008130:	f06f 030f 	mvn.w	r3, #15
 8008134:	e0af      	b.n	8008296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <udp_sendto_if_src+0x5c>
 800813c:	4b58      	ldr	r3, [pc, #352]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 800813e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8008142:	495b      	ldr	r1, [pc, #364]	; (80082b0 <udp_sendto_if_src+0x1bc>)
 8008144:	4858      	ldr	r0, [pc, #352]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 8008146:	f002 fe47 	bl	800add8 <iprintf>
 800814a:	f06f 030f 	mvn.w	r3, #15
 800814e:	e0a2      	b.n	8008296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <udp_sendto_if_src+0x76>
 8008156:	4b52      	ldr	r3, [pc, #328]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 8008158:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800815c:	4955      	ldr	r1, [pc, #340]	; (80082b4 <udp_sendto_if_src+0x1c0>)
 800815e:	4852      	ldr	r0, [pc, #328]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 8008160:	f002 fe3a 	bl	800add8 <iprintf>
 8008164:	f06f 030f 	mvn.w	r3, #15
 8008168:	e095      	b.n	8008296 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <udp_sendto_if_src+0x90>
 8008170:	4b4b      	ldr	r3, [pc, #300]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 8008172:	f240 22d5 	movw	r2, #725	; 0x2d5
 8008176:	4950      	ldr	r1, [pc, #320]	; (80082b8 <udp_sendto_if_src+0x1c4>)
 8008178:	484b      	ldr	r0, [pc, #300]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 800817a:	f002 fe2d 	bl	800add8 <iprintf>
 800817e:	f06f 030f 	mvn.w	r3, #15
 8008182:	e088      	b.n	8008296 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8a5b      	ldrh	r3, [r3, #18]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10f      	bne.n	80081ac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800818c:	68f9      	ldr	r1, [r7, #12]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8a5b      	ldrh	r3, [r3, #18]
 8008192:	461a      	mov	r2, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f893 	bl	80082c0 <udp_bind>
 800819a:	4603      	mov	r3, r0
 800819c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800819e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80081a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80081aa:	e074      	b.n	8008296 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	891b      	ldrh	r3, [r3, #8]
 80081b0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d902      	bls.n	80081be <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80081b8:	f04f 33ff 	mov.w	r3, #4294967295
 80081bc:	e06b      	b.n	8008296 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80081be:	2108      	movs	r1, #8
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f7fe fec1 	bl	8006f48 <pbuf_add_header>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80081cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80081d0:	2108      	movs	r1, #8
 80081d2:	2022      	movs	r0, #34	; 0x22
 80081d4:	f7fe fc6c 	bl	8006ab0 <pbuf_alloc>
 80081d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295
 80081e4:	e057      	b.n	8008296 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	891b      	ldrh	r3, [r3, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	69f8      	ldr	r0, [r7, #28]
 80081f2:	f7ff f857 	bl	80072a4 <pbuf_chain>
 80081f6:	e001      	b.n	80081fc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	2b07      	cmp	r3, #7
 8008202:	d806      	bhi.n	8008212 <udp_sendto_if_src+0x11e>
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <udp_sendto_if_src+0x1ac>)
 8008206:	f240 320d 	movw	r2, #781	; 0x30d
 800820a:	492c      	ldr	r1, [pc, #176]	; (80082bc <udp_sendto_if_src+0x1c8>)
 800820c:	4826      	ldr	r0, [pc, #152]	; (80082a8 <udp_sendto_if_src+0x1b4>)
 800820e:	f002 fde3 	bl	800add8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8a5b      	ldrh	r3, [r3, #18]
 800821c:	4618      	mov	r0, r3
 800821e:	f7fd fc5f 	bl	8005ae0 <lwip_htons>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	4618      	mov	r0, r3
 800822e:	f7fd fc57 	bl	8005ae0 <lwip_htons>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2200      	movs	r2, #0
 800823e:	719a      	strb	r2, [r3, #6]
 8008240:	2200      	movs	r2, #0
 8008242:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	891b      	ldrh	r3, [r3, #8]
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd fc49 	bl	8005ae0 <lwip_htons>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8008256:	2311      	movs	r3, #17
 8008258:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	7adb      	ldrb	r3, [r3, #11]
 800825e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7a9b      	ldrb	r3, [r3, #10]
 8008264:	7cb9      	ldrb	r1, [r7, #18]
 8008266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008268:	9202      	str	r2, [sp, #8]
 800826a:	7cfa      	ldrb	r2, [r7, #19]
 800826c:	9201      	str	r2, [sp, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	460b      	mov	r3, r1
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008276:	69f8      	ldr	r0, [r7, #28]
 8008278:	f001 fcae 	bl	8009bd8 <ip4_output_if_src>
 800827c:	4603      	mov	r3, r0
 800827e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	429a      	cmp	r2, r3
 8008286:	d004      	beq.n	8008292 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8008288:	69f8      	ldr	r0, [r7, #28]
 800828a:	f7fe fef3 	bl	8007074 <pbuf_free>
    q = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8008292:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	0800c9dc 	.word	0x0800c9dc
 80082a4:	0800cbc8 	.word	0x0800cbc8
 80082a8:	0800ca30 	.word	0x0800ca30
 80082ac:	0800cbe8 	.word	0x0800cbe8
 80082b0:	0800cc08 	.word	0x0800cc08
 80082b4:	0800cc2c 	.word	0x0800cc2c
 80082b8:	0800cc50 	.word	0x0800cc50
 80082bc:	0800cc74 	.word	0x0800cc74

080082c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <udp_bind+0xfc>)
 80082d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <udp_bind+0x32>
 80082de:	4b38      	ldr	r3, [pc, #224]	; (80083c0 <udp_bind+0x100>)
 80082e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80082e4:	4937      	ldr	r1, [pc, #220]	; (80083c4 <udp_bind+0x104>)
 80082e6:	4838      	ldr	r0, [pc, #224]	; (80083c8 <udp_bind+0x108>)
 80082e8:	f002 fd76 	bl	800add8 <iprintf>
 80082ec:	f06f 030f 	mvn.w	r3, #15
 80082f0:	e060      	b.n	80083b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80082f6:	4b35      	ldr	r3, [pc, #212]	; (80083cc <udp_bind+0x10c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e009      	b.n	8008312 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	429a      	cmp	r2, r3
 8008304:	d102      	bne.n	800830c <udp_bind+0x4c>
      rebind = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	74fb      	strb	r3, [r7, #19]
      break;
 800830a:	e005      	b.n	8008318 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f2      	bne.n	80082fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <udp_bind+0x72>
    port = udp_new_port();
 800831e:	f7ff fc35 	bl	8007b8c <udp_new_port>
 8008322:	4603      	mov	r3, r0
 8008324:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d12c      	bne.n	8008386 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800832c:	f06f 0307 	mvn.w	r3, #7
 8008330:	e040      	b.n	80083b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008332:	4b26      	ldr	r3, [pc, #152]	; (80083cc <udp_bind+0x10c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e022      	b.n	8008380 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	429a      	cmp	r2, r3
 8008340:	d01b      	beq.n	800837a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	8a5b      	ldrh	r3, [r3, #18]
 8008346:	88fa      	ldrh	r2, [r7, #6]
 8008348:	429a      	cmp	r2, r3
 800834a:	d116      	bne.n	800837a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8008354:	429a      	cmp	r2, r3
 8008356:	d00d      	beq.n	8008374 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <udp_bind+0xb4>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d006      	beq.n	8008374 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008366:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8008374:	f06f 0307 	mvn.w	r3, #7
 8008378:	e01c      	b.n	80083b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1d9      	bne.n	800833a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <udp_bind+0xd2>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	e000      	b.n	8008394 <udp_bind+0xd4>
 8008392:	2300      	movs	r3, #0
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	88fa      	ldrh	r2, [r7, #6]
 800839c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800839e:	7cfb      	ldrb	r3, [r7, #19]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <udp_bind+0x10c>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80083ac:	4a07      	ldr	r2, [pc, #28]	; (80083cc <udp_bind+0x10c>)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	0800d49c 	.word	0x0800d49c
 80083c0:	0800c9dc 	.word	0x0800c9dc
 80083c4:	0800cca4 	.word	0x0800cca4
 80083c8:	0800ca30 	.word	0x0800ca30
 80083cc:	200085e0 	.word	0x200085e0

080083d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d109      	bne.n	80083f8 <udp_connect+0x28>
 80083e4:	4b2c      	ldr	r3, [pc, #176]	; (8008498 <udp_connect+0xc8>)
 80083e6:	f240 4235 	movw	r2, #1077	; 0x435
 80083ea:	492c      	ldr	r1, [pc, #176]	; (800849c <udp_connect+0xcc>)
 80083ec:	482c      	ldr	r0, [pc, #176]	; (80084a0 <udp_connect+0xd0>)
 80083ee:	f002 fcf3 	bl	800add8 <iprintf>
 80083f2:	f06f 030f 	mvn.w	r3, #15
 80083f6:	e04b      	b.n	8008490 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <udp_connect+0x42>
 80083fe:	4b26      	ldr	r3, [pc, #152]	; (8008498 <udp_connect+0xc8>)
 8008400:	f240 4236 	movw	r2, #1078	; 0x436
 8008404:	4927      	ldr	r1, [pc, #156]	; (80084a4 <udp_connect+0xd4>)
 8008406:	4826      	ldr	r0, [pc, #152]	; (80084a0 <udp_connect+0xd0>)
 8008408:	f002 fce6 	bl	800add8 <iprintf>
 800840c:	f06f 030f 	mvn.w	r3, #15
 8008410:	e03e      	b.n	8008490 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8a5b      	ldrh	r3, [r3, #18]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10f      	bne.n	800843a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800841a:	68f9      	ldr	r1, [r7, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8a5b      	ldrh	r3, [r3, #18]
 8008420:	461a      	mov	r2, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff4c 	bl	80082c0 <udp_bind>
 8008428:	4603      	mov	r3, r0
 800842a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800842c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <udp_connect+0x6a>
      return err;
 8008434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008438:	e02a      	b.n	8008490 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <udp_connect+0x76>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	e000      	b.n	8008448 <udp_connect+0x78>
 8008446:	2300      	movs	r3, #0
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	88fa      	ldrh	r2, [r7, #6]
 8008450:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	7c1b      	ldrb	r3, [r3, #16]
 8008456:	f043 0304 	orr.w	r3, r3, #4
 800845a:	b2da      	uxtb	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008460:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <udp_connect+0xd8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e008      	b.n	800847a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	429a      	cmp	r2, r3
 800846e:	d101      	bne.n	8008474 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	e00d      	b.n	8008490 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f3      	bne.n	8008468 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008480:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <udp_connect+0xd8>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8008488:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <udp_connect+0xd8>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	0800c9dc 	.word	0x0800c9dc
 800849c:	0800ccbc 	.word	0x0800ccbc
 80084a0:	0800ca30 	.word	0x0800ca30
 80084a4:	0800ccd8 	.word	0x0800ccd8
 80084a8:	200085e0 	.word	0x200085e0

080084ac <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <udp_disconnect+0x1e>
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <udp_disconnect+0x44>)
 80084bc:	f240 426a 	movw	r2, #1130	; 0x46a
 80084c0:	490c      	ldr	r1, [pc, #48]	; (80084f4 <udp_disconnect+0x48>)
 80084c2:	480d      	ldr	r0, [pc, #52]	; (80084f8 <udp_disconnect+0x4c>)
 80084c4:	f002 fc88 	bl	800add8 <iprintf>
 80084c8:	e00f      	b.n	80084ea <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7c1b      	ldrb	r3, [r3, #16]
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	741a      	strb	r2, [r3, #16]
}
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	0800c9dc 	.word	0x0800c9dc
 80084f4:	0800ccf4 	.word	0x0800ccf4
 80084f8:	0800ca30 	.word	0x0800ca30

080084fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d107      	bne.n	800851e <udp_recv+0x22>
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <udp_recv+0x34>)
 8008510:	f240 428a 	movw	r2, #1162	; 0x48a
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <udp_recv+0x38>)
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <udp_recv+0x3c>)
 8008518:	f002 fc5e 	bl	800add8 <iprintf>
 800851c:	e005      	b.n	800852a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	61da      	str	r2, [r3, #28]
}
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	0800c9dc 	.word	0x0800c9dc
 8008534:	0800cd10 	.word	0x0800cd10
 8008538:	0800ca30 	.word	0x0800ca30

0800853c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <udp_remove+0x1e>
 800854a:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <udp_remove+0x74>)
 800854c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8008550:	4918      	ldr	r1, [pc, #96]	; (80085b4 <udp_remove+0x78>)
 8008552:	4819      	ldr	r0, [pc, #100]	; (80085b8 <udp_remove+0x7c>)
 8008554:	f002 fc40 	bl	800add8 <iprintf>
 8008558:	e026      	b.n	80085a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800855a:	4b18      	ldr	r3, [pc, #96]	; (80085bc <udp_remove+0x80>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d105      	bne.n	8008570 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <udp_remove+0x80>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	4a14      	ldr	r2, [pc, #80]	; (80085bc <udp_remove+0x80>)
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	e017      	b.n	80085a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008570:	4b12      	ldr	r3, [pc, #72]	; (80085bc <udp_remove+0x80>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e010      	b.n	800859a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d009      	beq.n	8008594 <udp_remove+0x58>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d104      	bne.n	8008594 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	60da      	str	r2, [r3, #12]
        break;
 8008592:	e005      	b.n	80085a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1eb      	bne.n	8008578 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	2000      	movs	r0, #0
 80085a4:	f7fd ff22 	bl	80063ec <memp_free>
}
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	0800c9dc 	.word	0x0800c9dc
 80085b4:	0800cd28 	.word	0x0800cd28
 80085b8:	0800ca30 	.word	0x0800ca30
 80085bc:	200085e0 	.word	0x200085e0

080085c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80085c6:	2000      	movs	r0, #0
 80085c8:	f7fd fec4 	bl	8006354 <memp_malloc>
 80085cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80085d4:	2220      	movs	r2, #32
 80085d6:	2100      	movs	r1, #0
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f002 fb4b 	bl	800ac74 <memset>
    pcb->ttl = UDP_TTL;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	22ff      	movs	r2, #255	; 0xff
 80085e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80085e4:	687b      	ldr	r3, [r7, #4]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	4603      	mov	r3, r0
 80085f6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80085f8:	f7ff ffe2 	bl	80085c0 <udp_new>
 80085fc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80085fe:	68fb      	ldr	r3, [r7, #12]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01e      	beq.n	8008656 <udp_netif_ip_addr_changed+0x4e>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01a      	beq.n	8008656 <udp_netif_ip_addr_changed+0x4e>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d017      	beq.n	8008656 <udp_netif_ip_addr_changed+0x4e>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d013      	beq.n	8008656 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <udp_netif_ip_addr_changed+0x5c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e00c      	b.n	8008650 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d103      	bne.n	800864a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1ef      	bne.n	8008636 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	200085e0 	.word	0x200085e0

08008668 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008670:	4915      	ldr	r1, [pc, #84]	; (80086c8 <etharp_free_entry+0x60>)
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	4413      	add	r3, r2
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	440b      	add	r3, r1
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d013      	beq.n	80086ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008684:	4910      	ldr	r1, [pc, #64]	; (80086c8 <etharp_free_entry+0x60>)
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	4413      	add	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	440b      	add	r3, r1
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fced 	bl	8007074 <pbuf_free>
    arp_table[i].q = NULL;
 800869a:	490b      	ldr	r1, [pc, #44]	; (80086c8 <etharp_free_entry+0x60>)
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80086ac:	4906      	ldr	r1, [pc, #24]	; (80086c8 <etharp_free_entry+0x60>)
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	4413      	add	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	440b      	add	r3, r1
 80086ba:	3314      	adds	r3, #20
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	200000f0 	.word	0x200000f0

080086cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e096      	b.n	8008806 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80086d8:	494f      	ldr	r1, [pc, #316]	; (8008818 <etharp_tmr+0x14c>)
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	3314      	adds	r3, #20
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8086 	beq.w	8008800 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80086f4:	4948      	ldr	r1, [pc, #288]	; (8008818 <etharp_tmr+0x14c>)
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	440b      	add	r3, r1
 8008702:	3312      	adds	r3, #18
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	b298      	uxth	r0, r3
 800870a:	4943      	ldr	r1, [pc, #268]	; (8008818 <etharp_tmr+0x14c>)
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	3312      	adds	r3, #18
 800871a:	4602      	mov	r2, r0
 800871c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800871e:	493e      	ldr	r1, [pc, #248]	; (8008818 <etharp_tmr+0x14c>)
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	4413      	add	r3, r2
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	440b      	add	r3, r1
 800872c:	3312      	adds	r3, #18
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008734:	d215      	bcs.n	8008762 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008736:	4938      	ldr	r1, [pc, #224]	; (8008818 <etharp_tmr+0x14c>)
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4413      	add	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	440b      	add	r3, r1
 8008744:	3314      	adds	r3, #20
 8008746:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10e      	bne.n	800876a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800874c:	4932      	ldr	r1, [pc, #200]	; (8008818 <etharp_tmr+0x14c>)
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	4413      	add	r3, r2
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	440b      	add	r3, r1
 800875a:	3312      	adds	r3, #18
 800875c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800875e:	2b04      	cmp	r3, #4
 8008760:	d903      	bls.n	800876a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ff80 	bl	8008668 <etharp_free_entry>
 8008768:	e04a      	b.n	8008800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800876a:	492b      	ldr	r1, [pc, #172]	; (8008818 <etharp_tmr+0x14c>)
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	4413      	add	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	440b      	add	r3, r1
 8008778:	3314      	adds	r3, #20
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b03      	cmp	r3, #3
 800877e:	d10a      	bne.n	8008796 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008780:	4925      	ldr	r1, [pc, #148]	; (8008818 <etharp_tmr+0x14c>)
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	4413      	add	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	440b      	add	r3, r1
 800878e:	3314      	adds	r3, #20
 8008790:	2204      	movs	r2, #4
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e034      	b.n	8008800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008796:	4920      	ldr	r1, [pc, #128]	; (8008818 <etharp_tmr+0x14c>)
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	4413      	add	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	440b      	add	r3, r1
 80087a4:	3314      	adds	r3, #20
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d10a      	bne.n	80087c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80087ac:	491a      	ldr	r1, [pc, #104]	; (8008818 <etharp_tmr+0x14c>)
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	4413      	add	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	440b      	add	r3, r1
 80087ba:	3314      	adds	r3, #20
 80087bc:	2202      	movs	r2, #2
 80087be:	701a      	strb	r2, [r3, #0]
 80087c0:	e01e      	b.n	8008800 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80087c2:	4915      	ldr	r1, [pc, #84]	; (8008818 <etharp_tmr+0x14c>)
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	440b      	add	r3, r1
 80087d0:	3314      	adds	r3, #20
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d113      	bne.n	8008800 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80087d8:	490f      	ldr	r1, [pc, #60]	; (8008818 <etharp_tmr+0x14c>)
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	4413      	add	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	440b      	add	r3, r1
 80087e6:	3308      	adds	r3, #8
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	4a08      	ldr	r2, [pc, #32]	; (8008818 <etharp_tmr+0x14c>)
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	f000 fe6e 	bl	80094dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3301      	adds	r3, #1
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b09      	cmp	r3, #9
 800880a:	f77f af65 	ble.w	80086d8 <etharp_tmr+0xc>
      }
    }
  }
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200000f0 	.word	0x200000f0

0800881c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08a      	sub	sp, #40	; 0x28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	460b      	mov	r3, r1
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800882a:	230a      	movs	r3, #10
 800882c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800882e:	230a      	movs	r3, #10
 8008830:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008832:	230a      	movs	r3, #10
 8008834:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800883a:	230a      	movs	r3, #10
 800883c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	83bb      	strh	r3, [r7, #28]
 8008842:	2300      	movs	r3, #0
 8008844:	837b      	strh	r3, [r7, #26]
 8008846:	2300      	movs	r3, #0
 8008848:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800884a:	2300      	movs	r3, #0
 800884c:	843b      	strh	r3, [r7, #32]
 800884e:	e0ae      	b.n	80089ae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008854:	49a6      	ldr	r1, [pc, #664]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008856:	4613      	mov	r3, r2
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	4413      	add	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	440b      	add	r3, r1
 8008860:	3314      	adds	r3, #20
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008866:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800886a:	2b0a      	cmp	r3, #10
 800886c:	d105      	bne.n	800887a <etharp_find_entry+0x5e>
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008874:	8c3b      	ldrh	r3, [r7, #32]
 8008876:	847b      	strh	r3, [r7, #34]	; 0x22
 8008878:	e095      	b.n	80089a6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8092 	beq.w	80089a6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d009      	beq.n	800889c <etharp_find_entry+0x80>
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d806      	bhi.n	800889c <etharp_find_entry+0x80>
 800888e:	4b99      	ldr	r3, [pc, #612]	; (8008af4 <etharp_find_entry+0x2d8>)
 8008890:	f240 1223 	movw	r2, #291	; 0x123
 8008894:	4998      	ldr	r1, [pc, #608]	; (8008af8 <etharp_find_entry+0x2dc>)
 8008896:	4899      	ldr	r0, [pc, #612]	; (8008afc <etharp_find_entry+0x2e0>)
 8008898:	f002 fa9e 	bl	800add8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d020      	beq.n	80088e4 <etharp_find_entry+0xc8>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6819      	ldr	r1, [r3, #0]
 80088a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088aa:	4891      	ldr	r0, [pc, #580]	; (8008af0 <etharp_find_entry+0x2d4>)
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	4403      	add	r3, r0
 80088b6:	3304      	adds	r3, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4299      	cmp	r1, r3
 80088bc:	d112      	bne.n	80088e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00c      	beq.n	80088de <etharp_find_entry+0xc2>
 80088c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088c8:	4989      	ldr	r1, [pc, #548]	; (8008af0 <etharp_find_entry+0x2d4>)
 80088ca:	4613      	mov	r3, r2
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4413      	add	r3, r2
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	440b      	add	r3, r1
 80088d4:	3308      	adds	r3, #8
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d102      	bne.n	80088e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80088de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80088e2:	e100      	b.n	8008ae6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d140      	bne.n	800896c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80088ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088ee:	4980      	ldr	r1, [pc, #512]	; (8008af0 <etharp_find_entry+0x2d4>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	4413      	add	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01a      	beq.n	8008936 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8008900:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008904:	497a      	ldr	r1, [pc, #488]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008906:	4613      	mov	r3, r2
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	4413      	add	r3, r2
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	440b      	add	r3, r1
 8008910:	3312      	adds	r3, #18
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	8bba      	ldrh	r2, [r7, #28]
 8008916:	429a      	cmp	r2, r3
 8008918:	d845      	bhi.n	80089a6 <etharp_find_entry+0x18a>
            old_queue = i;
 800891a:	8c3b      	ldrh	r3, [r7, #32]
 800891c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800891e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008922:	4973      	ldr	r1, [pc, #460]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008924:	4613      	mov	r3, r2
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	4413      	add	r3, r2
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	440b      	add	r3, r1
 800892e:	3312      	adds	r3, #18
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	83bb      	strh	r3, [r7, #28]
 8008934:	e037      	b.n	80089a6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800893a:	496d      	ldr	r1, [pc, #436]	; (8008af0 <etharp_find_entry+0x2d4>)
 800893c:	4613      	mov	r3, r2
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	4413      	add	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	440b      	add	r3, r1
 8008946:	3312      	adds	r3, #18
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	8b7a      	ldrh	r2, [r7, #26]
 800894c:	429a      	cmp	r2, r3
 800894e:	d82a      	bhi.n	80089a6 <etharp_find_entry+0x18a>
            old_pending = i;
 8008950:	8c3b      	ldrh	r3, [r7, #32]
 8008952:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008954:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008958:	4965      	ldr	r1, [pc, #404]	; (8008af0 <etharp_find_entry+0x2d4>)
 800895a:	4613      	mov	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	4413      	add	r3, r2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	440b      	add	r3, r1
 8008964:	3312      	adds	r3, #18
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	837b      	strh	r3, [r7, #26]
 800896a:	e01c      	b.n	80089a6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d919      	bls.n	80089a6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008976:	495e      	ldr	r1, [pc, #376]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008978:	4613      	mov	r3, r2
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	4413      	add	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	440b      	add	r3, r1
 8008982:	3312      	adds	r3, #18
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	8b3a      	ldrh	r2, [r7, #24]
 8008988:	429a      	cmp	r2, r3
 800898a:	d80c      	bhi.n	80089a6 <etharp_find_entry+0x18a>
            old_stable = i;
 800898c:	8c3b      	ldrh	r3, [r7, #32]
 800898e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008990:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008994:	4956      	ldr	r1, [pc, #344]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008996:	4613      	mov	r3, r2
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	4413      	add	r3, r2
 800899c:	00db      	lsls	r3, r3, #3
 800899e:	440b      	add	r3, r1
 80089a0:	3312      	adds	r3, #18
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80089a6:	8c3b      	ldrh	r3, [r7, #32]
 80089a8:	3301      	adds	r3, #1
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	843b      	strh	r3, [r7, #32]
 80089ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	f77f af4c 	ble.w	8008850 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d108      	bne.n	80089d4 <etharp_find_entry+0x1b8>
 80089c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80089c6:	2b0a      	cmp	r3, #10
 80089c8:	d107      	bne.n	80089da <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d102      	bne.n	80089da <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
 80089d8:	e085      	b.n	8008ae6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80089da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80089de:	2b09      	cmp	r3, #9
 80089e0:	dc02      	bgt.n	80089e8 <etharp_find_entry+0x1cc>
    i = empty;
 80089e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089e4:	843b      	strh	r3, [r7, #32]
 80089e6:	e039      	b.n	8008a5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80089e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	dc14      	bgt.n	8008a1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80089f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80089f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089f8:	493d      	ldr	r1, [pc, #244]	; (8008af0 <etharp_find_entry+0x2d4>)
 80089fa:	4613      	mov	r3, r2
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	4413      	add	r3, r2
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	440b      	add	r3, r1
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d018      	beq.n	8008a3c <etharp_find_entry+0x220>
 8008a0a:	4b3a      	ldr	r3, [pc, #232]	; (8008af4 <etharp_find_entry+0x2d8>)
 8008a0c:	f240 126d 	movw	r2, #365	; 0x16d
 8008a10:	493b      	ldr	r1, [pc, #236]	; (8008b00 <etharp_find_entry+0x2e4>)
 8008a12:	483a      	ldr	r0, [pc, #232]	; (8008afc <etharp_find_entry+0x2e0>)
 8008a14:	f002 f9e0 	bl	800add8 <iprintf>
 8008a18:	e010      	b.n	8008a3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008a1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008a1e:	2b09      	cmp	r3, #9
 8008a20:	dc02      	bgt.n	8008a28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008a22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a24:	843b      	strh	r3, [r7, #32]
 8008a26:	e009      	b.n	8008a3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008a28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	dc02      	bgt.n	8008a36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008a30:	8bfb      	ldrh	r3, [r7, #30]
 8008a32:	843b      	strh	r3, [r7, #32]
 8008a34:	e002      	b.n	8008a3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008a36:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3a:	e054      	b.n	8008ae6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008a3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a40:	2b09      	cmp	r3, #9
 8008a42:	dd06      	ble.n	8008a52 <etharp_find_entry+0x236>
 8008a44:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <etharp_find_entry+0x2d8>)
 8008a46:	f240 127f 	movw	r2, #383	; 0x17f
 8008a4a:	492e      	ldr	r1, [pc, #184]	; (8008b04 <etharp_find_entry+0x2e8>)
 8008a4c:	482b      	ldr	r0, [pc, #172]	; (8008afc <etharp_find_entry+0x2e0>)
 8008a4e:	f002 f9c3 	bl	800add8 <iprintf>
    etharp_free_entry(i);
 8008a52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fe06 	bl	8008668 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008a5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	dd06      	ble.n	8008a72 <etharp_find_entry+0x256>
 8008a64:	4b23      	ldr	r3, [pc, #140]	; (8008af4 <etharp_find_entry+0x2d8>)
 8008a66:	f240 1283 	movw	r2, #387	; 0x183
 8008a6a:	4926      	ldr	r1, [pc, #152]	; (8008b04 <etharp_find_entry+0x2e8>)
 8008a6c:	4823      	ldr	r0, [pc, #140]	; (8008afc <etharp_find_entry+0x2e0>)
 8008a6e:	f002 f9b3 	bl	800add8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a76:	491e      	ldr	r1, [pc, #120]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	440b      	add	r3, r1
 8008a82:	3314      	adds	r3, #20
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d006      	beq.n	8008a98 <etharp_find_entry+0x27c>
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <etharp_find_entry+0x2d8>)
 8008a8c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008a90:	491d      	ldr	r1, [pc, #116]	; (8008b08 <etharp_find_entry+0x2ec>)
 8008a92:	481a      	ldr	r0, [pc, #104]	; (8008afc <etharp_find_entry+0x2e0>)
 8008a94:	f002 f9a0 	bl	800add8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6819      	ldr	r1, [r3, #0]
 8008aa6:	4812      	ldr	r0, [pc, #72]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	4403      	add	r3, r0
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8008ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008aba:	490d      	ldr	r1, [pc, #52]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008abc:	4613      	mov	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	4413      	add	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3312      	adds	r3, #18
 8008ac8:	2200      	movs	r2, #0
 8008aca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008acc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ad0:	4907      	ldr	r1, [pc, #28]	; (8008af0 <etharp_find_entry+0x2d4>)
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	440b      	add	r3, r1
 8008adc:	3308      	adds	r3, #8
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008ae2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3728      	adds	r7, #40	; 0x28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200000f0 	.word	0x200000f0
 8008af4:	0800cd40 	.word	0x0800cd40
 8008af8:	0800cd78 	.word	0x0800cd78
 8008afc:	0800cdb8 	.word	0x0800cdb8
 8008b00:	0800cde0 	.word	0x0800cde0
 8008b04:	0800cdf8 	.word	0x0800cdf8
 8008b08:	0800ce0c 	.word	0x0800ce0c

08008b0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b20:	2b06      	cmp	r3, #6
 8008b22:	d006      	beq.n	8008b32 <etharp_update_arp_entry+0x26>
 8008b24:	4b48      	ldr	r3, [pc, #288]	; (8008c48 <etharp_update_arp_entry+0x13c>)
 8008b26:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008b2a:	4948      	ldr	r1, [pc, #288]	; (8008c4c <etharp_update_arp_entry+0x140>)
 8008b2c:	4848      	ldr	r0, [pc, #288]	; (8008c50 <etharp_update_arp_entry+0x144>)
 8008b2e:	f002 f953 	bl	800add8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d012      	beq.n	8008b5e <etharp_update_arp_entry+0x52>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00e      	beq.n	8008b5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 f8f4 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8008b4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008b5a:	2be0      	cmp	r3, #224	; 0xe0
 8008b5c:	d102      	bne.n	8008b64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008b5e:	f06f 030f 	mvn.w	r3, #15
 8008b62:	e06c      	b.n	8008c3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	68b8      	ldr	r0, [r7, #8]
 8008b6c:	f7ff fe56 	bl	800881c <etharp_find_entry>
 8008b70:	4603      	mov	r3, r0
 8008b72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008b74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da02      	bge.n	8008b82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8008b7c:	8afb      	ldrh	r3, [r7, #22]
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	e05d      	b.n	8008c3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008b82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b86:	4933      	ldr	r1, [pc, #204]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4413      	add	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	440b      	add	r3, r1
 8008b92:	3314      	adds	r3, #20
 8008b94:	2202      	movs	r2, #2
 8008b96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008b98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b9c:	492d      	ldr	r1, [pc, #180]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	4413      	add	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	440b      	add	r3, r1
 8008ba8:	3308      	adds	r3, #8
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008bae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	3308      	adds	r3, #8
 8008bbc:	4a25      	ldr	r2, [pc, #148]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	2206      	movs	r2, #6
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f002 f846 	bl	800ac58 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8008bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008bd0:	4920      	ldr	r1, [pc, #128]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	4413      	add	r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	440b      	add	r3, r1
 8008bdc:	3312      	adds	r3, #18
 8008bde:	2200      	movs	r2, #0
 8008be0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8008be2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008be6:	491b      	ldr	r1, [pc, #108]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008be8:	4613      	mov	r3, r2
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	4413      	add	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	440b      	add	r3, r1
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d021      	beq.n	8008c3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008bf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008bfc:	4915      	ldr	r1, [pc, #84]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	440b      	add	r3, r1
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008c0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008c10:	4910      	ldr	r1, [pc, #64]	; (8008c54 <etharp_update_arp_entry+0x148>)
 8008c12:	4613      	mov	r3, r2
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	4413      	add	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	440b      	add	r3, r1
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6939      	ldr	r1, [r7, #16]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f001 ff87 	bl	800ab44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008c36:	6938      	ldr	r0, [r7, #16]
 8008c38:	f7fe fa1c 	bl	8007074 <pbuf_free>
  }
  return ERR_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	0800cd40 	.word	0x0800cd40
 8008c4c:	0800ce38 	.word	0x0800ce38
 8008c50:	0800cdb8 	.word	0x0800cdb8
 8008c54:	200000f0 	.word	0x200000f0

08008c58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e01e      	b.n	8008ca4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008c66:	4913      	ldr	r1, [pc, #76]	; (8008cb4 <etharp_cleanup_netif+0x5c>)
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	440b      	add	r3, r1
 8008c74:	3314      	adds	r3, #20
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008c7a:	7afb      	ldrb	r3, [r7, #11]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00e      	beq.n	8008c9e <etharp_cleanup_netif+0x46>
 8008c80:	490c      	ldr	r1, [pc, #48]	; (8008cb4 <etharp_cleanup_netif+0x5c>)
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	4413      	add	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	440b      	add	r3, r1
 8008c8e:	3308      	adds	r3, #8
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d102      	bne.n	8008c9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fce5 	bl	8008668 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b09      	cmp	r3, #9
 8008ca8:	dddd      	ble.n	8008c66 <etharp_cleanup_netif+0xe>
    }
  }
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200000f0 	.word	0x200000f0

08008cb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008cb8:	b5b0      	push	{r4, r5, r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d107      	bne.n	8008cd8 <etharp_input+0x20>
 8008cc8:	4b3d      	ldr	r3, [pc, #244]	; (8008dc0 <etharp_input+0x108>)
 8008cca:	f240 228a 	movw	r2, #650	; 0x28a
 8008cce:	493d      	ldr	r1, [pc, #244]	; (8008dc4 <etharp_input+0x10c>)
 8008cd0:	483d      	ldr	r0, [pc, #244]	; (8008dc8 <etharp_input+0x110>)
 8008cd2:	f002 f881 	bl	800add8 <iprintf>
 8008cd6:	e06f      	b.n	8008db8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce8:	d10c      	bne.n	8008d04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008cee:	2b06      	cmp	r3, #6
 8008cf0:	d108      	bne.n	8008d04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d104      	bne.n	8008d04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d003      	beq.n	8008d0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fe f9b5 	bl	8007074 <pbuf_free>
    return;
 8008d0a:	e055      	b.n	8008db8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	330e      	adds	r3, #14
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3318      	adds	r3, #24
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <etharp_input+0x74>
    for_us = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]
 8008d2a:	e009      	b.n	8008d40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f103 0208 	add.w	r2, r3, #8
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <etharp_input+0x98>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <etharp_input+0x9a>
 8008d50:	2302      	movs	r3, #2
 8008d52:	f107 010c 	add.w	r1, r7, #12
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f7ff fed8 	bl	8008b0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	88db      	ldrh	r3, [r3, #6]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d003      	beq.n	8008d70 <etharp_input+0xb8>
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	d01e      	beq.n	8008dac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008d6e:	e020      	b.n	8008db2 <etharp_input+0xfa>
      if (for_us) {
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01c      	beq.n	8008db0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008d90:	2102      	movs	r1, #2
 8008d92:	9103      	str	r1, [sp, #12]
 8008d94:	f107 010c 	add.w	r1, r7, #12
 8008d98:	9102      	str	r1, [sp, #8]
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	462b      	mov	r3, r5
 8008da0:	4622      	mov	r2, r4
 8008da2:	4601      	mov	r1, r0
 8008da4:	6838      	ldr	r0, [r7, #0]
 8008da6:	f000 faeb 	bl	8009380 <etharp_raw>
      break;
 8008daa:	e001      	b.n	8008db0 <etharp_input+0xf8>
      break;
 8008dac:	bf00      	nop
 8008dae:	e000      	b.n	8008db2 <etharp_input+0xfa>
      break;
 8008db0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe f95e 	bl	8007074 <pbuf_free>
}
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0800cd40 	.word	0x0800cd40
 8008dc4:	0800ce90 	.word	0x0800ce90
 8008dc8:	0800cdb8 	.word	0x0800cdb8

08008dcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008dda:	79fa      	ldrb	r2, [r7, #7]
 8008ddc:	4944      	ldr	r1, [pc, #272]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008dde:	4613      	mov	r3, r2
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4413      	add	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	440b      	add	r3, r1
 8008de8:	3314      	adds	r3, #20
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d806      	bhi.n	8008dfe <etharp_output_to_arp_index+0x32>
 8008df0:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <etharp_output_to_arp_index+0x128>)
 8008df2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008df6:	4940      	ldr	r1, [pc, #256]	; (8008ef8 <etharp_output_to_arp_index+0x12c>)
 8008df8:	4840      	ldr	r0, [pc, #256]	; (8008efc <etharp_output_to_arp_index+0x130>)
 8008dfa:	f001 ffed 	bl	800add8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008dfe:	79fa      	ldrb	r2, [r7, #7]
 8008e00:	493b      	ldr	r1, [pc, #236]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e02:	4613      	mov	r3, r2
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	4413      	add	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	440b      	add	r3, r1
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d153      	bne.n	8008ebc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008e14:	79fa      	ldrb	r2, [r7, #7]
 8008e16:	4936      	ldr	r1, [pc, #216]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e18:	4613      	mov	r3, r2
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	4413      	add	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	440b      	add	r3, r1
 8008e22:	3312      	adds	r3, #18
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008e2a:	d919      	bls.n	8008e60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008e2c:	79fa      	ldrb	r2, [r7, #7]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4a2e      	ldr	r2, [pc, #184]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 fb4c 	bl	80094dc <etharp_request>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d138      	bne.n	8008ebc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008e4a:	79fa      	ldrb	r2, [r7, #7]
 8008e4c:	4928      	ldr	r1, [pc, #160]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e4e:	4613      	mov	r3, r2
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	3314      	adds	r3, #20
 8008e5a:	2203      	movs	r2, #3
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	e02d      	b.n	8008ebc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008e60:	79fa      	ldrb	r2, [r7, #7]
 8008e62:	4923      	ldr	r1, [pc, #140]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e64:	4613      	mov	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	4413      	add	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3312      	adds	r3, #18
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008e76:	d321      	bcc.n	8008ebc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008e78:	79fa      	ldrb	r2, [r7, #7]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4413      	add	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e84:	4413      	add	r3, r2
 8008e86:	1d19      	adds	r1, r3, #4
 8008e88:	79fa      	ldrb	r2, [r7, #7]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	3308      	adds	r3, #8
 8008e94:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008e96:	4413      	add	r3, r2
 8008e98:	3304      	adds	r3, #4
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fafb 	bl	8009498 <etharp_request_dst>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008ea8:	79fa      	ldrb	r2, [r7, #7]
 8008eaa:	4911      	ldr	r1, [pc, #68]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	00db      	lsls	r3, r3, #3
 8008eb4:	440b      	add	r3, r1
 8008eb6:	3314      	adds	r3, #20
 8008eb8:	2203      	movs	r2, #3
 8008eba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008ec2:	79fa      	ldrb	r2, [r7, #7]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	4413      	add	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	3308      	adds	r3, #8
 8008ece:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <etharp_output_to_arp_index+0x124>)
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed8:	9200      	str	r2, [sp, #0]
 8008eda:	460a      	mov	r2, r1
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f001 fe30 	bl	800ab44 <ethernet_output>
 8008ee4:	4603      	mov	r3, r0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	200000f0 	.word	0x200000f0
 8008ef4:	0800cd40 	.word	0x0800cd40
 8008ef8:	0800ceb0 	.word	0x0800ceb0
 8008efc:	0800cdb8 	.word	0x0800cdb8

08008f00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08a      	sub	sp, #40	; 0x28
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <etharp_output+0x24>
 8008f16:	4b73      	ldr	r3, [pc, #460]	; (80090e4 <etharp_output+0x1e4>)
 8008f18:	f240 321e 	movw	r2, #798	; 0x31e
 8008f1c:	4972      	ldr	r1, [pc, #456]	; (80090e8 <etharp_output+0x1e8>)
 8008f1e:	4873      	ldr	r0, [pc, #460]	; (80090ec <etharp_output+0x1ec>)
 8008f20:	f001 ff5a 	bl	800add8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <etharp_output+0x38>
 8008f2a:	4b6e      	ldr	r3, [pc, #440]	; (80090e4 <etharp_output+0x1e4>)
 8008f2c:	f240 321f 	movw	r2, #799	; 0x31f
 8008f30:	496f      	ldr	r1, [pc, #444]	; (80090f0 <etharp_output+0x1f0>)
 8008f32:	486e      	ldr	r0, [pc, #440]	; (80090ec <etharp_output+0x1ec>)
 8008f34:	f001 ff50 	bl	800add8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <etharp_output+0x4c>
 8008f3e:	4b69      	ldr	r3, [pc, #420]	; (80090e4 <etharp_output+0x1e4>)
 8008f40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008f44:	496b      	ldr	r1, [pc, #428]	; (80090f4 <etharp_output+0x1f4>)
 8008f46:	4869      	ldr	r0, [pc, #420]	; (80090ec <etharp_output+0x1ec>)
 8008f48:	f001 ff46 	bl	800add8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68f9      	ldr	r1, [r7, #12]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 feee 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008f5e:	4b66      	ldr	r3, [pc, #408]	; (80090f8 <etharp_output+0x1f8>)
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	e0af      	b.n	80090c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f6c:	2be0      	cmp	r3, #224	; 0xe0
 8008f6e:	d118      	bne.n	8008fa2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008f70:	2301      	movs	r3, #1
 8008f72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008f74:	2300      	movs	r3, #0
 8008f76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008f78:	235e      	movs	r3, #94	; 0x5e
 8008f7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3303      	adds	r3, #3
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008f9a:	f107 0310 	add.w	r3, r7, #16
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	e090      	b.n	80090c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	405a      	eors	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d012      	beq.n	8008fe0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008fc0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00b      	beq.n	8008fe0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	61bb      	str	r3, [r7, #24]
 8008fd8:	e002      	b.n	8008fe0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008fda:	f06f 0303 	mvn.w	r3, #3
 8008fde:	e07d      	b.n	80090dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008fe0:	4b46      	ldr	r3, [pc, #280]	; (80090fc <etharp_output+0x1fc>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4a46      	ldr	r2, [pc, #280]	; (8009100 <etharp_output+0x200>)
 8008fe8:	460b      	mov	r3, r1
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	440b      	add	r3, r1
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d925      	bls.n	8009046 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008ffa:	4b40      	ldr	r3, [pc, #256]	; (80090fc <etharp_output+0x1fc>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	4619      	mov	r1, r3
 8009000:	4a3f      	ldr	r2, [pc, #252]	; (8009100 <etharp_output+0x200>)
 8009002:	460b      	mov	r3, r1
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	440b      	add	r3, r1
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	3308      	adds	r3, #8
 800900e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d117      	bne.n	8009046 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b38      	ldr	r3, [pc, #224]	; (80090fc <etharp_output+0x1fc>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	4937      	ldr	r1, [pc, #220]	; (8009100 <etharp_output+0x200>)
 8009022:	4603      	mov	r3, r0
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	4403      	add	r3, r0
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	440b      	add	r3, r1
 800902c:	3304      	adds	r3, #4
 800902e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009030:	429a      	cmp	r2, r3
 8009032:	d108      	bne.n	8009046 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009034:	4b31      	ldr	r3, [pc, #196]	; (80090fc <etharp_output+0x1fc>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f7ff fec5 	bl	8008dcc <etharp_output_to_arp_index>
 8009042:	4603      	mov	r3, r0
 8009044:	e04a      	b.n	80090dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009046:	2300      	movs	r3, #0
 8009048:	75fb      	strb	r3, [r7, #23]
 800904a:	e031      	b.n	80090b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800904c:	7dfa      	ldrb	r2, [r7, #23]
 800904e:	492c      	ldr	r1, [pc, #176]	; (8009100 <etharp_output+0x200>)
 8009050:	4613      	mov	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	3314      	adds	r3, #20
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d923      	bls.n	80090aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8009062:	7dfa      	ldrb	r2, [r7, #23]
 8009064:	4926      	ldr	r1, [pc, #152]	; (8009100 <etharp_output+0x200>)
 8009066:	4613      	mov	r3, r2
 8009068:	005b      	lsls	r3, r3, #1
 800906a:	4413      	add	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	440b      	add	r3, r1
 8009070:	3308      	adds	r3, #8
 8009072:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	429a      	cmp	r2, r3
 8009078:	d117      	bne.n	80090aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	6819      	ldr	r1, [r3, #0]
 800907e:	7dfa      	ldrb	r2, [r7, #23]
 8009080:	481f      	ldr	r0, [pc, #124]	; (8009100 <etharp_output+0x200>)
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4403      	add	r3, r0
 800908c:	3304      	adds	r3, #4
 800908e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009090:	4299      	cmp	r1, r3
 8009092:	d10a      	bne.n	80090aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009094:	4a19      	ldr	r2, [pc, #100]	; (80090fc <etharp_output+0x1fc>)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	461a      	mov	r2, r3
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff fe93 	bl	8008dcc <etharp_output_to_arp_index>
 80090a6:	4603      	mov	r3, r0
 80090a8:	e018      	b.n	80090dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
 80090ac:	3301      	adds	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b09      	cmp	r3, #9
 80090b4:	d9ca      	bls.n	800904c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f822 	bl	8009104 <etharp_query>
 80090c0:	4603      	mov	r3, r0
 80090c2:	e00b      	b.n	80090dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80090ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f001 fd35 	bl	800ab44 <ethernet_output>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	0800cd40 	.word	0x0800cd40
 80090e8:	0800ce90 	.word	0x0800ce90
 80090ec:	0800cdb8 	.word	0x0800cdb8
 80090f0:	0800cee0 	.word	0x0800cee0
 80090f4:	0800ce80 	.word	0x0800ce80
 80090f8:	0800d4a0 	.word	0x0800d4a0
 80090fc:	200001e0 	.word	0x200001e0
 8009100:	200000f0 	.word	0x200000f0

08009104 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08c      	sub	sp, #48	; 0x30
 8009108:	af02      	add	r7, sp, #8
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3326      	adds	r3, #38	; 0x26
 8009114:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009116:	23ff      	movs	r3, #255	; 0xff
 8009118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fe04 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10c      	bne.n	800914c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800913a:	2be0      	cmp	r3, #224	; 0xe0
 800913c:	d006      	beq.n	800914c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800914c:	f06f 030f 	mvn.w	r3, #15
 8009150:	e101      	b.n	8009356 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	2101      	movs	r1, #1
 8009156:	68b8      	ldr	r0, [r7, #8]
 8009158:	f7ff fb60 	bl	800881c <etharp_find_entry>
 800915c:	4603      	mov	r3, r0
 800915e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009160:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009164:	2b00      	cmp	r3, #0
 8009166:	da02      	bge.n	800916e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009168:	8a7b      	ldrh	r3, [r7, #18]
 800916a:	b25b      	sxtb	r3, r3
 800916c:	e0f3      	b.n	8009356 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800916e:	8a7b      	ldrh	r3, [r7, #18]
 8009170:	2b7e      	cmp	r3, #126	; 0x7e
 8009172:	d906      	bls.n	8009182 <etharp_query+0x7e>
 8009174:	4b7a      	ldr	r3, [pc, #488]	; (8009360 <etharp_query+0x25c>)
 8009176:	f240 32c1 	movw	r2, #961	; 0x3c1
 800917a:	497a      	ldr	r1, [pc, #488]	; (8009364 <etharp_query+0x260>)
 800917c:	487a      	ldr	r0, [pc, #488]	; (8009368 <etharp_query+0x264>)
 800917e:	f001 fe2b 	bl	800add8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009182:	8a7b      	ldrh	r3, [r7, #18]
 8009184:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009186:	7c7a      	ldrb	r2, [r7, #17]
 8009188:	4978      	ldr	r1, [pc, #480]	; (800936c <etharp_query+0x268>)
 800918a:	4613      	mov	r3, r2
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	3314      	adds	r3, #20
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d115      	bne.n	80091c8 <etharp_query+0xc4>
    is_new_entry = 1;
 800919c:	2301      	movs	r3, #1
 800919e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80091a0:	7c7a      	ldrb	r2, [r7, #17]
 80091a2:	4972      	ldr	r1, [pc, #456]	; (800936c <etharp_query+0x268>)
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	440b      	add	r3, r1
 80091ae:	3314      	adds	r3, #20
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80091b4:	7c7a      	ldrb	r2, [r7, #17]
 80091b6:	496d      	ldr	r1, [pc, #436]	; (800936c <etharp_query+0x268>)
 80091b8:	4613      	mov	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	4413      	add	r3, r2
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	440b      	add	r3, r1
 80091c2:	3308      	adds	r3, #8
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80091c8:	7c7a      	ldrb	r2, [r7, #17]
 80091ca:	4968      	ldr	r1, [pc, #416]	; (800936c <etharp_query+0x268>)
 80091cc:	4613      	mov	r3, r2
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	4413      	add	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	440b      	add	r3, r1
 80091d6:	3314      	adds	r3, #20
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d011      	beq.n	8009202 <etharp_query+0xfe>
 80091de:	7c7a      	ldrb	r2, [r7, #17]
 80091e0:	4962      	ldr	r1, [pc, #392]	; (800936c <etharp_query+0x268>)
 80091e2:	4613      	mov	r3, r2
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	440b      	add	r3, r1
 80091ec:	3314      	adds	r3, #20
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d806      	bhi.n	8009202 <etharp_query+0xfe>
 80091f4:	4b5a      	ldr	r3, [pc, #360]	; (8009360 <etharp_query+0x25c>)
 80091f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80091fa:	495d      	ldr	r1, [pc, #372]	; (8009370 <etharp_query+0x26c>)
 80091fc:	485a      	ldr	r0, [pc, #360]	; (8009368 <etharp_query+0x264>)
 80091fe:	f001 fdeb 	bl	800add8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <etharp_query+0x10a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10c      	bne.n	8009228 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f963 	bl	80094dc <etharp_request>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <etharp_query+0x124>
      return result;
 8009222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009226:	e096      	b.n	8009356 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <etharp_query+0x138>
 800922e:	4b4c      	ldr	r3, [pc, #304]	; (8009360 <etharp_query+0x25c>)
 8009230:	f240 32e1 	movw	r2, #993	; 0x3e1
 8009234:	494f      	ldr	r1, [pc, #316]	; (8009374 <etharp_query+0x270>)
 8009236:	484c      	ldr	r0, [pc, #304]	; (8009368 <etharp_query+0x264>)
 8009238:	f001 fdce 	bl	800add8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800923c:	7c7a      	ldrb	r2, [r7, #17]
 800923e:	494b      	ldr	r1, [pc, #300]	; (800936c <etharp_query+0x268>)
 8009240:	4613      	mov	r3, r2
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	4413      	add	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	440b      	add	r3, r1
 800924a:	3314      	adds	r3, #20
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d917      	bls.n	8009282 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009252:	4a49      	ldr	r2, [pc, #292]	; (8009378 <etharp_query+0x274>)
 8009254:	7c7b      	ldrb	r3, [r7, #17]
 8009256:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009258:	7c7a      	ldrb	r2, [r7, #17]
 800925a:	4613      	mov	r3, r2
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	4413      	add	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	3308      	adds	r3, #8
 8009264:	4a41      	ldr	r2, [pc, #260]	; (800936c <etharp_query+0x268>)
 8009266:	4413      	add	r3, r2
 8009268:	3304      	adds	r3, #4
 800926a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800926e:	9200      	str	r2, [sp, #0]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f001 fc65 	bl	800ab44 <ethernet_output>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009280:	e067      	b.n	8009352 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009282:	7c7a      	ldrb	r2, [r7, #17]
 8009284:	4939      	ldr	r1, [pc, #228]	; (800936c <etharp_query+0x268>)
 8009286:	4613      	mov	r3, r2
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4413      	add	r3, r2
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	440b      	add	r3, r1
 8009290:	3314      	adds	r3, #20
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d15c      	bne.n	8009352 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80092a0:	e01c      	b.n	80092dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	895a      	ldrh	r2, [r3, #10]
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	891b      	ldrh	r3, [r3, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d10a      	bne.n	80092c4 <etharp_query+0x1c0>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d006      	beq.n	80092c4 <etharp_query+0x1c0>
 80092b6:	4b2a      	ldr	r3, [pc, #168]	; (8009360 <etharp_query+0x25c>)
 80092b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80092bc:	492f      	ldr	r1, [pc, #188]	; (800937c <etharp_query+0x278>)
 80092be:	482a      	ldr	r0, [pc, #168]	; (8009368 <etharp_query+0x264>)
 80092c0:	f001 fd8a 	bl	800add8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	7b1b      	ldrb	r3, [r3, #12]
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80092d0:	2301      	movs	r3, #1
 80092d2:	61bb      	str	r3, [r7, #24]
        break;
 80092d4:	e005      	b.n	80092e2 <etharp_query+0x1de>
      }
      p = p->next;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1df      	bne.n	80092a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d007      	beq.n	80092f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80092ee:	200e      	movs	r0, #14
 80092f0:	f7fe f9e8 	bl	80076c4 <pbuf_clone>
 80092f4:	61f8      	str	r0, [r7, #28]
 80092f6:	e004      	b.n	8009302 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80092fc:	69f8      	ldr	r0, [r7, #28]
 80092fe:	f7fd ff59 	bl	80071b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d021      	beq.n	800934c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009308:	7c7a      	ldrb	r2, [r7, #17]
 800930a:	4918      	ldr	r1, [pc, #96]	; (800936c <etharp_query+0x268>)
 800930c:	4613      	mov	r3, r2
 800930e:	005b      	lsls	r3, r3, #1
 8009310:	4413      	add	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	440b      	add	r3, r1
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800931c:	7c7a      	ldrb	r2, [r7, #17]
 800931e:	4913      	ldr	r1, [pc, #76]	; (800936c <etharp_query+0x268>)
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f7fd fea1 	bl	8007074 <pbuf_free>
      }
      arp_table[i].q = p;
 8009332:	7c7a      	ldrb	r2, [r7, #17]
 8009334:	490d      	ldr	r1, [pc, #52]	; (800936c <etharp_query+0x268>)
 8009336:	4613      	mov	r3, r2
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	4413      	add	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	440b      	add	r3, r1
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800934a:	e002      	b.n	8009352 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800934c:	23ff      	movs	r3, #255	; 0xff
 800934e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009356:	4618      	mov	r0, r3
 8009358:	3728      	adds	r7, #40	; 0x28
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	0800cd40 	.word	0x0800cd40
 8009364:	0800ceec 	.word	0x0800ceec
 8009368:	0800cdb8 	.word	0x0800cdb8
 800936c:	200000f0 	.word	0x200000f0
 8009370:	0800cefc 	.word	0x0800cefc
 8009374:	0800cee0 	.word	0x0800cee0
 8009378:	200001e0 	.word	0x200001e0
 800937c:	0800cf24 	.word	0x0800cf24

08009380 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af02      	add	r7, sp, #8
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <etharp_raw+0x26>
 8009398:	4b3a      	ldr	r3, [pc, #232]	; (8009484 <etharp_raw+0x104>)
 800939a:	f240 4257 	movw	r2, #1111	; 0x457
 800939e:	493a      	ldr	r1, [pc, #232]	; (8009488 <etharp_raw+0x108>)
 80093a0:	483a      	ldr	r0, [pc, #232]	; (800948c <etharp_raw+0x10c>)
 80093a2:	f001 fd19 	bl	800add8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80093a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80093aa:	211c      	movs	r1, #28
 80093ac:	200e      	movs	r0, #14
 80093ae:	f7fd fb7f 	bl	8006ab0 <pbuf_alloc>
 80093b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80093ba:	f04f 33ff 	mov.w	r3, #4294967295
 80093be:	e05d      	b.n	800947c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	895b      	ldrh	r3, [r3, #10]
 80093c4:	2b1b      	cmp	r3, #27
 80093c6:	d806      	bhi.n	80093d6 <etharp_raw+0x56>
 80093c8:	4b2e      	ldr	r3, [pc, #184]	; (8009484 <etharp_raw+0x104>)
 80093ca:	f240 4262 	movw	r2, #1122	; 0x462
 80093ce:	4930      	ldr	r1, [pc, #192]	; (8009490 <etharp_raw+0x110>)
 80093d0:	482e      	ldr	r0, [pc, #184]	; (800948c <etharp_raw+0x10c>)
 80093d2:	f001 fd01 	bl	800add8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80093dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fc fb7e 	bl	8005ae0 <lwip_htons>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093f2:	2b06      	cmp	r3, #6
 80093f4:	d006      	beq.n	8009404 <etharp_raw+0x84>
 80093f6:	4b23      	ldr	r3, [pc, #140]	; (8009484 <etharp_raw+0x104>)
 80093f8:	f240 4269 	movw	r2, #1129	; 0x469
 80093fc:	4925      	ldr	r1, [pc, #148]	; (8009494 <etharp_raw+0x114>)
 80093fe:	4823      	ldr	r0, [pc, #140]	; (800948c <etharp_raw+0x10c>)
 8009400:	f001 fcea 	bl	800add8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	3308      	adds	r3, #8
 8009408:	2206      	movs	r2, #6
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f001 fc23 	bl	800ac58 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	3312      	adds	r3, #18
 8009416:	2206      	movs	r2, #6
 8009418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941a:	4618      	mov	r0, r3
 800941c:	f001 fc1c 	bl	800ac58 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	330e      	adds	r3, #14
 8009424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3318      	adds	r3, #24
 800942e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
 800943a:	2200      	movs	r2, #0
 800943c:	f042 0201 	orr.w	r2, r2, #1
 8009440:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2200      	movs	r2, #0
 8009446:	f042 0208 	orr.w	r2, r2, #8
 800944a:	709a      	strb	r2, [r3, #2]
 800944c:	2200      	movs	r2, #0
 800944e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2206      	movs	r2, #6
 8009454:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2204      	movs	r2, #4
 800945a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800945c:	f640 0306 	movw	r3, #2054	; 0x806
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	69b9      	ldr	r1, [r7, #24]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f001 fb6b 	bl	800ab44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800946e:	69b8      	ldr	r0, [r7, #24]
 8009470:	f7fd fe00 	bl	8007074 <pbuf_free>
  p = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009478:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	0800cd40 	.word	0x0800cd40
 8009488:	0800ce90 	.word	0x0800ce90
 800948c:	0800cdb8 	.word	0x0800cdb8
 8009490:	0800cf40 	.word	0x0800cf40
 8009494:	0800cf74 	.word	0x0800cf74

08009498 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af04      	add	r7, sp, #16
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80094b4:	2201      	movs	r2, #1
 80094b6:	9203      	str	r2, [sp, #12]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	9202      	str	r2, [sp, #8]
 80094bc:	4a06      	ldr	r2, [pc, #24]	; (80094d8 <etharp_request_dst+0x40>)
 80094be:	9201      	str	r2, [sp, #4]
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4603      	mov	r3, r0
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ff5a 	bl	8009380 <etharp_raw>
 80094cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	0800d4a8 	.word	0x0800d4a8

080094dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80094e6:	4a05      	ldr	r2, [pc, #20]	; (80094fc <etharp_request+0x20>)
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff ffd4 	bl	8009498 <etharp_request_dst>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	0800d4a0 	.word	0x0800d4a0

08009500 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af04      	add	r7, sp, #16
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800950a:	4b79      	ldr	r3, [pc, #484]	; (80096f0 <icmp_input+0x1f0>)
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	b2db      	uxtb	r3, r3
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	b2db      	uxtb	r3, r3
 800951e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009522:	2b13      	cmp	r3, #19
 8009524:	f240 80cd 	bls.w	80096c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	895b      	ldrh	r3, [r3, #10]
 800952c:	2b03      	cmp	r3, #3
 800952e:	f240 80ca 	bls.w	80096c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800953c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80b7 	beq.w	80096b4 <icmp_input+0x1b4>
 8009546:	2b08      	cmp	r3, #8
 8009548:	f040 80b7 	bne.w	80096ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800954c:	4b69      	ldr	r3, [pc, #420]	; (80096f4 <icmp_input+0x1f4>)
 800954e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009550:	4b67      	ldr	r3, [pc, #412]	; (80096f0 <icmp_input+0x1f0>)
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009558:	2be0      	cmp	r3, #224	; 0xe0
 800955a:	f000 80bb 	beq.w	80096d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800955e:	4b64      	ldr	r3, [pc, #400]	; (80096f0 <icmp_input+0x1f0>)
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	4a63      	ldr	r2, [pc, #396]	; (80096f0 <icmp_input+0x1f0>)
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fbe3 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 80b1 	bne.w	80096d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	891b      	ldrh	r3, [r3, #8]
 800957a:	2b07      	cmp	r3, #7
 800957c:	f240 80a5 	bls.w	80096ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009582:	330e      	adds	r3, #14
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fd fcde 	bl	8006f48 <pbuf_add_header>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d04b      	beq.n	800962a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	891a      	ldrh	r2, [r3, #8]
 8009596:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009598:	4413      	add	r3, r2
 800959a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	891b      	ldrh	r3, [r3, #8]
 80095a0:	8b7a      	ldrh	r2, [r7, #26]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	f0c0 809a 	bcc.w	80096dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80095a8:	8b7b      	ldrh	r3, [r7, #26]
 80095aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095ae:	4619      	mov	r1, r3
 80095b0:	200e      	movs	r0, #14
 80095b2:	f7fd fa7d 	bl	8006ab0 <pbuf_alloc>
 80095b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8090 	beq.w	80096e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	895b      	ldrh	r3, [r3, #10]
 80095c4:	461a      	mov	r2, r3
 80095c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095c8:	3308      	adds	r3, #8
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d203      	bcs.n	80095d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80095ce:	6978      	ldr	r0, [r7, #20]
 80095d0:	f7fd fd50 	bl	8007074 <pbuf_free>
          goto icmperr;
 80095d4:	e085      	b.n	80096e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fb3a 	bl	800ac58 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80095e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095e6:	4619      	mov	r1, r3
 80095e8:	6978      	ldr	r0, [r7, #20]
 80095ea:	f7fd fcbd 	bl	8006f68 <pbuf_remove_header>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d009      	beq.n	8009608 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80095f4:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <icmp_input+0x1f8>)
 80095f6:	22b6      	movs	r2, #182	; 0xb6
 80095f8:	4940      	ldr	r1, [pc, #256]	; (80096fc <icmp_input+0x1fc>)
 80095fa:	4841      	ldr	r0, [pc, #260]	; (8009700 <icmp_input+0x200>)
 80095fc:	f001 fbec 	bl	800add8 <iprintf>
          pbuf_free(r);
 8009600:	6978      	ldr	r0, [r7, #20]
 8009602:	f7fd fd37 	bl	8007074 <pbuf_free>
          goto icmperr;
 8009606:	e06c      	b.n	80096e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	6978      	ldr	r0, [r7, #20]
 800960c:	f7fd fe5a 	bl	80072c4 <pbuf_copy>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009616:	6978      	ldr	r0, [r7, #20]
 8009618:	f7fd fd2c 	bl	8007074 <pbuf_free>
          goto icmperr;
 800961c:	e061      	b.n	80096e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7fd fd28 	bl	8007074 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	607b      	str	r3, [r7, #4]
 8009628:	e00f      	b.n	800964a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800962a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800962c:	330e      	adds	r3, #14
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7fd fc99 	bl	8006f68 <pbuf_remove_header>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800963c:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <icmp_input+0x1f8>)
 800963e:	22c7      	movs	r2, #199	; 0xc7
 8009640:	4930      	ldr	r1, [pc, #192]	; (8009704 <icmp_input+0x204>)
 8009642:	482f      	ldr	r0, [pc, #188]	; (8009700 <icmp_input+0x200>)
 8009644:	f001 fbc8 	bl	800add8 <iprintf>
          goto icmperr;
 8009648:	e04b      	b.n	80096e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7fd fc77 	bl	8006f48 <pbuf_add_header>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d12b      	bne.n	80096b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800966e:	4b20      	ldr	r3, [pc, #128]	; (80096f0 <icmp_input+0x1f0>)
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	2200      	movs	r2, #0
 800967a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2200      	movs	r2, #0
 8009680:	709a      	strb	r2, [r3, #2]
 8009682:	2200      	movs	r2, #0
 8009684:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	729a      	strb	r2, [r3, #10]
 8009692:	2200      	movs	r2, #0
 8009694:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	9302      	str	r3, [sp, #8]
 800969a:	2301      	movs	r3, #1
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	2300      	movs	r3, #0
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	23ff      	movs	r3, #255	; 0xff
 80096a4:	2200      	movs	r2, #0
 80096a6:	69f9      	ldr	r1, [r7, #28]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa6b 	bl	8009b84 <ip4_output_if>
 80096ae:	4603      	mov	r3, r0
 80096b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80096b2:	e001      	b.n	80096b8 <icmp_input+0x1b8>
      break;
 80096b4:	bf00      	nop
 80096b6:	e000      	b.n	80096ba <icmp_input+0x1ba>
      break;
 80096b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fd fcda 	bl	8007074 <pbuf_free>
  return;
 80096c0:	e013      	b.n	80096ea <icmp_input+0x1ea>
    goto lenerr;
 80096c2:	bf00      	nop
 80096c4:	e002      	b.n	80096cc <icmp_input+0x1cc>
    goto lenerr;
 80096c6:	bf00      	nop
 80096c8:	e000      	b.n	80096cc <icmp_input+0x1cc>
        goto lenerr;
 80096ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7fd fcd1 	bl	8007074 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096d2:	e00a      	b.n	80096ea <icmp_input+0x1ea>
        goto icmperr;
 80096d4:	bf00      	nop
 80096d6:	e004      	b.n	80096e2 <icmp_input+0x1e2>
        goto icmperr;
 80096d8:	bf00      	nop
 80096da:	e002      	b.n	80096e2 <icmp_input+0x1e2>
          goto icmperr;
 80096dc:	bf00      	nop
 80096de:	e000      	b.n	80096e2 <icmp_input+0x1e2>
          goto icmperr;
 80096e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7fd fcc6 	bl	8007074 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80096ea:	3728      	adds	r7, #40	; 0x28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200033ec 	.word	0x200033ec
 80096f4:	20003400 	.word	0x20003400
 80096f8:	0800cfb8 	.word	0x0800cfb8
 80096fc:	0800cff0 	.word	0x0800cff0
 8009700:	0800d028 	.word	0x0800d028
 8009704:	0800d050 	.word	0x0800d050

08009708 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	461a      	mov	r2, r3
 8009718:	2103      	movs	r1, #3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f814 	bl	8009748 <icmp_send_response>
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	461a      	mov	r2, r3
 8009738:	210b      	movs	r1, #11
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f804 	bl	8009748 <icmp_send_response>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af04      	add	r7, sp, #16
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
 8009754:	4613      	mov	r3, r2
 8009756:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009758:	f44f 7220 	mov.w	r2, #640	; 0x280
 800975c:	2124      	movs	r1, #36	; 0x24
 800975e:	2022      	movs	r0, #34	; 0x22
 8009760:	f7fd f9a6 	bl	8006ab0 <pbuf_alloc>
 8009764:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d04c      	beq.n	8009806 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	895b      	ldrh	r3, [r3, #10]
 8009770:	2b23      	cmp	r3, #35	; 0x23
 8009772:	d806      	bhi.n	8009782 <icmp_send_response+0x3a>
 8009774:	4b26      	ldr	r3, [pc, #152]	; (8009810 <icmp_send_response+0xc8>)
 8009776:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800977a:	4926      	ldr	r1, [pc, #152]	; (8009814 <icmp_send_response+0xcc>)
 800977c:	4826      	ldr	r0, [pc, #152]	; (8009818 <icmp_send_response+0xd0>)
 800977e:	f001 fb2b 	bl	800add8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	78ba      	ldrb	r2, [r7, #2]
 8009798:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2200      	movs	r2, #0
 800979e:	711a      	strb	r2, [r3, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2200      	movs	r2, #0
 80097a8:	719a      	strb	r2, [r3, #6]
 80097aa:	2200      	movs	r2, #0
 80097ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f103 0008 	add.w	r0, r3, #8
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	221c      	movs	r2, #28
 80097bc:	4619      	mov	r1, r3
 80097be:	f001 fa4b 	bl	800ac58 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80097c8:	f107 030c 	add.w	r3, r7, #12
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 f825 	bl	800981c <ip4_route>
 80097d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d011      	beq.n	80097fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2200      	movs	r2, #0
 80097de:	709a      	strb	r2, [r3, #2]
 80097e0:	2200      	movs	r2, #0
 80097e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80097e4:	f107 020c 	add.w	r2, r7, #12
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	9302      	str	r3, [sp, #8]
 80097ec:	2301      	movs	r3, #1
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	2300      	movs	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	23ff      	movs	r3, #255	; 0xff
 80097f6:	2100      	movs	r1, #0
 80097f8:	69f8      	ldr	r0, [r7, #28]
 80097fa:	f000 f9c3 	bl	8009b84 <ip4_output_if>
  }
  pbuf_free(q);
 80097fe:	69f8      	ldr	r0, [r7, #28]
 8009800:	f7fd fc38 	bl	8007074 <pbuf_free>
 8009804:	e000      	b.n	8009808 <icmp_send_response+0xc0>
    return;
 8009806:	bf00      	nop
}
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	0800cfb8 	.word	0x0800cfb8
 8009814:	0800d084 	.word	0x0800d084
 8009818:	0800d028 	.word	0x0800d028

0800981c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009824:	4b33      	ldr	r3, [pc, #204]	; (80098f4 <ip4_route+0xd8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	e036      	b.n	800989a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02b      	beq.n	8009894 <ip4_route+0x78>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009842:	089b      	lsrs	r3, r3, #2
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d022      	beq.n	8009894 <ip4_route+0x78>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01d      	beq.n	8009894 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3304      	adds	r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	405a      	eors	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3308      	adds	r3, #8
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	e038      	b.n	80098e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d108      	bne.n	8009894 <ip4_route+0x78>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	330c      	adds	r3, #12
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d101      	bne.n	8009894 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	e028      	b.n	80098e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1c5      	bne.n	800982c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80098a0:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <ip4_route+0xdc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <ip4_route+0xc2>
 80098a8:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <ip4_route+0xdc>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d012      	beq.n	80098de <ip4_route+0xc2>
 80098b8:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <ip4_route+0xdc>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00a      	beq.n	80098de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80098c8:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <ip4_route+0xdc>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3304      	adds	r3, #4
 80098ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b7f      	cmp	r3, #127	; 0x7f
 80098dc:	d101      	bne.n	80098e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	e001      	b.n	80098e6 <ip4_route+0xca>
  }

  return netif_default;
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <ip4_route+0xdc>)
 80098e4:	681b      	ldr	r3, [r3, #0]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	200085d8 	.word	0x200085d8
 80098f8:	200085dc 	.word	0x200085dc

080098fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d016      	beq.n	8009942 <ip4_input_accept+0x46>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	3304      	adds	r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d011      	beq.n	8009942 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <ip4_input_accept+0x50>)
 8009920:	695a      	ldr	r2, [r3, #20]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3304      	adds	r3, #4
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d008      	beq.n	800993e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800992c:	4b07      	ldr	r3, [pc, #28]	; (800994c <ip4_input_accept+0x50>)
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	4618      	mov	r0, r3
 8009934:	f000 f9fe 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8009938:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	200033ec 	.word	0x200033ec

08009950 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	091b      	lsrs	r3, r3, #4
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b04      	cmp	r3, #4
 800996a:	d004      	beq.n	8009976 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f7fd fb81 	bl	8007074 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	e0fd      	b.n	8009b72 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	b2db      	uxtb	r3, r3
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	b2db      	uxtb	r3, r3
 8009984:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	885b      	ldrh	r3, [r3, #2]
 800998a:	b29b      	uxth	r3, r3
 800998c:	4618      	mov	r0, r3
 800998e:	f7fc f8a7 	bl	8005ae0 <lwip_htons>
 8009992:	4603      	mov	r3, r0
 8009994:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	891b      	ldrh	r3, [r3, #8]
 800999a:	89ba      	ldrh	r2, [r7, #12]
 800999c:	429a      	cmp	r2, r3
 800999e:	d204      	bcs.n	80099aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80099a0:	89bb      	ldrh	r3, [r7, #12]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7fd f9df 	bl	8006d68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	895b      	ldrh	r3, [r3, #10]
 80099ae:	89fa      	ldrh	r2, [r7, #14]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d807      	bhi.n	80099c4 <ip4_input+0x74>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	891b      	ldrh	r3, [r3, #8]
 80099b8:	89ba      	ldrh	r2, [r7, #12]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d802      	bhi.n	80099c4 <ip4_input+0x74>
 80099be:	89fb      	ldrh	r3, [r7, #14]
 80099c0:	2b13      	cmp	r3, #19
 80099c2:	d804      	bhi.n	80099ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fd fb55 	bl	8007074 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e0d1      	b.n	8009b72 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	4a6a      	ldr	r2, [pc, #424]	; (8009b7c <ip4_input+0x22c>)
 80099d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	4a68      	ldr	r2, [pc, #416]	; (8009b7c <ip4_input+0x22c>)
 80099dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80099de:	4b67      	ldr	r3, [pc, #412]	; (8009b7c <ip4_input+0x22c>)
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e6:	2be0      	cmp	r3, #224	; 0xe0
 80099e8:	d112      	bne.n	8009a10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d007      	beq.n	8009a0a <ip4_input+0xba>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	3304      	adds	r3, #4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <ip4_input+0xba>
      netif = inp;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	613b      	str	r3, [r7, #16]
 8009a08:	e02a      	b.n	8009a60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	e027      	b.n	8009a60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009a10:	6838      	ldr	r0, [r7, #0]
 8009a12:	f7ff ff73 	bl	80098fc <ip4_input_accept>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <ip4_input+0xd2>
      netif = inp;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	613b      	str	r3, [r7, #16]
 8009a20:	e01e      	b.n	8009a60 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009a26:	4b55      	ldr	r3, [pc, #340]	; (8009b7c <ip4_input+0x22c>)
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8009a2e:	d017      	beq.n	8009a60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009a30:	4b53      	ldr	r3, [pc, #332]	; (8009b80 <ip4_input+0x230>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	e00e      	b.n	8009a56 <ip4_input+0x106>
          if (netif == inp) {
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d006      	beq.n	8009a4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009a40:	6938      	ldr	r0, [r7, #16]
 8009a42:	f7ff ff5b 	bl	80098fc <ip4_input_accept>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d108      	bne.n	8009a5e <ip4_input+0x10e>
 8009a4c:	e000      	b.n	8009a50 <ip4_input+0x100>
            continue;
 8009a4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	613b      	str	r3, [r7, #16]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1ed      	bne.n	8009a38 <ip4_input+0xe8>
 8009a5c:	e000      	b.n	8009a60 <ip4_input+0x110>
            break;
 8009a5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009a60:	4b46      	ldr	r3, [pc, #280]	; (8009b7c <ip4_input+0x22c>)
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 f964 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009a72:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <ip4_input+0x22c>)
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009a7a:	2be0      	cmp	r3, #224	; 0xe0
 8009a7c:	d104      	bne.n	8009a88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7fd faf8 	bl	8007074 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	e074      	b.n	8009b72 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fd faf0 	bl	8007074 <pbuf_free>
    return ERR_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e06c      	b.n	8009b72 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	88db      	ldrh	r3, [r3, #6]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fc88 	bl	800a3c0 <ip4_reass>
 8009ab0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <ip4_input+0x16c>
      return ERR_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e05a      	b.n	8009b72 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009ac2:	4a2e      	ldr	r2, [pc, #184]	; (8009b7c <ip4_input+0x22c>)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009ac8:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <ip4_input+0x22c>)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009ace:	4a2b      	ldr	r2, [pc, #172]	; (8009b7c <ip4_input+0x22c>)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <ip4_input+0x22c>)
 8009ae6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fd fa3b 	bl	8006f68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d006      	beq.n	8009b08 <ip4_input+0x1b8>
 8009afa:	2b11      	cmp	r3, #17
 8009afc:	d109      	bne.n	8009b12 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7fe f8df 	bl	8007cc4 <udp_input>
        break;
 8009b06:	e021      	b.n	8009b4c <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff fcf8 	bl	8009500 <icmp_input>
        break;
 8009b10:	e01c      	b.n	8009b4c <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009b12:	4b1a      	ldr	r3, [pc, #104]	; (8009b7c <ip4_input+0x22c>)
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	6939      	ldr	r1, [r7, #16]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 f90b 	bl	8009d34 <ip4_addr_isbroadcast_u32>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10f      	bne.n	8009b44 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009b24:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <ip4_input+0x22c>)
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009b2c:	2be0      	cmp	r3, #224	; 0xe0
 8009b2e:	d009      	beq.n	8009b44 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fd fa89 	bl	800704e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009b3c:	2102      	movs	r1, #2
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fde2 	bl	8009708 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fd fa95 	bl	8007074 <pbuf_free>
        break;
 8009b4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009b4c:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <ip4_input+0x22c>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009b52:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <ip4_input+0x22c>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009b58:	4b08      	ldr	r3, [pc, #32]	; (8009b7c <ip4_input+0x22c>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009b5e:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <ip4_input+0x22c>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009b64:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <ip4_input+0x22c>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <ip4_input+0x22c>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	200033ec 	.word	0x200033ec
 8009b80:	200085d8 	.word	0x200085d8

08009b84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af04      	add	r7, sp, #16
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <ip4_output_if+0x26>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	3304      	adds	r3, #4
 8009bae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009bb0:	78fa      	ldrb	r2, [r7, #3]
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f805 	bl	8009bd8 <ip4_output_if_src>
 8009bce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	7b9b      	ldrb	r3, [r3, #14]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d006      	beq.n	8009bfc <ip4_output_if_src+0x24>
 8009bee:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <ip4_output_if_src+0x144>)
 8009bf0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009bf4:	494a      	ldr	r1, [pc, #296]	; (8009d20 <ip4_output_if_src+0x148>)
 8009bf6:	484b      	ldr	r0, [pc, #300]	; (8009d24 <ip4_output_if_src+0x14c>)
 8009bf8:	f001 f8ee 	bl	800add8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d060      	beq.n	8009cc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009c02:	2314      	movs	r3, #20
 8009c04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009c06:	2114      	movs	r1, #20
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7fd f99d 	bl	8006f48 <pbuf_add_header>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009c14:	f06f 0301 	mvn.w	r3, #1
 8009c18:	e07c      	b.n	8009d14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	895b      	ldrh	r3, [r3, #10]
 8009c24:	2b13      	cmp	r3, #19
 8009c26:	d806      	bhi.n	8009c36 <ip4_output_if_src+0x5e>
 8009c28:	4b3c      	ldr	r3, [pc, #240]	; (8009d1c <ip4_output_if_src+0x144>)
 8009c2a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009c2e:	493e      	ldr	r1, [pc, #248]	; (8009d28 <ip4_output_if_src+0x150>)
 8009c30:	483c      	ldr	r0, [pc, #240]	; (8009d24 <ip4_output_if_src+0x14c>)
 8009c32:	f001 f8d1 	bl	800add8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	78fa      	ldrb	r2, [r7, #3]
 8009c3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009c42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009c4c:	8b7b      	ldrh	r3, [r7, #26]
 8009c4e:	089b      	lsrs	r3, r3, #2
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009c64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	891b      	ldrh	r3, [r3, #8]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fb ff38 	bl	8005ae0 <lwip_htons>
 8009c70:	4603      	mov	r3, r0
 8009c72:	461a      	mov	r2, r3
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	719a      	strb	r2, [r3, #6]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <ip4_output_if_src+0x154>)
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fb ff2a 	bl	8005ae0 <lwip_htons>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009c94:	4b25      	ldr	r3, [pc, #148]	; (8009d2c <ip4_output_if_src+0x154>)
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <ip4_output_if_src+0x154>)
 8009c9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d104      	bne.n	8009cb0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009ca6:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <ip4_output_if_src+0x158>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	e003      	b.n	8009cb8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	729a      	strb	r2, [r3, #10]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	72da      	strb	r2, [r3, #11]
 8009cc2:	e00f      	b.n	8009ce4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	895b      	ldrh	r3, [r3, #10]
 8009cc8:	2b13      	cmp	r3, #19
 8009cca:	d802      	bhi.n	8009cd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009ccc:	f06f 0301 	mvn.w	r3, #1
 8009cd0:	e020      	b.n	8009d14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009cde:	f107 0314 	add.w	r3, r7, #20
 8009ce2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00c      	beq.n	8009d06 <ip4_output_if_src+0x12e>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	891a      	ldrh	r2, [r3, #8]
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d906      	bls.n	8009d06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f000 fd4d 	bl	800a79c <ip4_frag>
 8009d02:	4603      	mov	r3, r0
 8009d04:	e006      	b.n	8009d14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	68f9      	ldr	r1, [r7, #12]
 8009d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d10:	4798      	blx	r3
 8009d12:	4603      	mov	r3, r0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	0800d0b0 	.word	0x0800d0b0
 8009d20:	0800d0e4 	.word	0x0800d0e4
 8009d24:	0800d0f0 	.word	0x0800d0f0
 8009d28:	0800d118 	.word	0x0800d118
 8009d2c:	200001e2 	.word	0x200001e2
 8009d30:	0800d49c 	.word	0x0800d49c

08009d34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d002      	beq.n	8009d50 <ip4_addr_isbroadcast_u32+0x1c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e02a      	b.n	8009daa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e021      	b.n	8009daa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d101      	bne.n	8009d76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	e019      	b.n	8009daa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	405a      	eors	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	3308      	adds	r3, #8
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4013      	ands	r3, r2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10d      	bne.n	8009da8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	3308      	adds	r3, #8
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	43da      	mvns	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d101      	bne.n	8009da8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009da8:	2300      	movs	r3, #0
  }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009dc2:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <ip_reass_tmr+0x54>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009dc8:	e018      	b.n	8009dfc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	7fdb      	ldrb	r3, [r3, #31]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00b      	beq.n	8009dea <ip_reass_tmr+0x32>
      r->timer--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	7fdb      	ldrb	r3, [r3, #31]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	e008      	b.n	8009dfc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f80a 	bl	8009e10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e3      	bne.n	8009dca <ip_reass_tmr+0x12>
    }
  }
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	200001e4 	.word	0x200001e4

08009e10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d105      	bne.n	8009e32 <ip_reass_free_complete_datagram+0x22>
 8009e26:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <ip_reass_free_complete_datagram+0x12c>)
 8009e28:	22ab      	movs	r2, #171	; 0xab
 8009e2a:	4945      	ldr	r1, [pc, #276]	; (8009f40 <ip_reass_free_complete_datagram+0x130>)
 8009e2c:	4845      	ldr	r0, [pc, #276]	; (8009f44 <ip_reass_free_complete_datagram+0x134>)
 8009e2e:	f000 ffd3 	bl	800add8 <iprintf>
  if (prev != NULL) {
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00a      	beq.n	8009e4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d005      	beq.n	8009e4e <ip_reass_free_complete_datagram+0x3e>
 8009e42:	4b3e      	ldr	r3, [pc, #248]	; (8009f3c <ip_reass_free_complete_datagram+0x12c>)
 8009e44:	22ad      	movs	r2, #173	; 0xad
 8009e46:	4940      	ldr	r1, [pc, #256]	; (8009f48 <ip_reass_free_complete_datagram+0x138>)
 8009e48:	483e      	ldr	r0, [pc, #248]	; (8009f44 <ip_reass_free_complete_datagram+0x134>)
 8009e4a:	f000 ffc5 	bl	800add8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	889b      	ldrh	r3, [r3, #4]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d12a      	bne.n	8009eb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	6858      	ldr	r0, [r3, #4]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3308      	adds	r3, #8
 8009e76:	2214      	movs	r2, #20
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f000 feed 	bl	800ac58 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009e7e:	2101      	movs	r1, #1
 8009e80:	69b8      	ldr	r0, [r7, #24]
 8009e82:	f7ff fc51 	bl	8009728 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009e86:	69b8      	ldr	r0, [r7, #24]
 8009e88:	f7fd f97c 	bl	8007184 <pbuf_clen>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009e90:	8bfa      	ldrh	r2, [r7, #30]
 8009e92:	8a7b      	ldrh	r3, [r7, #18]
 8009e94:	4413      	add	r3, r2
 8009e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9a:	db05      	blt.n	8009ea8 <ip_reass_free_complete_datagram+0x98>
 8009e9c:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <ip_reass_free_complete_datagram+0x12c>)
 8009e9e:	22bc      	movs	r2, #188	; 0xbc
 8009ea0:	492a      	ldr	r1, [pc, #168]	; (8009f4c <ip_reass_free_complete_datagram+0x13c>)
 8009ea2:	4828      	ldr	r0, [pc, #160]	; (8009f44 <ip_reass_free_complete_datagram+0x134>)
 8009ea4:	f000 ff98 	bl	800add8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009ea8:	8bfa      	ldrh	r2, [r7, #30]
 8009eaa:	8a7b      	ldrh	r3, [r7, #18]
 8009eac:	4413      	add	r3, r2
 8009eae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009eb0:	69b8      	ldr	r0, [r7, #24]
 8009eb2:	f7fd f8df 	bl	8007074 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009ebc:	e01f      	b.n	8009efe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7fd f958 	bl	8007184 <pbuf_clen>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009ed8:	8bfa      	ldrh	r2, [r7, #30]
 8009eda:	8a7b      	ldrh	r3, [r7, #18]
 8009edc:	4413      	add	r3, r2
 8009ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee2:	db05      	blt.n	8009ef0 <ip_reass_free_complete_datagram+0xe0>
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <ip_reass_free_complete_datagram+0x12c>)
 8009ee6:	22cc      	movs	r2, #204	; 0xcc
 8009ee8:	4918      	ldr	r1, [pc, #96]	; (8009f4c <ip_reass_free_complete_datagram+0x13c>)
 8009eea:	4816      	ldr	r0, [pc, #88]	; (8009f44 <ip_reass_free_complete_datagram+0x134>)
 8009eec:	f000 ff74 	bl	800add8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009ef0:	8bfa      	ldrh	r2, [r7, #30]
 8009ef2:	8a7b      	ldrh	r3, [r7, #18]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f7fd f8bb 	bl	8007074 <pbuf_free>
  while (p != NULL) {
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1dc      	bne.n	8009ebe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f8c2 	bl	800a090 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009f0c:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <ip_reass_free_complete_datagram+0x140>)
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	8bfa      	ldrh	r2, [r7, #30]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d905      	bls.n	8009f22 <ip_reass_free_complete_datagram+0x112>
 8009f16:	4b09      	ldr	r3, [pc, #36]	; (8009f3c <ip_reass_free_complete_datagram+0x12c>)
 8009f18:	22d2      	movs	r2, #210	; 0xd2
 8009f1a:	490e      	ldr	r1, [pc, #56]	; (8009f54 <ip_reass_free_complete_datagram+0x144>)
 8009f1c:	4809      	ldr	r0, [pc, #36]	; (8009f44 <ip_reass_free_complete_datagram+0x134>)
 8009f1e:	f000 ff5b 	bl	800add8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009f22:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <ip_reass_free_complete_datagram+0x140>)
 8009f24:	881a      	ldrh	r2, [r3, #0]
 8009f26:	8bfb      	ldrh	r3, [r7, #30]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <ip_reass_free_complete_datagram+0x140>)
 8009f2e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009f30:	8bfb      	ldrh	r3, [r7, #30]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0800d148 	.word	0x0800d148
 8009f40:	0800d184 	.word	0x0800d184
 8009f44:	0800d190 	.word	0x0800d190
 8009f48:	0800d1b8 	.word	0x0800d1b8
 8009f4c:	0800d1cc 	.word	0x0800d1cc
 8009f50:	200001e8 	.word	0x200001e8
 8009f54:	0800d1ec 	.word	0x0800d1ec

08009f58 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	; 0x28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8009f62:	2300      	movs	r3, #0
 8009f64:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8009f76:	4b28      	ldr	r3, [pc, #160]	; (800a018 <ip_reass_remove_oldest_datagram+0xc0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009f7c:	e030      	b.n	8009fe0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	695a      	ldr	r2, [r3, #20]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d10c      	bne.n	8009fa4 <ip_reass_remove_oldest_datagram+0x4c>
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	699a      	ldr	r2, [r3, #24]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d106      	bne.n	8009fa4 <ip_reass_remove_oldest_datagram+0x4c>
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	899a      	ldrh	r2, [r3, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	889b      	ldrh	r3, [r3, #4]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d014      	beq.n	8009fce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e009      	b.n	8009fce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	7fda      	ldrb	r2, [r3, #31]
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	7fdb      	ldrb	r3, [r3, #31]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d803      	bhi.n	8009fce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1cb      	bne.n	8009f7e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d008      	beq.n	8009ffe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009fec:	69b9      	ldr	r1, [r7, #24]
 8009fee:	6a38      	ldr	r0, [r7, #32]
 8009ff0:	f7ff ff0e 	bl	8009e10 <ip_reass_free_complete_datagram>
 8009ff4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	da02      	bge.n	800a00c <ip_reass_remove_oldest_datagram+0xb4>
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	dcac      	bgt.n	8009f66 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a00c:	697b      	ldr	r3, [r7, #20]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3728      	adds	r7, #40	; 0x28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	200001e4 	.word	0x200001e4

0800a01c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a026:	2001      	movs	r0, #1
 800a028:	f7fc f994 	bl	8006354 <memp_malloc>
 800a02c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d110      	bne.n	800a056 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7ff ff8e 	bl	8009f58 <ip_reass_remove_oldest_datagram>
 800a03c:	4602      	mov	r2, r0
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	4293      	cmp	r3, r2
 800a042:	dc03      	bgt.n	800a04c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a044:	2001      	movs	r0, #1
 800a046:	f7fc f985 	bl	8006354 <memp_malloc>
 800a04a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	e016      	b.n	800a084 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a056:	2220      	movs	r2, #32
 800a058:	2100      	movs	r1, #0
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fe0a 	bl	800ac74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	220f      	movs	r2, #15
 800a064:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a066:	4b09      	ldr	r3, [pc, #36]	; (800a08c <ip_reass_enqueue_new_datagram+0x70>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a06e:	4a07      	ldr	r2, [pc, #28]	; (800a08c <ip_reass_enqueue_new_datagram+0x70>)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3308      	adds	r3, #8
 800a078:	2214      	movs	r2, #20
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fdeb 	bl	800ac58 <memcpy>
  return ipr;
 800a082:	68fb      	ldr	r3, [r7, #12]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200001e4 	.word	0x200001e4

0800a090 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a09a:	4b10      	ldr	r3, [pc, #64]	; (800a0dc <ip_reass_dequeue_datagram+0x4c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d104      	bne.n	800a0ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a0c      	ldr	r2, [pc, #48]	; (800a0dc <ip_reass_dequeue_datagram+0x4c>)
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	e00d      	b.n	800a0ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <ip_reass_dequeue_datagram+0x32>
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <ip_reass_dequeue_datagram+0x50>)
 800a0b6:	f240 1245 	movw	r2, #325	; 0x145
 800a0ba:	490a      	ldr	r1, [pc, #40]	; (800a0e4 <ip_reass_dequeue_datagram+0x54>)
 800a0bc:	480a      	ldr	r0, [pc, #40]	; (800a0e8 <ip_reass_dequeue_datagram+0x58>)
 800a0be:	f000 fe8b 	bl	800add8 <iprintf>
    prev->next = ipr->next;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	f7fc f98d 	bl	80063ec <memp_free>
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	200001e4 	.word	0x200001e4
 800a0e0:	0800d148 	.word	0x0800d148
 800a0e4:	0800d210 	.word	0x0800d210
 800a0e8:	0800d190 	.word	0x0800d190

0800a0ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08c      	sub	sp, #48	; 0x30
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	885b      	ldrh	r3, [r3, #2]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fb fce7 	bl	8005ae0 <lwip_htons>
 800a112:	4603      	mov	r3, r0
 800a114:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a124:	7e7b      	ldrb	r3, [r7, #25]
 800a126:	b29b      	uxth	r3, r3
 800a128:	8b7a      	ldrh	r2, [r7, #26]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d202      	bcs.n	800a134 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	e135      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a134:	7e7b      	ldrb	r3, [r7, #25]
 800a136:	b29b      	uxth	r3, r3
 800a138:	8b7a      	ldrh	r2, [r7, #26]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	88db      	ldrh	r3, [r3, #6]
 800a142:	b29b      	uxth	r3, r3
 800a144:	4618      	mov	r0, r3
 800a146:	f7fb fccb 	bl	8005ae0 <lwip_htons>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a150:	b29b      	uxth	r3, r3
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	705a      	strb	r2, [r3, #1]
 800a166:	2200      	movs	r2, #0
 800a168:	709a      	strb	r2, [r3, #2]
 800a16a:	2200      	movs	r2, #0
 800a16c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a170:	8afa      	ldrh	r2, [r7, #22]
 800a172:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a174:	8afa      	ldrh	r2, [r7, #22]
 800a176:	8b7b      	ldrh	r3, [r7, #26]
 800a178:	4413      	add	r3, r2
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	88db      	ldrh	r3, [r3, #6]
 800a184:	b29b      	uxth	r3, r3
 800a186:	8afa      	ldrh	r2, [r7, #22]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d902      	bls.n	800a192 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295
 800a190:	e106      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
 800a198:	e068      	b.n	800a26c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	889b      	ldrh	r3, [r3, #4]
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	889b      	ldrh	r3, [r3, #4]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d235      	bcs.n	800a21c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d020      	beq.n	800a1fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	889b      	ldrh	r3, [r3, #4]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d307      	bcc.n	800a1dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	88db      	ldrh	r3, [r3, #6]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	889b      	ldrh	r3, [r3, #4]
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d902      	bls.n	800a1e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e0:	e0de      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	88db      	ldrh	r3, [r3, #6]
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	889b      	ldrh	r3, [r3, #4]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d03d      	beq.n	800a274 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a1fc:	e03a      	b.n	800a274 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	88db      	ldrh	r3, [r3, #6]
 800a202:	b29a      	uxth	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	889b      	ldrh	r3, [r3, #4]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d902      	bls.n	800a214 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	e0c5      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	605a      	str	r2, [r3, #4]
      break;
 800a21a:	e02b      	b.n	800a274 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	889b      	ldrh	r3, [r3, #4]
 800a220:	b29a      	uxth	r2, r3
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	889b      	ldrh	r3, [r3, #4]
 800a226:	b29b      	uxth	r3, r3
 800a228:	429a      	cmp	r2, r3
 800a22a:	d102      	bne.n	800a232 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
 800a230:	e0b6      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	889b      	ldrh	r3, [r3, #4]
 800a236:	b29a      	uxth	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	429a      	cmp	r2, r3
 800a240:	d202      	bcs.n	800a248 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a242:	f04f 33ff 	mov.w	r3, #4294967295
 800a246:	e0ab      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	b29a      	uxth	r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	889b      	ldrh	r3, [r3, #4]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d001      	beq.n	800a262 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d193      	bne.n	800a19a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a272:	e000      	b.n	800a276 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a274:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d12d      	bne.n	800a2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d01c      	beq.n	800a2bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	88db      	ldrh	r3, [r3, #6]
 800a286:	b29a      	uxth	r2, r3
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	889b      	ldrh	r3, [r3, #4]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	429a      	cmp	r2, r3
 800a290:	d906      	bls.n	800a2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a292:	4b45      	ldr	r3, [pc, #276]	; (800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a294:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a298:	4944      	ldr	r1, [pc, #272]	; (800a3ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a29a:	4845      	ldr	r0, [pc, #276]	; (800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a29c:	f000 fd9c 	bl	800add8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a8:	88db      	ldrh	r3, [r3, #6]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	889b      	ldrh	r3, [r3, #4]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d010      	beq.n	800a2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	e00d      	b.n	800a2d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a2c4:	4b38      	ldr	r3, [pc, #224]	; (800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a2c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a2ca:	493a      	ldr	r1, [pc, #232]	; (800a3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a2cc:	4838      	ldr	r0, [pc, #224]	; (800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a2ce:	f000 fd83 	bl	800add8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	7f9b      	ldrb	r3, [r3, #30]
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d059      	beq.n	800a39e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d04f      	beq.n	800a390 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d006      	beq.n	800a306 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	889b      	ldrh	r3, [r3, #4]
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e041      	b.n	800a390 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a316:	e012      	b.n	800a33e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	b29a      	uxth	r2, r3
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	889b      	ldrh	r3, [r3, #4]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d002      	beq.n	800a334 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
            break;
 800a332:	e007      	b.n	800a344 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e9      	bne.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d022      	beq.n	800a390 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a352:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a354:	f240 12df 	movw	r2, #479	; 0x1df
 800a358:	4917      	ldr	r1, [pc, #92]	; (800a3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a35a:	4815      	ldr	r0, [pc, #84]	; (800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a35c:	f000 fd3c 	bl	800add8 <iprintf>
          LWIP_ASSERT("sanity check",
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a368:	429a      	cmp	r2, r3
 800a36a:	d106      	bne.n	800a37a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a36c:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a36e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a372:	4911      	ldr	r1, [pc, #68]	; (800a3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a374:	480e      	ldr	r0, [pc, #56]	; (800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a376:	f000 fd2f 	bl	800add8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a382:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a384:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a388:	490c      	ldr	r1, [pc, #48]	; (800a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a38a:	4809      	ldr	r0, [pc, #36]	; (800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a38c:	f000 fd24 	bl	800add8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bf14      	ite	ne
 800a396:	2301      	movne	r3, #1
 800a398:	2300      	moveq	r3, #0
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	e000      	b.n	800a3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3730      	adds	r7, #48	; 0x30
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	0800d148 	.word	0x0800d148
 800a3ac:	0800d22c 	.word	0x0800d22c
 800a3b0:	0800d190 	.word	0x0800d190
 800a3b4:	0800d24c 	.word	0x0800d24c
 800a3b8:	0800d284 	.word	0x0800d284
 800a3bc:	0800d294 	.word	0x0800d294

0800a3c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b08e      	sub	sp, #56	; 0x38
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	f003 030f 	and.w	r3, r3, #15
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b14      	cmp	r3, #20
 800a3de:	f040 8167 	bne.w	800a6b0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fb fb79 	bl	8005ae0 <lwip_htons>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	4618      	mov	r0, r3
 800a402:	f7fb fb6d 	bl	8005ae0 <lwip_htons>
 800a406:	4603      	mov	r3, r0
 800a408:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	f003 030f 	and.w	r3, r3, #15
 800a412:	b2db      	uxtb	r3, r3
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a41a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a41e:	b29b      	uxth	r3, r3
 800a420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a422:	429a      	cmp	r2, r3
 800a424:	f0c0 8146 	bcc.w	800a6b4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7fc fea5 	bl	8007184 <pbuf_clen>
 800a43a:	4603      	mov	r3, r0
 800a43c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a43e:	4b9f      	ldr	r3, [pc, #636]	; (800a6bc <ip4_reass+0x2fc>)
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	8c3b      	ldrh	r3, [r7, #32]
 800a446:	4413      	add	r3, r2
 800a448:	2b0a      	cmp	r3, #10
 800a44a:	dd10      	ble.n	800a46e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a44c:	8c3b      	ldrh	r3, [r7, #32]
 800a44e:	4619      	mov	r1, r3
 800a450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a452:	f7ff fd81 	bl	8009f58 <ip_reass_remove_oldest_datagram>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 812d 	beq.w	800a6b8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a45e:	4b97      	ldr	r3, [pc, #604]	; (800a6bc <ip4_reass+0x2fc>)
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	8c3b      	ldrh	r3, [r7, #32]
 800a466:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a468:	2b0a      	cmp	r3, #10
 800a46a:	f300 8125 	bgt.w	800a6b8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a46e:	4b94      	ldr	r3, [pc, #592]	; (800a6c0 <ip4_reass+0x300>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	633b      	str	r3, [r7, #48]	; 0x30
 800a474:	e015      	b.n	800a4a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	695a      	ldr	r2, [r3, #20]
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d10c      	bne.n	800a49c <ip4_reass+0xdc>
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	699a      	ldr	r2, [r3, #24]
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d106      	bne.n	800a49c <ip4_reass+0xdc>
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	899a      	ldrh	r2, [r3, #12]
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	889b      	ldrh	r3, [r3, #4]
 800a496:	b29b      	uxth	r3, r3
 800a498:	429a      	cmp	r2, r3
 800a49a:	d006      	beq.n	800a4aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e6      	bne.n	800a476 <ip4_reass+0xb6>
 800a4a8:	e000      	b.n	800a4ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a4aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a4b2:	8c3b      	ldrh	r3, [r7, #32]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b8:	f7ff fdb0 	bl	800a01c <ip_reass_enqueue_new_datagram>
 800a4bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d11c      	bne.n	800a4fe <ip4_reass+0x13e>
      goto nullreturn;
 800a4c4:	e109      	b.n	800a6da <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	88db      	ldrh	r3, [r3, #6]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fb fb07 	bl	8005ae0 <lwip_htons>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d110      	bne.n	800a4fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4de:	89db      	ldrh	r3, [r3, #14]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fb fafd 	bl	8005ae0 <lwip_htons>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	2214      	movs	r2, #20
 800a4f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fbad 	bl	800ac58 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	88db      	ldrh	r3, [r3, #6]
 800a502:	b29b      	uxth	r3, r3
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bf0c      	ite	eq
 800a50c:	2301      	moveq	r3, #1
 800a50e:	2300      	movne	r3, #0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00e      	beq.n	800a538 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a51a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a51e:	4413      	add	r3, r2
 800a520:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a522:	8b7a      	ldrh	r2, [r7, #26]
 800a524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a526:	429a      	cmp	r2, r3
 800a528:	f0c0 80a0 	bcc.w	800a66c <ip4_reass+0x2ac>
 800a52c:	8b7b      	ldrh	r3, [r7, #26]
 800a52e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a532:	4293      	cmp	r3, r2
 800a534:	f200 809a 	bhi.w	800a66c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a53e:	f7ff fdd5 	bl	800a0ec <ip_reass_chain_frag_into_datagram_and_validate>
 800a542:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	f000 8091 	beq.w	800a670 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a54e:	4b5b      	ldr	r3, [pc, #364]	; (800a6bc <ip4_reass+0x2fc>)
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	8c3b      	ldrh	r3, [r7, #32]
 800a554:	4413      	add	r3, r2
 800a556:	b29a      	uxth	r2, r3
 800a558:	4b58      	ldr	r3, [pc, #352]	; (800a6bc <ip4_reass+0x2fc>)
 800a55a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00d      	beq.n	800a57e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a562:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a566:	4413      	add	r3, r2
 800a568:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	8a7a      	ldrh	r2, [r7, #18]
 800a56e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	7f9b      	ldrb	r3, [r3, #30]
 800a574:	f043 0301 	orr.w	r3, r3, #1
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d171      	bne.n	800a668 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	8b9b      	ldrh	r3, [r3, #28]
 800a588:	3314      	adds	r3, #20
 800a58a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	2214      	movs	r2, #20
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f000 fb56 	bl	800ac58 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a5ac:	8a3b      	ldrh	r3, [r7, #16]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fb fa96 	bl	8005ae0 <lwip_htons>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	2200      	movs	r2, #0
 800a5c0:	719a      	strb	r2, [r3, #6]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	729a      	strb	r2, [r3, #10]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a5d6:	e00d      	b.n	800a5f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a5de:	2114      	movs	r1, #20
 800a5e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a5e2:	f7fc fcc1 	bl	8006f68 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a5e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fc fe05 	bl	80071f8 <pbuf_cat>
      r = iprh->next_pbuf;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1ee      	bne.n	800a5d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a5fa:	4b31      	ldr	r3, [pc, #196]	; (800a6c0 <ip4_reass+0x300>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a600:	429a      	cmp	r2, r3
 800a602:	d102      	bne.n	800a60a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a608:	e010      	b.n	800a62c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a60a:	4b2d      	ldr	r3, [pc, #180]	; (800a6c0 <ip4_reass+0x300>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a610:	e007      	b.n	800a622 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a618:	429a      	cmp	r2, r3
 800a61a:	d006      	beq.n	800a62a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1f4      	bne.n	800a612 <ip4_reass+0x252>
 800a628:	e000      	b.n	800a62c <ip4_reass+0x26c>
          break;
 800a62a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a62c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a62e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a630:	f7ff fd2e 	bl	800a090 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7fc fda5 	bl	8007184 <pbuf_clen>
 800a63a:	4603      	mov	r3, r0
 800a63c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a63e:	4b1f      	ldr	r3, [pc, #124]	; (800a6bc <ip4_reass+0x2fc>)
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	8c3a      	ldrh	r2, [r7, #32]
 800a644:	429a      	cmp	r2, r3
 800a646:	d906      	bls.n	800a656 <ip4_reass+0x296>
 800a648:	4b1e      	ldr	r3, [pc, #120]	; (800a6c4 <ip4_reass+0x304>)
 800a64a:	f240 229b 	movw	r2, #667	; 0x29b
 800a64e:	491e      	ldr	r1, [pc, #120]	; (800a6c8 <ip4_reass+0x308>)
 800a650:	481e      	ldr	r0, [pc, #120]	; (800a6cc <ip4_reass+0x30c>)
 800a652:	f000 fbc1 	bl	800add8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a656:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <ip4_reass+0x2fc>)
 800a658:	881a      	ldrh	r2, [r3, #0]
 800a65a:	8c3b      	ldrh	r3, [r7, #32]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	b29a      	uxth	r2, r3
 800a660:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <ip4_reass+0x2fc>)
 800a662:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	e03c      	b.n	800a6e2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	e03a      	b.n	800a6e2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800a66c:	bf00      	nop
 800a66e:	e000      	b.n	800a672 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800a670:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <ip4_reass+0x2c6>
 800a678:	4b12      	ldr	r3, [pc, #72]	; (800a6c4 <ip4_reass+0x304>)
 800a67a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a67e:	4914      	ldr	r1, [pc, #80]	; (800a6d0 <ip4_reass+0x310>)
 800a680:	4812      	ldr	r0, [pc, #72]	; (800a6cc <ip4_reass+0x30c>)
 800a682:	f000 fba9 	bl	800add8 <iprintf>
  if (ipr->p == NULL) {
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d124      	bne.n	800a6d8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <ip4_reass+0x300>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a694:	429a      	cmp	r2, r3
 800a696:	d006      	beq.n	800a6a6 <ip4_reass+0x2e6>
 800a698:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <ip4_reass+0x304>)
 800a69a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a69e:	490d      	ldr	r1, [pc, #52]	; (800a6d4 <ip4_reass+0x314>)
 800a6a0:	480a      	ldr	r0, [pc, #40]	; (800a6cc <ip4_reass+0x30c>)
 800a6a2:	f000 fb99 	bl	800add8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6aa:	f7ff fcf1 	bl	800a090 <ip_reass_dequeue_datagram>
 800a6ae:	e014      	b.n	800a6da <ip4_reass+0x31a>
    goto nullreturn;
 800a6b0:	bf00      	nop
 800a6b2:	e012      	b.n	800a6da <ip4_reass+0x31a>
    goto nullreturn;
 800a6b4:	bf00      	nop
 800a6b6:	e010      	b.n	800a6da <ip4_reass+0x31a>
      goto nullreturn;
 800a6b8:	bf00      	nop
 800a6ba:	e00e      	b.n	800a6da <ip4_reass+0x31a>
 800a6bc:	200001e8 	.word	0x200001e8
 800a6c0:	200001e4 	.word	0x200001e4
 800a6c4:	0800d148 	.word	0x0800d148
 800a6c8:	0800d2b8 	.word	0x0800d2b8
 800a6cc:	0800d190 	.word	0x0800d190
 800a6d0:	0800d2d4 	.word	0x0800d2d4
 800a6d4:	0800d2e0 	.word	0x0800d2e0
  }

nullreturn:
 800a6d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7fc fcca 	bl	8007074 <pbuf_free>
  return NULL;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3738      	adds	r7, #56	; 0x38
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop

0800a6ec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a6f0:	2002      	movs	r0, #2
 800a6f2:	f7fb fe2f 	bl	8006354 <memp_malloc>
 800a6f6:	4603      	mov	r3, r0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a70c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a710:	4906      	ldr	r1, [pc, #24]	; (800a72c <ip_frag_free_pbuf_custom_ref+0x30>)
 800a712:	4807      	ldr	r0, [pc, #28]	; (800a730 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a714:	f000 fb60 	bl	800add8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	2002      	movs	r0, #2
 800a71c:	f7fb fe66 	bl	80063ec <memp_free>
}
 800a720:	bf00      	nop
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	0800d148 	.word	0x0800d148
 800a72c:	0800d300 	.word	0x0800d300
 800a730:	0800d190 	.word	0x0800d190

0800a734 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <ipfrag_free_pbuf_custom+0x20>
 800a746:	4b11      	ldr	r3, [pc, #68]	; (800a78c <ipfrag_free_pbuf_custom+0x58>)
 800a748:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a74c:	4910      	ldr	r1, [pc, #64]	; (800a790 <ipfrag_free_pbuf_custom+0x5c>)
 800a74e:	4811      	ldr	r0, [pc, #68]	; (800a794 <ipfrag_free_pbuf_custom+0x60>)
 800a750:	f000 fb42 	bl	800add8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d006      	beq.n	800a76a <ipfrag_free_pbuf_custom+0x36>
 800a75c:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <ipfrag_free_pbuf_custom+0x58>)
 800a75e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a762:	490d      	ldr	r1, [pc, #52]	; (800a798 <ipfrag_free_pbuf_custom+0x64>)
 800a764:	480b      	ldr	r0, [pc, #44]	; (800a794 <ipfrag_free_pbuf_custom+0x60>)
 800a766:	f000 fb37 	bl	800add8 <iprintf>
  if (pcr->original != NULL) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	4618      	mov	r0, r3
 800a778:	f7fc fc7c 	bl	8007074 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff ffbd 	bl	800a6fc <ip_frag_free_pbuf_custom_ref>
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	0800d148 	.word	0x0800d148
 800a790:	0800d30c 	.word	0x0800d30c
 800a794:	0800d190 	.word	0x0800d190
 800a798:	0800d318 	.word	0x0800d318

0800a79c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b094      	sub	sp, #80	; 0x50
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a7b2:	3b14      	subs	r3, #20
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da00      	bge.n	800a7ba <ip4_frag+0x1e>
 800a7b8:	3307      	adds	r3, #7
 800a7ba:	10db      	asrs	r3, r3, #3
 800a7bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a7be:	2314      	movs	r3, #20
 800a7c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	f003 030f 	and.w	r3, r3, #15
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b14      	cmp	r3, #20
 800a7dc:	d002      	beq.n	800a7e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a7de:	f06f 0305 	mvn.w	r3, #5
 800a7e2:	e110      	b.n	800aa06 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	895b      	ldrh	r3, [r3, #10]
 800a7e8:	2b13      	cmp	r3, #19
 800a7ea:	d809      	bhi.n	800a800 <ip4_frag+0x64>
 800a7ec:	4b88      	ldr	r3, [pc, #544]	; (800aa10 <ip4_frag+0x274>)
 800a7ee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a7f2:	4988      	ldr	r1, [pc, #544]	; (800aa14 <ip4_frag+0x278>)
 800a7f4:	4888      	ldr	r0, [pc, #544]	; (800aa18 <ip4_frag+0x27c>)
 800a7f6:	f000 faef 	bl	800add8 <iprintf>
 800a7fa:	f06f 0305 	mvn.w	r3, #5
 800a7fe:	e102      	b.n	800aa06 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	88db      	ldrh	r3, [r3, #6]
 800a804:	b29b      	uxth	r3, r3
 800a806:	4618      	mov	r0, r3
 800a808:	f7fb f96a 	bl	8005ae0 <lwip_htons>
 800a80c:	4603      	mov	r3, r0
 800a80e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a810:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a816:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a81a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a81c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	891b      	ldrh	r3, [r3, #8]
 800a826:	3b14      	subs	r3, #20
 800a828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800a82c:	e0e1      	b.n	800a9f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a82e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	b29b      	uxth	r3, r3
 800a834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a838:	4293      	cmp	r3, r2
 800a83a:	bf28      	it	cs
 800a83c:	4613      	movcs	r3, r2
 800a83e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a840:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a844:	2114      	movs	r1, #20
 800a846:	200e      	movs	r0, #14
 800a848:	f7fc f932 	bl	8006ab0 <pbuf_alloc>
 800a84c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80d5 	beq.w	800aa00 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	895b      	ldrh	r3, [r3, #10]
 800a85a:	2b13      	cmp	r3, #19
 800a85c:	d806      	bhi.n	800a86c <ip4_frag+0xd0>
 800a85e:	4b6c      	ldr	r3, [pc, #432]	; (800aa10 <ip4_frag+0x274>)
 800a860:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a864:	496d      	ldr	r1, [pc, #436]	; (800aa1c <ip4_frag+0x280>)
 800a866:	486c      	ldr	r0, [pc, #432]	; (800aa18 <ip4_frag+0x27c>)
 800a868:	f000 fab6 	bl	800add8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2214      	movs	r2, #20
 800a872:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f9ef 	bl	800ac58 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800a880:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800a886:	e064      	b.n	800a952 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	895a      	ldrh	r2, [r3, #10]
 800a88c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	895b      	ldrh	r3, [r3, #10]
 800a896:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a898:	429a      	cmp	r2, r3
 800a89a:	d906      	bls.n	800a8aa <ip4_frag+0x10e>
 800a89c:	4b5c      	ldr	r3, [pc, #368]	; (800aa10 <ip4_frag+0x274>)
 800a89e:	f240 322d 	movw	r2, #813	; 0x32d
 800a8a2:	495f      	ldr	r1, [pc, #380]	; (800aa20 <ip4_frag+0x284>)
 800a8a4:	485c      	ldr	r0, [pc, #368]	; (800aa18 <ip4_frag+0x27c>)
 800a8a6:	f000 fa97 	bl	800add8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a8aa:	8bfa      	ldrh	r2, [r7, #30]
 800a8ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	bf28      	it	cs
 800a8b4:	4613      	movcs	r3, r2
 800a8b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a8ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <ip4_frag+0x132>
        poff = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
        continue;
 800a8cc:	e041      	b.n	800a952 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a8ce:	f7ff ff0d 	bl	800a6ec <ip_frag_alloc_pbuf_custom_ref>
 800a8d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d103      	bne.n	800a8e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800a8da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8dc:	f7fc fbca 	bl	8007074 <pbuf_free>
        goto memerr;
 800a8e0:	e08f      	b.n	800aa02 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a8e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a8e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800a8f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2241      	movs	r2, #65	; 0x41
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f7fc f9ff 	bl	8006d00 <pbuf_alloced_custom>
 800a902:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a90a:	69b8      	ldr	r0, [r7, #24]
 800a90c:	f7ff fef6 	bl	800a6fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a912:	f7fc fbaf 	bl	8007074 <pbuf_free>
        goto memerr;
 800a916:	e074      	b.n	800aa02 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7fc fc4b 	bl	80071b4 <pbuf_ref>
      pcr->original = p;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	4a3f      	ldr	r2, [pc, #252]	; (800aa24 <ip4_frag+0x288>)
 800a928:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a92a:	6979      	ldr	r1, [r7, #20]
 800a92c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a92e:	f7fc fc63 	bl	80071f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a932:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800a940:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a944:	2b00      	cmp	r3, #0
 800a946:	d004      	beq.n	800a952 <ip4_frag+0x1b6>
        poff = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800a952:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a956:	2b00      	cmp	r3, #0
 800a958:	d196      	bne.n	800a888 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a95a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a95c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a960:	4413      	add	r3, r2
 800a962:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a968:	f1a3 0213 	sub.w	r2, r3, #19
 800a96c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a970:	429a      	cmp	r2, r3
 800a972:	bfcc      	ite	gt
 800a974:	2301      	movgt	r3, #1
 800a976:	2300      	movle	r3, #0
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a97c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a984:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <ip4_frag+0x1f6>
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a994:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a998:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a99a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fb f89f 	bl	8005ae0 <lwip_htons>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a9aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a9ac:	3314      	adds	r3, #20
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fb f895 	bl	8005ae0 <lwip_htons>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	729a      	strb	r2, [r3, #10]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9d0:	68b8      	ldr	r0, [r7, #8]
 800a9d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d6:	f7fc fb4d 	bl	8007074 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a9da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a9de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800a9e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a9ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800a9f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f47f af19 	bne.w	800a82e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e002      	b.n	800aa06 <ip4_frag+0x26a>
      goto memerr;
 800aa00:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3748      	adds	r7, #72	; 0x48
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	0800d148 	.word	0x0800d148
 800aa14:	0800d324 	.word	0x0800d324
 800aa18:	0800d190 	.word	0x0800d190
 800aa1c:	0800d340 	.word	0x0800d340
 800aa20:	0800d360 	.word	0x0800d360
 800aa24:	0800a735 	.word	0x0800a735

0800aa28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800aa32:	230e      	movs	r3, #14
 800aa34:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	895b      	ldrh	r3, [r3, #10]
 800aa3a:	2b0e      	cmp	r3, #14
 800aa3c:	d96e      	bls.n	800ab1c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7bdb      	ldrb	r3, [r3, #15]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	7b1a      	ldrb	r2, [r3, #12]
 800aa5e:	7b5b      	ldrb	r3, [r3, #13]
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	4313      	orrs	r3, r2
 800aa64:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d023      	beq.n	800aaba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10f      	bne.n	800aa9a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	785b      	ldrb	r3, [r3, #1]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d11b      	bne.n	800aaba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800aa86:	2b5e      	cmp	r3, #94	; 0x5e
 800aa88:	d117      	bne.n	800aaba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7b5b      	ldrb	r3, [r3, #13]
 800aa8e:	f043 0310 	orr.w	r3, r3, #16
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	735a      	strb	r2, [r3, #13]
 800aa98:	e00f      	b.n	800aaba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2206      	movs	r2, #6
 800aa9e:	4928      	ldr	r1, [pc, #160]	; (800ab40 <ethernet_input+0x118>)
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 f8cb 	bl	800ac3c <memcmp>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7b5b      	ldrb	r3, [r3, #13]
 800aab0:	f043 0308 	orr.w	r3, r3, #8
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800aaba:	89fb      	ldrh	r3, [r7, #14]
 800aabc:	2b08      	cmp	r3, #8
 800aabe:	d003      	beq.n	800aac8 <ethernet_input+0xa0>
 800aac0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800aac4:	d014      	beq.n	800aaf0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800aac6:	e032      	b.n	800ab2e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aace:	f003 0308 	and.w	r3, r3, #8
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d024      	beq.n	800ab20 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800aad6:	8afb      	ldrh	r3, [r7, #22]
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fc fa44 	bl	8006f68 <pbuf_remove_header>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d11e      	bne.n	800ab24 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7fe ff31 	bl	8009950 <ip4_input>
      break;
 800aaee:	e013      	b.n	800ab18 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d014      	beq.n	800ab28 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800aafe:	8afb      	ldrh	r3, [r7, #22]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fc fa30 	bl	8006f68 <pbuf_remove_header>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10e      	bne.n	800ab2c <ethernet_input+0x104>
        etharp_input(p, netif);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7fe f8d1 	bl	8008cb8 <etharp_input>
      break;
 800ab16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e00c      	b.n	800ab36 <ethernet_input+0x10e>
    goto free_and_return;
 800ab1c:	bf00      	nop
 800ab1e:	e006      	b.n	800ab2e <ethernet_input+0x106>
        goto free_and_return;
 800ab20:	bf00      	nop
 800ab22:	e004      	b.n	800ab2e <ethernet_input+0x106>
        goto free_and_return;
 800ab24:	bf00      	nop
 800ab26:	e002      	b.n	800ab2e <ethernet_input+0x106>
        goto free_and_return;
 800ab28:	bf00      	nop
 800ab2a:	e000      	b.n	800ab2e <ethernet_input+0x106>
        goto free_and_return;
 800ab2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7fc faa0 	bl	8007074 <pbuf_free>
  return ERR_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800d4a0 	.word	0x0800d4a0

0800ab44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ab52:	8c3b      	ldrh	r3, [r7, #32]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fa ffc3 	bl	8005ae0 <lwip_htons>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ab5e:	210e      	movs	r1, #14
 800ab60:	68b8      	ldr	r0, [r7, #8]
 800ab62:	f7fc f9f1 	bl	8006f48 <pbuf_add_header>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d125      	bne.n	800abb8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	8afa      	ldrh	r2, [r7, #22]
 800ab76:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2206      	movs	r2, #6
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 f86a 	bl	800ac58 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	3306      	adds	r3, #6
 800ab88:	2206      	movs	r2, #6
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f863 	bl	800ac58 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab98:	2b06      	cmp	r3, #6
 800ab9a:	d006      	beq.n	800abaa <ethernet_output+0x66>
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <ethernet_output+0x84>)
 800ab9e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800aba2:	490a      	ldr	r1, [pc, #40]	; (800abcc <ethernet_output+0x88>)
 800aba4:	480a      	ldr	r0, [pc, #40]	; (800abd0 <ethernet_output+0x8c>)
 800aba6:	f000 f917 	bl	800add8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	4798      	blx	r3
 800abb4:	4603      	mov	r3, r0
 800abb6:	e002      	b.n	800abbe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800abb8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800abba:	f06f 0301 	mvn.w	r3, #1
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	0800d370 	.word	0x0800d370
 800abcc:	0800d3a8 	.word	0x0800d3a8
 800abd0:	0800d3dc 	.word	0x0800d3dc

0800abd4 <__libc_init_array>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4d0d      	ldr	r5, [pc, #52]	; (800ac0c <__libc_init_array+0x38>)
 800abd8:	4c0d      	ldr	r4, [pc, #52]	; (800ac10 <__libc_init_array+0x3c>)
 800abda:	1b64      	subs	r4, r4, r5
 800abdc:	10a4      	asrs	r4, r4, #2
 800abde:	2600      	movs	r6, #0
 800abe0:	42a6      	cmp	r6, r4
 800abe2:	d109      	bne.n	800abf8 <__libc_init_array+0x24>
 800abe4:	4d0b      	ldr	r5, [pc, #44]	; (800ac14 <__libc_init_array+0x40>)
 800abe6:	4c0c      	ldr	r4, [pc, #48]	; (800ac18 <__libc_init_array+0x44>)
 800abe8:	f001 f85e 	bl	800bca8 <_init>
 800abec:	1b64      	subs	r4, r4, r5
 800abee:	10a4      	asrs	r4, r4, #2
 800abf0:	2600      	movs	r6, #0
 800abf2:	42a6      	cmp	r6, r4
 800abf4:	d105      	bne.n	800ac02 <__libc_init_array+0x2e>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfc:	4798      	blx	r3
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7ee      	b.n	800abe0 <__libc_init_array+0xc>
 800ac02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac06:	4798      	blx	r3
 800ac08:	3601      	adds	r6, #1
 800ac0a:	e7f2      	b.n	800abf2 <__libc_init_array+0x1e>
 800ac0c:	0800d604 	.word	0x0800d604
 800ac10:	0800d604 	.word	0x0800d604
 800ac14:	0800d604 	.word	0x0800d604
 800ac18:	0800d608 	.word	0x0800d608

0800ac1c <malloc>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <malloc+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f000 b87f 	b.w	800ad24 <_malloc_r>
 800ac26:	bf00      	nop
 800ac28:	2000000c 	.word	0x2000000c

0800ac2c <free>:
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <free+0xc>)
 800ac2e:	4601      	mov	r1, r0
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f000 b827 	b.w	800ac84 <_free_r>
 800ac36:	bf00      	nop
 800ac38:	2000000c 	.word	0x2000000c

0800ac3c <memcmp>:
 800ac3c:	b530      	push	{r4, r5, lr}
 800ac3e:	3901      	subs	r1, #1
 800ac40:	2400      	movs	r4, #0
 800ac42:	42a2      	cmp	r2, r4
 800ac44:	d101      	bne.n	800ac4a <memcmp+0xe>
 800ac46:	2000      	movs	r0, #0
 800ac48:	e005      	b.n	800ac56 <memcmp+0x1a>
 800ac4a:	5d03      	ldrb	r3, [r0, r4]
 800ac4c:	3401      	adds	r4, #1
 800ac4e:	5d0d      	ldrb	r5, [r1, r4]
 800ac50:	42ab      	cmp	r3, r5
 800ac52:	d0f6      	beq.n	800ac42 <memcmp+0x6>
 800ac54:	1b58      	subs	r0, r3, r5
 800ac56:	bd30      	pop	{r4, r5, pc}

0800ac58 <memcpy>:
 800ac58:	440a      	add	r2, r1
 800ac5a:	4291      	cmp	r1, r2
 800ac5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac60:	d100      	bne.n	800ac64 <memcpy+0xc>
 800ac62:	4770      	bx	lr
 800ac64:	b510      	push	{r4, lr}
 800ac66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac6e:	4291      	cmp	r1, r2
 800ac70:	d1f9      	bne.n	800ac66 <memcpy+0xe>
 800ac72:	bd10      	pop	{r4, pc}

0800ac74 <memset>:
 800ac74:	4402      	add	r2, r0
 800ac76:	4603      	mov	r3, r0
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d100      	bne.n	800ac7e <memset+0xa>
 800ac7c:	4770      	bx	lr
 800ac7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac82:	e7f9      	b.n	800ac78 <memset+0x4>

0800ac84 <_free_r>:
 800ac84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d048      	beq.n	800ad1c <_free_r+0x98>
 800ac8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac8e:	9001      	str	r0, [sp, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f1a1 0404 	sub.w	r4, r1, #4
 800ac96:	bfb8      	it	lt
 800ac98:	18e4      	addlt	r4, r4, r3
 800ac9a:	f000 fa2d 	bl	800b0f8 <__malloc_lock>
 800ac9e:	4a20      	ldr	r2, [pc, #128]	; (800ad20 <_free_r+0x9c>)
 800aca0:	9801      	ldr	r0, [sp, #4]
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	4615      	mov	r5, r2
 800aca6:	b933      	cbnz	r3, 800acb6 <_free_r+0x32>
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	6014      	str	r4, [r2, #0]
 800acac:	b003      	add	sp, #12
 800acae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb2:	f000 ba27 	b.w	800b104 <__malloc_unlock>
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	d90b      	bls.n	800acd2 <_free_r+0x4e>
 800acba:	6821      	ldr	r1, [r4, #0]
 800acbc:	1862      	adds	r2, r4, r1
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bf04      	itt	eq
 800acc2:	681a      	ldreq	r2, [r3, #0]
 800acc4:	685b      	ldreq	r3, [r3, #4]
 800acc6:	6063      	str	r3, [r4, #4]
 800acc8:	bf04      	itt	eq
 800acca:	1852      	addeq	r2, r2, r1
 800accc:	6022      	streq	r2, [r4, #0]
 800acce:	602c      	str	r4, [r5, #0]
 800acd0:	e7ec      	b.n	800acac <_free_r+0x28>
 800acd2:	461a      	mov	r2, r3
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	b10b      	cbz	r3, 800acdc <_free_r+0x58>
 800acd8:	42a3      	cmp	r3, r4
 800acda:	d9fa      	bls.n	800acd2 <_free_r+0x4e>
 800acdc:	6811      	ldr	r1, [r2, #0]
 800acde:	1855      	adds	r5, r2, r1
 800ace0:	42a5      	cmp	r5, r4
 800ace2:	d10b      	bne.n	800acfc <_free_r+0x78>
 800ace4:	6824      	ldr	r4, [r4, #0]
 800ace6:	4421      	add	r1, r4
 800ace8:	1854      	adds	r4, r2, r1
 800acea:	42a3      	cmp	r3, r4
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	d1dd      	bne.n	800acac <_free_r+0x28>
 800acf0:	681c      	ldr	r4, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	6053      	str	r3, [r2, #4]
 800acf6:	4421      	add	r1, r4
 800acf8:	6011      	str	r1, [r2, #0]
 800acfa:	e7d7      	b.n	800acac <_free_r+0x28>
 800acfc:	d902      	bls.n	800ad04 <_free_r+0x80>
 800acfe:	230c      	movs	r3, #12
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	e7d3      	b.n	800acac <_free_r+0x28>
 800ad04:	6825      	ldr	r5, [r4, #0]
 800ad06:	1961      	adds	r1, r4, r5
 800ad08:	428b      	cmp	r3, r1
 800ad0a:	bf04      	itt	eq
 800ad0c:	6819      	ldreq	r1, [r3, #0]
 800ad0e:	685b      	ldreq	r3, [r3, #4]
 800ad10:	6063      	str	r3, [r4, #4]
 800ad12:	bf04      	itt	eq
 800ad14:	1949      	addeq	r1, r1, r5
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	6054      	str	r4, [r2, #4]
 800ad1a:	e7c7      	b.n	800acac <_free_r+0x28>
 800ad1c:	b003      	add	sp, #12
 800ad1e:	bd30      	pop	{r4, r5, pc}
 800ad20:	200001ec 	.word	0x200001ec

0800ad24 <_malloc_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	1ccd      	adds	r5, r1, #3
 800ad28:	f025 0503 	bic.w	r5, r5, #3
 800ad2c:	3508      	adds	r5, #8
 800ad2e:	2d0c      	cmp	r5, #12
 800ad30:	bf38      	it	cc
 800ad32:	250c      	movcc	r5, #12
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	4606      	mov	r6, r0
 800ad38:	db01      	blt.n	800ad3e <_malloc_r+0x1a>
 800ad3a:	42a9      	cmp	r1, r5
 800ad3c:	d903      	bls.n	800ad46 <_malloc_r+0x22>
 800ad3e:	230c      	movs	r3, #12
 800ad40:	6033      	str	r3, [r6, #0]
 800ad42:	2000      	movs	r0, #0
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad46:	f000 f9d7 	bl	800b0f8 <__malloc_lock>
 800ad4a:	4921      	ldr	r1, [pc, #132]	; (800add0 <_malloc_r+0xac>)
 800ad4c:	680a      	ldr	r2, [r1, #0]
 800ad4e:	4614      	mov	r4, r2
 800ad50:	b99c      	cbnz	r4, 800ad7a <_malloc_r+0x56>
 800ad52:	4f20      	ldr	r7, [pc, #128]	; (800add4 <_malloc_r+0xb0>)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	b923      	cbnz	r3, 800ad62 <_malloc_r+0x3e>
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f000 f894 	bl	800ae88 <_sbrk_r>
 800ad60:	6038      	str	r0, [r7, #0]
 800ad62:	4629      	mov	r1, r5
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f88f 	bl	800ae88 <_sbrk_r>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d123      	bne.n	800adb6 <_malloc_r+0x92>
 800ad6e:	230c      	movs	r3, #12
 800ad70:	6033      	str	r3, [r6, #0]
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f9c6 	bl	800b104 <__malloc_unlock>
 800ad78:	e7e3      	b.n	800ad42 <_malloc_r+0x1e>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	1b5b      	subs	r3, r3, r5
 800ad7e:	d417      	bmi.n	800adb0 <_malloc_r+0x8c>
 800ad80:	2b0b      	cmp	r3, #11
 800ad82:	d903      	bls.n	800ad8c <_malloc_r+0x68>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	441c      	add	r4, r3
 800ad88:	6025      	str	r5, [r4, #0]
 800ad8a:	e004      	b.n	800ad96 <_malloc_r+0x72>
 800ad8c:	6863      	ldr	r3, [r4, #4]
 800ad8e:	42a2      	cmp	r2, r4
 800ad90:	bf0c      	ite	eq
 800ad92:	600b      	streq	r3, [r1, #0]
 800ad94:	6053      	strne	r3, [r2, #4]
 800ad96:	4630      	mov	r0, r6
 800ad98:	f000 f9b4 	bl	800b104 <__malloc_unlock>
 800ad9c:	f104 000b 	add.w	r0, r4, #11
 800ada0:	1d23      	adds	r3, r4, #4
 800ada2:	f020 0007 	bic.w	r0, r0, #7
 800ada6:	1ac2      	subs	r2, r0, r3
 800ada8:	d0cc      	beq.n	800ad44 <_malloc_r+0x20>
 800adaa:	1a1b      	subs	r3, r3, r0
 800adac:	50a3      	str	r3, [r4, r2]
 800adae:	e7c9      	b.n	800ad44 <_malloc_r+0x20>
 800adb0:	4622      	mov	r2, r4
 800adb2:	6864      	ldr	r4, [r4, #4]
 800adb4:	e7cc      	b.n	800ad50 <_malloc_r+0x2c>
 800adb6:	1cc4      	adds	r4, r0, #3
 800adb8:	f024 0403 	bic.w	r4, r4, #3
 800adbc:	42a0      	cmp	r0, r4
 800adbe:	d0e3      	beq.n	800ad88 <_malloc_r+0x64>
 800adc0:	1a21      	subs	r1, r4, r0
 800adc2:	4630      	mov	r0, r6
 800adc4:	f000 f860 	bl	800ae88 <_sbrk_r>
 800adc8:	3001      	adds	r0, #1
 800adca:	d1dd      	bne.n	800ad88 <_malloc_r+0x64>
 800adcc:	e7cf      	b.n	800ad6e <_malloc_r+0x4a>
 800adce:	bf00      	nop
 800add0:	200001ec 	.word	0x200001ec
 800add4:	200001f0 	.word	0x200001f0

0800add8 <iprintf>:
 800add8:	b40f      	push	{r0, r1, r2, r3}
 800adda:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <iprintf+0x2c>)
 800addc:	b513      	push	{r0, r1, r4, lr}
 800adde:	681c      	ldr	r4, [r3, #0]
 800ade0:	b124      	cbz	r4, 800adec <iprintf+0x14>
 800ade2:	69a3      	ldr	r3, [r4, #24]
 800ade4:	b913      	cbnz	r3, 800adec <iprintf+0x14>
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 f8d4 	bl	800af94 <__sinit>
 800adec:	ab05      	add	r3, sp, #20
 800adee:	9a04      	ldr	r2, [sp, #16]
 800adf0:	68a1      	ldr	r1, [r4, #8]
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 f9b5 	bl	800b164 <_vfiprintf_r>
 800adfa:	b002      	add	sp, #8
 800adfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae00:	b004      	add	sp, #16
 800ae02:	4770      	bx	lr
 800ae04:	2000000c 	.word	0x2000000c

0800ae08 <rand>:
 800ae08:	4b17      	ldr	r3, [pc, #92]	; (800ae68 <rand+0x60>)
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	681c      	ldr	r4, [r3, #0]
 800ae0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae10:	b9b3      	cbnz	r3, 800ae40 <rand+0x38>
 800ae12:	2018      	movs	r0, #24
 800ae14:	f7ff ff02 	bl	800ac1c <malloc>
 800ae18:	63a0      	str	r0, [r4, #56]	; 0x38
 800ae1a:	b928      	cbnz	r0, 800ae28 <rand+0x20>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <rand+0x64>)
 800ae20:	4813      	ldr	r0, [pc, #76]	; (800ae70 <rand+0x68>)
 800ae22:	214e      	movs	r1, #78	; 0x4e
 800ae24:	f000 f840 	bl	800aea8 <__assert_func>
 800ae28:	4a12      	ldr	r2, [pc, #72]	; (800ae74 <rand+0x6c>)
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <rand+0x70>)
 800ae2c:	e9c0 2300 	strd	r2, r3, [r0]
 800ae30:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <rand+0x74>)
 800ae32:	6083      	str	r3, [r0, #8]
 800ae34:	230b      	movs	r3, #11
 800ae36:	8183      	strh	r3, [r0, #12]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ae40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae42:	480f      	ldr	r0, [pc, #60]	; (800ae80 <rand+0x78>)
 800ae44:	690a      	ldr	r2, [r1, #16]
 800ae46:	694b      	ldr	r3, [r1, #20]
 800ae48:	4c0e      	ldr	r4, [pc, #56]	; (800ae84 <rand+0x7c>)
 800ae4a:	4350      	muls	r0, r2
 800ae4c:	fb04 0003 	mla	r0, r4, r3, r0
 800ae50:	fba2 3404 	umull	r3, r4, r2, r4
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	4404      	add	r4, r0
 800ae58:	f144 0000 	adc.w	r0, r4, #0
 800ae5c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ae60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	bf00      	nop
 800ae68:	2000000c 	.word	0x2000000c
 800ae6c:	0800d4b4 	.word	0x0800d4b4
 800ae70:	0800d4cb 	.word	0x0800d4cb
 800ae74:	abcd330e 	.word	0xabcd330e
 800ae78:	e66d1234 	.word	0xe66d1234
 800ae7c:	0005deec 	.word	0x0005deec
 800ae80:	5851f42d 	.word	0x5851f42d
 800ae84:	4c957f2d 	.word	0x4c957f2d

0800ae88 <_sbrk_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d06      	ldr	r5, [pc, #24]	; (800aea4 <_sbrk_r+0x1c>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	602b      	str	r3, [r5, #0]
 800ae94:	f7f6 ff58 	bl	8001d48 <_sbrk>
 800ae98:	1c43      	adds	r3, r0, #1
 800ae9a:	d102      	bne.n	800aea2 <_sbrk_r+0x1a>
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	b103      	cbz	r3, 800aea2 <_sbrk_r+0x1a>
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	200085e4 	.word	0x200085e4

0800aea8 <__assert_func>:
 800aea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeaa:	4614      	mov	r4, r2
 800aeac:	461a      	mov	r2, r3
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <__assert_func+0x2c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	68d8      	ldr	r0, [r3, #12]
 800aeb6:	b14c      	cbz	r4, 800aecc <__assert_func+0x24>
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <__assert_func+0x30>)
 800aeba:	9100      	str	r1, [sp, #0]
 800aebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aec0:	4906      	ldr	r1, [pc, #24]	; (800aedc <__assert_func+0x34>)
 800aec2:	462b      	mov	r3, r5
 800aec4:	f000 f8e4 	bl	800b090 <fiprintf>
 800aec8:	f000 fd26 	bl	800b918 <abort>
 800aecc:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <__assert_func+0x38>)
 800aece:	461c      	mov	r4, r3
 800aed0:	e7f3      	b.n	800aeba <__assert_func+0x12>
 800aed2:	bf00      	nop
 800aed4:	2000000c 	.word	0x2000000c
 800aed8:	0800d52a 	.word	0x0800d52a
 800aedc:	0800d537 	.word	0x0800d537
 800aee0:	0800d565 	.word	0x0800d565

0800aee4 <std>:
 800aee4:	2300      	movs	r3, #0
 800aee6:	b510      	push	{r4, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	e9c0 3300 	strd	r3, r3, [r0]
 800aeee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aef2:	6083      	str	r3, [r0, #8]
 800aef4:	8181      	strh	r1, [r0, #12]
 800aef6:	6643      	str	r3, [r0, #100]	; 0x64
 800aef8:	81c2      	strh	r2, [r0, #14]
 800aefa:	6183      	str	r3, [r0, #24]
 800aefc:	4619      	mov	r1, r3
 800aefe:	2208      	movs	r2, #8
 800af00:	305c      	adds	r0, #92	; 0x5c
 800af02:	f7ff feb7 	bl	800ac74 <memset>
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <std+0x38>)
 800af08:	6263      	str	r3, [r4, #36]	; 0x24
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x3c>)
 800af0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x40>)
 800af10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af12:	4b05      	ldr	r3, [pc, #20]	; (800af28 <std+0x44>)
 800af14:	6224      	str	r4, [r4, #32]
 800af16:	6323      	str	r3, [r4, #48]	; 0x30
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	bf00      	nop
 800af1c:	0800b6ed 	.word	0x0800b6ed
 800af20:	0800b70f 	.word	0x0800b70f
 800af24:	0800b747 	.word	0x0800b747
 800af28:	0800b76b 	.word	0x0800b76b

0800af2c <_cleanup_r>:
 800af2c:	4901      	ldr	r1, [pc, #4]	; (800af34 <_cleanup_r+0x8>)
 800af2e:	f000 b8c1 	b.w	800b0b4 <_fwalk_reent>
 800af32:	bf00      	nop
 800af34:	0800ba55 	.word	0x0800ba55

0800af38 <__sfmoreglue>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	1e4a      	subs	r2, r1, #1
 800af3c:	2568      	movs	r5, #104	; 0x68
 800af3e:	4355      	muls	r5, r2
 800af40:	460e      	mov	r6, r1
 800af42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af46:	f7ff feed 	bl	800ad24 <_malloc_r>
 800af4a:	4604      	mov	r4, r0
 800af4c:	b140      	cbz	r0, 800af60 <__sfmoreglue+0x28>
 800af4e:	2100      	movs	r1, #0
 800af50:	e9c0 1600 	strd	r1, r6, [r0]
 800af54:	300c      	adds	r0, #12
 800af56:	60a0      	str	r0, [r4, #8]
 800af58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af5c:	f7ff fe8a 	bl	800ac74 <memset>
 800af60:	4620      	mov	r0, r4
 800af62:	bd70      	pop	{r4, r5, r6, pc}

0800af64 <__sfp_lock_acquire>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__sfp_lock_acquire+0x8>)
 800af66:	f000 b8c5 	b.w	800b0f4 <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	200085f0 	.word	0x200085f0

0800af70 <__sfp_lock_release>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__sfp_lock_release+0x8>)
 800af72:	f000 b8c0 	b.w	800b0f6 <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	200085f0 	.word	0x200085f0

0800af7c <__sinit_lock_acquire>:
 800af7c:	4801      	ldr	r0, [pc, #4]	; (800af84 <__sinit_lock_acquire+0x8>)
 800af7e:	f000 b8b9 	b.w	800b0f4 <__retarget_lock_acquire_recursive>
 800af82:	bf00      	nop
 800af84:	200085eb 	.word	0x200085eb

0800af88 <__sinit_lock_release>:
 800af88:	4801      	ldr	r0, [pc, #4]	; (800af90 <__sinit_lock_release+0x8>)
 800af8a:	f000 b8b4 	b.w	800b0f6 <__retarget_lock_release_recursive>
 800af8e:	bf00      	nop
 800af90:	200085eb 	.word	0x200085eb

0800af94 <__sinit>:
 800af94:	b510      	push	{r4, lr}
 800af96:	4604      	mov	r4, r0
 800af98:	f7ff fff0 	bl	800af7c <__sinit_lock_acquire>
 800af9c:	69a3      	ldr	r3, [r4, #24]
 800af9e:	b11b      	cbz	r3, 800afa8 <__sinit+0x14>
 800afa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa4:	f7ff bff0 	b.w	800af88 <__sinit_lock_release>
 800afa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afac:	6523      	str	r3, [r4, #80]	; 0x50
 800afae:	4b13      	ldr	r3, [pc, #76]	; (800affc <__sinit+0x68>)
 800afb0:	4a13      	ldr	r2, [pc, #76]	; (800b000 <__sinit+0x6c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	bf04      	itt	eq
 800afba:	2301      	moveq	r3, #1
 800afbc:	61a3      	streq	r3, [r4, #24]
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 f820 	bl	800b004 <__sfp>
 800afc4:	6060      	str	r0, [r4, #4]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f81c 	bl	800b004 <__sfp>
 800afcc:	60a0      	str	r0, [r4, #8]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f818 	bl	800b004 <__sfp>
 800afd4:	2200      	movs	r2, #0
 800afd6:	60e0      	str	r0, [r4, #12]
 800afd8:	2104      	movs	r1, #4
 800afda:	6860      	ldr	r0, [r4, #4]
 800afdc:	f7ff ff82 	bl	800aee4 <std>
 800afe0:	68a0      	ldr	r0, [r4, #8]
 800afe2:	2201      	movs	r2, #1
 800afe4:	2109      	movs	r1, #9
 800afe6:	f7ff ff7d 	bl	800aee4 <std>
 800afea:	68e0      	ldr	r0, [r4, #12]
 800afec:	2202      	movs	r2, #2
 800afee:	2112      	movs	r1, #18
 800aff0:	f7ff ff78 	bl	800aee4 <std>
 800aff4:	2301      	movs	r3, #1
 800aff6:	61a3      	str	r3, [r4, #24]
 800aff8:	e7d2      	b.n	800afa0 <__sinit+0xc>
 800affa:	bf00      	nop
 800affc:	0800d4b0 	.word	0x0800d4b0
 800b000:	0800af2d 	.word	0x0800af2d

0800b004 <__sfp>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	4607      	mov	r7, r0
 800b008:	f7ff ffac 	bl	800af64 <__sfp_lock_acquire>
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <__sfp+0x84>)
 800b00e:	681e      	ldr	r6, [r3, #0]
 800b010:	69b3      	ldr	r3, [r6, #24]
 800b012:	b913      	cbnz	r3, 800b01a <__sfp+0x16>
 800b014:	4630      	mov	r0, r6
 800b016:	f7ff ffbd 	bl	800af94 <__sinit>
 800b01a:	3648      	adds	r6, #72	; 0x48
 800b01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b020:	3b01      	subs	r3, #1
 800b022:	d503      	bpl.n	800b02c <__sfp+0x28>
 800b024:	6833      	ldr	r3, [r6, #0]
 800b026:	b30b      	cbz	r3, 800b06c <__sfp+0x68>
 800b028:	6836      	ldr	r6, [r6, #0]
 800b02a:	e7f7      	b.n	800b01c <__sfp+0x18>
 800b02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b030:	b9d5      	cbnz	r5, 800b068 <__sfp+0x64>
 800b032:	4b16      	ldr	r3, [pc, #88]	; (800b08c <__sfp+0x88>)
 800b034:	60e3      	str	r3, [r4, #12]
 800b036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b03a:	6665      	str	r5, [r4, #100]	; 0x64
 800b03c:	f000 f859 	bl	800b0f2 <__retarget_lock_init_recursive>
 800b040:	f7ff ff96 	bl	800af70 <__sfp_lock_release>
 800b044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b04c:	6025      	str	r5, [r4, #0]
 800b04e:	61a5      	str	r5, [r4, #24]
 800b050:	2208      	movs	r2, #8
 800b052:	4629      	mov	r1, r5
 800b054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b058:	f7ff fe0c 	bl	800ac74 <memset>
 800b05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b064:	4620      	mov	r0, r4
 800b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b068:	3468      	adds	r4, #104	; 0x68
 800b06a:	e7d9      	b.n	800b020 <__sfp+0x1c>
 800b06c:	2104      	movs	r1, #4
 800b06e:	4638      	mov	r0, r7
 800b070:	f7ff ff62 	bl	800af38 <__sfmoreglue>
 800b074:	4604      	mov	r4, r0
 800b076:	6030      	str	r0, [r6, #0]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d1d5      	bne.n	800b028 <__sfp+0x24>
 800b07c:	f7ff ff78 	bl	800af70 <__sfp_lock_release>
 800b080:	230c      	movs	r3, #12
 800b082:	603b      	str	r3, [r7, #0]
 800b084:	e7ee      	b.n	800b064 <__sfp+0x60>
 800b086:	bf00      	nop
 800b088:	0800d4b0 	.word	0x0800d4b0
 800b08c:	ffff0001 	.word	0xffff0001

0800b090 <fiprintf>:
 800b090:	b40e      	push	{r1, r2, r3}
 800b092:	b503      	push	{r0, r1, lr}
 800b094:	4601      	mov	r1, r0
 800b096:	ab03      	add	r3, sp, #12
 800b098:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <fiprintf+0x20>)
 800b09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09e:	6800      	ldr	r0, [r0, #0]
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	f000 f85f 	bl	800b164 <_vfiprintf_r>
 800b0a6:	b002      	add	sp, #8
 800b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ac:	b003      	add	sp, #12
 800b0ae:	4770      	bx	lr
 800b0b0:	2000000c 	.word	0x2000000c

0800b0b4 <_fwalk_reent>:
 800b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	4688      	mov	r8, r1
 800b0bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c0:	2700      	movs	r7, #0
 800b0c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ca:	d505      	bpl.n	800b0d8 <_fwalk_reent+0x24>
 800b0cc:	6824      	ldr	r4, [r4, #0]
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	d1f7      	bne.n	800b0c2 <_fwalk_reent+0xe>
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d907      	bls.n	800b0ee <_fwalk_reent+0x3a>
 800b0de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	d003      	beq.n	800b0ee <_fwalk_reent+0x3a>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	47c0      	blx	r8
 800b0ec:	4307      	orrs	r7, r0
 800b0ee:	3568      	adds	r5, #104	; 0x68
 800b0f0:	e7e9      	b.n	800b0c6 <_fwalk_reent+0x12>

0800b0f2 <__retarget_lock_init_recursive>:
 800b0f2:	4770      	bx	lr

0800b0f4 <__retarget_lock_acquire_recursive>:
 800b0f4:	4770      	bx	lr

0800b0f6 <__retarget_lock_release_recursive>:
 800b0f6:	4770      	bx	lr

0800b0f8 <__malloc_lock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__malloc_lock+0x8>)
 800b0fa:	f7ff bffb 	b.w	800b0f4 <__retarget_lock_acquire_recursive>
 800b0fe:	bf00      	nop
 800b100:	200085ec 	.word	0x200085ec

0800b104 <__malloc_unlock>:
 800b104:	4801      	ldr	r0, [pc, #4]	; (800b10c <__malloc_unlock+0x8>)
 800b106:	f7ff bff6 	b.w	800b0f6 <__retarget_lock_release_recursive>
 800b10a:	bf00      	nop
 800b10c:	200085ec 	.word	0x200085ec

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	b410      	push	{r4}
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	da08      	bge.n	800b12e <__sfputc_r+0x1e>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db01      	blt.n	800b126 <__sfputc_r+0x16>
 800b122:	290a      	cmp	r1, #10
 800b124:	d103      	bne.n	800b12e <__sfputc_r+0x1e>
 800b126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12a:	f000 bb23 	b.w	800b774 <__swbuf_r>
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	1c58      	adds	r0, r3, #1
 800b132:	6010      	str	r0, [r2, #0]
 800b134:	7019      	strb	r1, [r3, #0]
 800b136:	4608      	mov	r0, r1
 800b138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <__sfputs_r>:
 800b13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	460f      	mov	r7, r1
 800b144:	4614      	mov	r4, r2
 800b146:	18d5      	adds	r5, r2, r3
 800b148:	42ac      	cmp	r4, r5
 800b14a:	d101      	bne.n	800b150 <__sfputs_r+0x12>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e007      	b.n	800b160 <__sfputs_r+0x22>
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	463a      	mov	r2, r7
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ffda 	bl	800b110 <__sfputc_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d1f3      	bne.n	800b148 <__sfputs_r+0xa>
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b164 <_vfiprintf_r>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	460d      	mov	r5, r1
 800b16a:	b09d      	sub	sp, #116	; 0x74
 800b16c:	4614      	mov	r4, r2
 800b16e:	4698      	mov	r8, r3
 800b170:	4606      	mov	r6, r0
 800b172:	b118      	cbz	r0, 800b17c <_vfiprintf_r+0x18>
 800b174:	6983      	ldr	r3, [r0, #24]
 800b176:	b90b      	cbnz	r3, 800b17c <_vfiprintf_r+0x18>
 800b178:	f7ff ff0c 	bl	800af94 <__sinit>
 800b17c:	4b89      	ldr	r3, [pc, #548]	; (800b3a4 <_vfiprintf_r+0x240>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	d11b      	bne.n	800b1ba <_vfiprintf_r+0x56>
 800b182:	6875      	ldr	r5, [r6, #4]
 800b184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b186:	07d9      	lsls	r1, r3, #31
 800b188:	d405      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b192:	f7ff ffaf 	bl	800b0f4 <__retarget_lock_acquire_recursive>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	071b      	lsls	r3, r3, #28
 800b19a:	d501      	bpl.n	800b1a0 <_vfiprintf_r+0x3c>
 800b19c:	692b      	ldr	r3, [r5, #16]
 800b19e:	b9eb      	cbnz	r3, 800b1dc <_vfiprintf_r+0x78>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 fb4a 	bl	800b83c <__swsetup_r>
 800b1a8:	b1c0      	cbz	r0, 800b1dc <_vfiprintf_r+0x78>
 800b1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ac:	07dc      	lsls	r4, r3, #31
 800b1ae:	d50e      	bpl.n	800b1ce <_vfiprintf_r+0x6a>
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b4:	b01d      	add	sp, #116	; 0x74
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	4b7b      	ldr	r3, [pc, #492]	; (800b3a8 <_vfiprintf_r+0x244>)
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x60>
 800b1c0:	68b5      	ldr	r5, [r6, #8]
 800b1c2:	e7df      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1c4:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <_vfiprintf_r+0x248>)
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	bf08      	it	eq
 800b1ca:	68f5      	ldreq	r5, [r6, #12]
 800b1cc:	e7da      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	0598      	lsls	r0, r3, #22
 800b1d2:	d4ed      	bmi.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff ff8e 	bl	800b0f6 <__retarget_lock_release_recursive>
 800b1da:	e7e9      	b.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ea:	2330      	movs	r3, #48	; 0x30
 800b1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3b0 <_vfiprintf_r+0x24c>
 800b1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f4:	f04f 0901 	mov.w	r9, #1
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	469a      	mov	sl, r3
 800b1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b200:	b10a      	cbz	r2, 800b206 <_vfiprintf_r+0xa2>
 800b202:	2a25      	cmp	r2, #37	; 0x25
 800b204:	d1f9      	bne.n	800b1fa <_vfiprintf_r+0x96>
 800b206:	ebba 0b04 	subs.w	fp, sl, r4
 800b20a:	d00b      	beq.n	800b224 <_vfiprintf_r+0xc0>
 800b20c:	465b      	mov	r3, fp
 800b20e:	4622      	mov	r2, r4
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff ff93 	bl	800b13e <__sfputs_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	f000 80aa 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b220:	445a      	add	r2, fp
 800b222:	9209      	str	r2, [sp, #36]	; 0x24
 800b224:	f89a 3000 	ldrb.w	r3, [sl]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80a2 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b22e:	2300      	movs	r3, #0
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b238:	f10a 0a01 	add.w	sl, sl, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b244:	931a      	str	r3, [sp, #104]	; 0x68
 800b246:	4654      	mov	r4, sl
 800b248:	2205      	movs	r2, #5
 800b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24e:	4858      	ldr	r0, [pc, #352]	; (800b3b0 <_vfiprintf_r+0x24c>)
 800b250:	f7f4 ffc6 	bl	80001e0 <memchr>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	b9d8      	cbnz	r0, 800b290 <_vfiprintf_r+0x12c>
 800b258:	06d1      	lsls	r1, r2, #27
 800b25a:	bf44      	itt	mi
 800b25c:	2320      	movmi	r3, #32
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	0713      	lsls	r3, r2, #28
 800b264:	bf44      	itt	mi
 800b266:	232b      	movmi	r3, #43	; 0x2b
 800b268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b26c:	f89a 3000 	ldrb.w	r3, [sl]
 800b270:	2b2a      	cmp	r3, #42	; 0x2a
 800b272:	d015      	beq.n	800b2a0 <_vfiprintf_r+0x13c>
 800b274:	9a07      	ldr	r2, [sp, #28]
 800b276:	4654      	mov	r4, sl
 800b278:	2000      	movs	r0, #0
 800b27a:	f04f 0c0a 	mov.w	ip, #10
 800b27e:	4621      	mov	r1, r4
 800b280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b284:	3b30      	subs	r3, #48	; 0x30
 800b286:	2b09      	cmp	r3, #9
 800b288:	d94e      	bls.n	800b328 <_vfiprintf_r+0x1c4>
 800b28a:	b1b0      	cbz	r0, 800b2ba <_vfiprintf_r+0x156>
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	e014      	b.n	800b2ba <_vfiprintf_r+0x156>
 800b290:	eba0 0308 	sub.w	r3, r0, r8
 800b294:	fa09 f303 	lsl.w	r3, r9, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	46a2      	mov	sl, r4
 800b29e:	e7d2      	b.n	800b246 <_vfiprintf_r+0xe2>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	1d19      	adds	r1, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	9103      	str	r1, [sp, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfbb      	ittet	lt
 800b2ac:	425b      	neglt	r3, r3
 800b2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b2:	9307      	strge	r3, [sp, #28]
 800b2b4:	9307      	strlt	r3, [sp, #28]
 800b2b6:	bfb8      	it	lt
 800b2b8:	9204      	strlt	r2, [sp, #16]
 800b2ba:	7823      	ldrb	r3, [r4, #0]
 800b2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2be:	d10c      	bne.n	800b2da <_vfiprintf_r+0x176>
 800b2c0:	7863      	ldrb	r3, [r4, #1]
 800b2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c4:	d135      	bne.n	800b332 <_vfiprintf_r+0x1ce>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9203      	str	r2, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb8      	it	lt
 800b2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3c0 <_vfiprintf_r+0x25c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ff7c 	bl	80001e0 <memchr>
 800b2e8:	b140      	cbz	r0, 800b2fc <_vfiprintf_r+0x198>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	482c      	ldr	r0, [pc, #176]	; (800b3b4 <_vfiprintf_r+0x250>)
 800b302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b306:	2206      	movs	r2, #6
 800b308:	f7f4 ff6a 	bl	80001e0 <memchr>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d03f      	beq.n	800b390 <_vfiprintf_r+0x22c>
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <_vfiprintf_r+0x254>)
 800b312:	bb1b      	cbnz	r3, 800b35c <_vfiprintf_r+0x1f8>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	3308      	adds	r3, #8
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	443b      	add	r3, r7
 800b324:	9309      	str	r3, [sp, #36]	; 0x24
 800b326:	e767      	b.n	800b1f8 <_vfiprintf_r+0x94>
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	460c      	mov	r4, r1
 800b32e:	2001      	movs	r0, #1
 800b330:	e7a5      	b.n	800b27e <_vfiprintf_r+0x11a>
 800b332:	2300      	movs	r3, #0
 800b334:	3401      	adds	r4, #1
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b344:	3a30      	subs	r2, #48	; 0x30
 800b346:	2a09      	cmp	r2, #9
 800b348:	d903      	bls.n	800b352 <_vfiprintf_r+0x1ee>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c5      	beq.n	800b2da <_vfiprintf_r+0x176>
 800b34e:	9105      	str	r1, [sp, #20]
 800b350:	e7c3      	b.n	800b2da <_vfiprintf_r+0x176>
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	4604      	mov	r4, r0
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f0      	b.n	800b33e <_vfiprintf_r+0x1da>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f3af 8000 	nop.w
 800b36c:	4607      	mov	r7, r0
 800b36e:	1c78      	adds	r0, r7, #1
 800b370:	d1d6      	bne.n	800b320 <_vfiprintf_r+0x1bc>
 800b372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d405      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	059a      	lsls	r2, r3, #22
 800b37c:	d402      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b380:	f7ff feb9 	bl	800b0f6 <__retarget_lock_release_recursive>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af12 	bmi.w	800b1b0 <_vfiprintf_r+0x4c>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	e711      	b.n	800b1b4 <_vfiprintf_r+0x50>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f000 f880 	bl	800b4a0 <_printf_i>
 800b3a0:	e7e4      	b.n	800b36c <_vfiprintf_r+0x208>
 800b3a2:	bf00      	nop
 800b3a4:	0800d588 	.word	0x0800d588
 800b3a8:	0800d5a8 	.word	0x0800d5a8
 800b3ac:	0800d568 	.word	0x0800d568
 800b3b0:	0800d5c8 	.word	0x0800d5c8
 800b3b4:	0800d5d2 	.word	0x0800d5d2
 800b3b8:	00000000 	.word	0x00000000
 800b3bc:	0800b13f 	.word	0x0800b13f
 800b3c0:	0800d5ce 	.word	0x0800d5ce

0800b3c4 <_printf_common>:
 800b3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c8:	4616      	mov	r6, r2
 800b3ca:	4699      	mov	r9, r3
 800b3cc:	688a      	ldr	r2, [r1, #8]
 800b3ce:	690b      	ldr	r3, [r1, #16]
 800b3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	bfb8      	it	lt
 800b3d8:	4613      	movlt	r3, r2
 800b3da:	6033      	str	r3, [r6, #0]
 800b3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b10a      	cbz	r2, 800b3ea <_printf_common+0x26>
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	6033      	str	r3, [r6, #0]
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	0699      	lsls	r1, r3, #26
 800b3ee:	bf42      	ittt	mi
 800b3f0:	6833      	ldrmi	r3, [r6, #0]
 800b3f2:	3302      	addmi	r3, #2
 800b3f4:	6033      	strmi	r3, [r6, #0]
 800b3f6:	6825      	ldr	r5, [r4, #0]
 800b3f8:	f015 0506 	ands.w	r5, r5, #6
 800b3fc:	d106      	bne.n	800b40c <_printf_common+0x48>
 800b3fe:	f104 0a19 	add.w	sl, r4, #25
 800b402:	68e3      	ldr	r3, [r4, #12]
 800b404:	6832      	ldr	r2, [r6, #0]
 800b406:	1a9b      	subs	r3, r3, r2
 800b408:	42ab      	cmp	r3, r5
 800b40a:	dc26      	bgt.n	800b45a <_printf_common+0x96>
 800b40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b410:	1e13      	subs	r3, r2, #0
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	bf18      	it	ne
 800b416:	2301      	movne	r3, #1
 800b418:	0692      	lsls	r2, r2, #26
 800b41a:	d42b      	bmi.n	800b474 <_printf_common+0xb0>
 800b41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b420:	4649      	mov	r1, r9
 800b422:	4638      	mov	r0, r7
 800b424:	47c0      	blx	r8
 800b426:	3001      	adds	r0, #1
 800b428:	d01e      	beq.n	800b468 <_printf_common+0xa4>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	68e5      	ldr	r5, [r4, #12]
 800b42e:	6832      	ldr	r2, [r6, #0]
 800b430:	f003 0306 	and.w	r3, r3, #6
 800b434:	2b04      	cmp	r3, #4
 800b436:	bf08      	it	eq
 800b438:	1aad      	subeq	r5, r5, r2
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	6922      	ldr	r2, [r4, #16]
 800b43e:	bf0c      	ite	eq
 800b440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b444:	2500      	movne	r5, #0
 800b446:	4293      	cmp	r3, r2
 800b448:	bfc4      	itt	gt
 800b44a:	1a9b      	subgt	r3, r3, r2
 800b44c:	18ed      	addgt	r5, r5, r3
 800b44e:	2600      	movs	r6, #0
 800b450:	341a      	adds	r4, #26
 800b452:	42b5      	cmp	r5, r6
 800b454:	d11a      	bne.n	800b48c <_printf_common+0xc8>
 800b456:	2000      	movs	r0, #0
 800b458:	e008      	b.n	800b46c <_printf_common+0xa8>
 800b45a:	2301      	movs	r3, #1
 800b45c:	4652      	mov	r2, sl
 800b45e:	4649      	mov	r1, r9
 800b460:	4638      	mov	r0, r7
 800b462:	47c0      	blx	r8
 800b464:	3001      	adds	r0, #1
 800b466:	d103      	bne.n	800b470 <_printf_common+0xac>
 800b468:	f04f 30ff 	mov.w	r0, #4294967295
 800b46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b470:	3501      	adds	r5, #1
 800b472:	e7c6      	b.n	800b402 <_printf_common+0x3e>
 800b474:	18e1      	adds	r1, r4, r3
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	2030      	movs	r0, #48	; 0x30
 800b47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b47e:	4422      	add	r2, r4
 800b480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b488:	3302      	adds	r3, #2
 800b48a:	e7c7      	b.n	800b41c <_printf_common+0x58>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4622      	mov	r2, r4
 800b490:	4649      	mov	r1, r9
 800b492:	4638      	mov	r0, r7
 800b494:	47c0      	blx	r8
 800b496:	3001      	adds	r0, #1
 800b498:	d0e6      	beq.n	800b468 <_printf_common+0xa4>
 800b49a:	3601      	adds	r6, #1
 800b49c:	e7d9      	b.n	800b452 <_printf_common+0x8e>
	...

0800b4a0 <_printf_i>:
 800b4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	4691      	mov	r9, r2
 800b4a8:	7e27      	ldrb	r7, [r4, #24]
 800b4aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4ac:	2f78      	cmp	r7, #120	; 0x78
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	469a      	mov	sl, r3
 800b4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b6:	d807      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4b8:	2f62      	cmp	r7, #98	; 0x62
 800b4ba:	d80a      	bhi.n	800b4d2 <_printf_i+0x32>
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	f000 80d8 	beq.w	800b672 <_printf_i+0x1d2>
 800b4c2:	2f58      	cmp	r7, #88	; 0x58
 800b4c4:	f000 80a3 	beq.w	800b60e <_printf_i+0x16e>
 800b4c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d0:	e03a      	b.n	800b548 <_printf_i+0xa8>
 800b4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4d6:	2b15      	cmp	r3, #21
 800b4d8:	d8f6      	bhi.n	800b4c8 <_printf_i+0x28>
 800b4da:	a001      	add	r0, pc, #4	; (adr r0, 800b4e0 <_printf_i+0x40>)
 800b4dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4e0:	0800b539 	.word	0x0800b539
 800b4e4:	0800b54d 	.word	0x0800b54d
 800b4e8:	0800b4c9 	.word	0x0800b4c9
 800b4ec:	0800b4c9 	.word	0x0800b4c9
 800b4f0:	0800b4c9 	.word	0x0800b4c9
 800b4f4:	0800b4c9 	.word	0x0800b4c9
 800b4f8:	0800b54d 	.word	0x0800b54d
 800b4fc:	0800b4c9 	.word	0x0800b4c9
 800b500:	0800b4c9 	.word	0x0800b4c9
 800b504:	0800b4c9 	.word	0x0800b4c9
 800b508:	0800b4c9 	.word	0x0800b4c9
 800b50c:	0800b659 	.word	0x0800b659
 800b510:	0800b57d 	.word	0x0800b57d
 800b514:	0800b63b 	.word	0x0800b63b
 800b518:	0800b4c9 	.word	0x0800b4c9
 800b51c:	0800b4c9 	.word	0x0800b4c9
 800b520:	0800b67b 	.word	0x0800b67b
 800b524:	0800b4c9 	.word	0x0800b4c9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4c9 	.word	0x0800b4c9
 800b530:	0800b4c9 	.word	0x0800b4c9
 800b534:	0800b643 	.word	0x0800b643
 800b538:	680b      	ldr	r3, [r1, #0]
 800b53a:	1d1a      	adds	r2, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	600a      	str	r2, [r1, #0]
 800b540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b548:	2301      	movs	r3, #1
 800b54a:	e0a3      	b.n	800b694 <_printf_i+0x1f4>
 800b54c:	6825      	ldr	r5, [r4, #0]
 800b54e:	6808      	ldr	r0, [r1, #0]
 800b550:	062e      	lsls	r6, r5, #24
 800b552:	f100 0304 	add.w	r3, r0, #4
 800b556:	d50a      	bpl.n	800b56e <_printf_i+0xce>
 800b558:	6805      	ldr	r5, [r0, #0]
 800b55a:	600b      	str	r3, [r1, #0]
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	da03      	bge.n	800b568 <_printf_i+0xc8>
 800b560:	232d      	movs	r3, #45	; 0x2d
 800b562:	426d      	negs	r5, r5
 800b564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b568:	485e      	ldr	r0, [pc, #376]	; (800b6e4 <_printf_i+0x244>)
 800b56a:	230a      	movs	r3, #10
 800b56c:	e019      	b.n	800b5a2 <_printf_i+0x102>
 800b56e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b572:	6805      	ldr	r5, [r0, #0]
 800b574:	600b      	str	r3, [r1, #0]
 800b576:	bf18      	it	ne
 800b578:	b22d      	sxthne	r5, r5
 800b57a:	e7ef      	b.n	800b55c <_printf_i+0xbc>
 800b57c:	680b      	ldr	r3, [r1, #0]
 800b57e:	6825      	ldr	r5, [r4, #0]
 800b580:	1d18      	adds	r0, r3, #4
 800b582:	6008      	str	r0, [r1, #0]
 800b584:	0628      	lsls	r0, r5, #24
 800b586:	d501      	bpl.n	800b58c <_printf_i+0xec>
 800b588:	681d      	ldr	r5, [r3, #0]
 800b58a:	e002      	b.n	800b592 <_printf_i+0xf2>
 800b58c:	0669      	lsls	r1, r5, #25
 800b58e:	d5fb      	bpl.n	800b588 <_printf_i+0xe8>
 800b590:	881d      	ldrh	r5, [r3, #0]
 800b592:	4854      	ldr	r0, [pc, #336]	; (800b6e4 <_printf_i+0x244>)
 800b594:	2f6f      	cmp	r7, #111	; 0x6f
 800b596:	bf0c      	ite	eq
 800b598:	2308      	moveq	r3, #8
 800b59a:	230a      	movne	r3, #10
 800b59c:	2100      	movs	r1, #0
 800b59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5a2:	6866      	ldr	r6, [r4, #4]
 800b5a4:	60a6      	str	r6, [r4, #8]
 800b5a6:	2e00      	cmp	r6, #0
 800b5a8:	bfa2      	ittt	ge
 800b5aa:	6821      	ldrge	r1, [r4, #0]
 800b5ac:	f021 0104 	bicge.w	r1, r1, #4
 800b5b0:	6021      	strge	r1, [r4, #0]
 800b5b2:	b90d      	cbnz	r5, 800b5b8 <_printf_i+0x118>
 800b5b4:	2e00      	cmp	r6, #0
 800b5b6:	d04d      	beq.n	800b654 <_printf_i+0x1b4>
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5be:	fb03 5711 	mls	r7, r3, r1, r5
 800b5c2:	5dc7      	ldrb	r7, [r0, r7]
 800b5c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5c8:	462f      	mov	r7, r5
 800b5ca:	42bb      	cmp	r3, r7
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	d9f4      	bls.n	800b5ba <_printf_i+0x11a>
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d10b      	bne.n	800b5ec <_printf_i+0x14c>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	07df      	lsls	r7, r3, #31
 800b5d8:	d508      	bpl.n	800b5ec <_printf_i+0x14c>
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	6861      	ldr	r1, [r4, #4]
 800b5de:	4299      	cmp	r1, r3
 800b5e0:	bfde      	ittt	le
 800b5e2:	2330      	movle	r3, #48	; 0x30
 800b5e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5ec:	1b92      	subs	r2, r2, r6
 800b5ee:	6122      	str	r2, [r4, #16]
 800b5f0:	f8cd a000 	str.w	sl, [sp]
 800b5f4:	464b      	mov	r3, r9
 800b5f6:	aa03      	add	r2, sp, #12
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f7ff fee2 	bl	800b3c4 <_printf_common>
 800b600:	3001      	adds	r0, #1
 800b602:	d14c      	bne.n	800b69e <_printf_i+0x1fe>
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	b004      	add	sp, #16
 800b60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60e:	4835      	ldr	r0, [pc, #212]	; (800b6e4 <_printf_i+0x244>)
 800b610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	680e      	ldr	r6, [r1, #0]
 800b618:	061f      	lsls	r7, r3, #24
 800b61a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b61e:	600e      	str	r6, [r1, #0]
 800b620:	d514      	bpl.n	800b64c <_printf_i+0x1ac>
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	bf44      	itt	mi
 800b626:	f043 0320 	orrmi.w	r3, r3, #32
 800b62a:	6023      	strmi	r3, [r4, #0]
 800b62c:	b91d      	cbnz	r5, 800b636 <_printf_i+0x196>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	f023 0320 	bic.w	r3, r3, #32
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	2310      	movs	r3, #16
 800b638:	e7b0      	b.n	800b59c <_printf_i+0xfc>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f043 0320 	orr.w	r3, r3, #32
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	2378      	movs	r3, #120	; 0x78
 800b644:	4828      	ldr	r0, [pc, #160]	; (800b6e8 <_printf_i+0x248>)
 800b646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b64a:	e7e3      	b.n	800b614 <_printf_i+0x174>
 800b64c:	065e      	lsls	r6, r3, #25
 800b64e:	bf48      	it	mi
 800b650:	b2ad      	uxthmi	r5, r5
 800b652:	e7e6      	b.n	800b622 <_printf_i+0x182>
 800b654:	4616      	mov	r6, r2
 800b656:	e7bb      	b.n	800b5d0 <_printf_i+0x130>
 800b658:	680b      	ldr	r3, [r1, #0]
 800b65a:	6826      	ldr	r6, [r4, #0]
 800b65c:	6960      	ldr	r0, [r4, #20]
 800b65e:	1d1d      	adds	r5, r3, #4
 800b660:	600d      	str	r5, [r1, #0]
 800b662:	0635      	lsls	r5, r6, #24
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	d501      	bpl.n	800b66c <_printf_i+0x1cc>
 800b668:	6018      	str	r0, [r3, #0]
 800b66a:	e002      	b.n	800b672 <_printf_i+0x1d2>
 800b66c:	0671      	lsls	r1, r6, #25
 800b66e:	d5fb      	bpl.n	800b668 <_printf_i+0x1c8>
 800b670:	8018      	strh	r0, [r3, #0]
 800b672:	2300      	movs	r3, #0
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	4616      	mov	r6, r2
 800b678:	e7ba      	b.n	800b5f0 <_printf_i+0x150>
 800b67a:	680b      	ldr	r3, [r1, #0]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	600a      	str	r2, [r1, #0]
 800b680:	681e      	ldr	r6, [r3, #0]
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	2100      	movs	r1, #0
 800b686:	4630      	mov	r0, r6
 800b688:	f7f4 fdaa 	bl	80001e0 <memchr>
 800b68c:	b108      	cbz	r0, 800b692 <_printf_i+0x1f2>
 800b68e:	1b80      	subs	r0, r0, r6
 800b690:	6060      	str	r0, [r4, #4]
 800b692:	6863      	ldr	r3, [r4, #4]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	2300      	movs	r3, #0
 800b698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69c:	e7a8      	b.n	800b5f0 <_printf_i+0x150>
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	47d0      	blx	sl
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d0ab      	beq.n	800b604 <_printf_i+0x164>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	079b      	lsls	r3, r3, #30
 800b6b0:	d413      	bmi.n	800b6da <_printf_i+0x23a>
 800b6b2:	68e0      	ldr	r0, [r4, #12]
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	4298      	cmp	r0, r3
 800b6b8:	bfb8      	it	lt
 800b6ba:	4618      	movlt	r0, r3
 800b6bc:	e7a4      	b.n	800b608 <_printf_i+0x168>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	47d0      	blx	sl
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d09b      	beq.n	800b604 <_printf_i+0x164>
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	9903      	ldr	r1, [sp, #12]
 800b6d2:	1a5b      	subs	r3, r3, r1
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dcf2      	bgt.n	800b6be <_printf_i+0x21e>
 800b6d8:	e7eb      	b.n	800b6b2 <_printf_i+0x212>
 800b6da:	2500      	movs	r5, #0
 800b6dc:	f104 0619 	add.w	r6, r4, #25
 800b6e0:	e7f5      	b.n	800b6ce <_printf_i+0x22e>
 800b6e2:	bf00      	nop
 800b6e4:	0800d5d9 	.word	0x0800d5d9
 800b6e8:	0800d5ea 	.word	0x0800d5ea

0800b6ec <__sread>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	f000 fa60 	bl	800bbb8 <_read_r>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	bfab      	itete	ge
 800b6fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b700:	181b      	addge	r3, r3, r0
 800b702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b706:	bfac      	ite	ge
 800b708:	6563      	strge	r3, [r4, #84]	; 0x54
 800b70a:	81a3      	strhlt	r3, [r4, #12]
 800b70c:	bd10      	pop	{r4, pc}

0800b70e <__swrite>:
 800b70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	461f      	mov	r7, r3
 800b714:	898b      	ldrh	r3, [r1, #12]
 800b716:	05db      	lsls	r3, r3, #23
 800b718:	4605      	mov	r5, r0
 800b71a:	460c      	mov	r4, r1
 800b71c:	4616      	mov	r6, r2
 800b71e:	d505      	bpl.n	800b72c <__swrite+0x1e>
 800b720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b724:	2302      	movs	r3, #2
 800b726:	2200      	movs	r2, #0
 800b728:	f000 f9d0 	bl	800bacc <_lseek_r>
 800b72c:	89a3      	ldrh	r3, [r4, #12]
 800b72e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	4632      	mov	r2, r6
 800b73a:	463b      	mov	r3, r7
 800b73c:	4628      	mov	r0, r5
 800b73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	f000 b869 	b.w	800b818 <_write_r>

0800b746 <__sseek>:
 800b746:	b510      	push	{r4, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74e:	f000 f9bd 	bl	800bacc <_lseek_r>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	bf15      	itete	ne
 800b758:	6560      	strne	r0, [r4, #84]	; 0x54
 800b75a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b75e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b762:	81a3      	strheq	r3, [r4, #12]
 800b764:	bf18      	it	ne
 800b766:	81a3      	strhne	r3, [r4, #12]
 800b768:	bd10      	pop	{r4, pc}

0800b76a <__sclose>:
 800b76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76e:	f000 b8db 	b.w	800b928 <_close_r>
	...

0800b774 <__swbuf_r>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	460e      	mov	r6, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	4605      	mov	r5, r0
 800b77c:	b118      	cbz	r0, 800b786 <__swbuf_r+0x12>
 800b77e:	6983      	ldr	r3, [r0, #24]
 800b780:	b90b      	cbnz	r3, 800b786 <__swbuf_r+0x12>
 800b782:	f7ff fc07 	bl	800af94 <__sinit>
 800b786:	4b21      	ldr	r3, [pc, #132]	; (800b80c <__swbuf_r+0x98>)
 800b788:	429c      	cmp	r4, r3
 800b78a:	d12b      	bne.n	800b7e4 <__swbuf_r+0x70>
 800b78c:	686c      	ldr	r4, [r5, #4]
 800b78e:	69a3      	ldr	r3, [r4, #24]
 800b790:	60a3      	str	r3, [r4, #8]
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	071a      	lsls	r2, r3, #28
 800b796:	d52f      	bpl.n	800b7f8 <__swbuf_r+0x84>
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	b36b      	cbz	r3, 800b7f8 <__swbuf_r+0x84>
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	1ac0      	subs	r0, r0, r3
 800b7a2:	6963      	ldr	r3, [r4, #20]
 800b7a4:	b2f6      	uxtb	r6, r6
 800b7a6:	4283      	cmp	r3, r0
 800b7a8:	4637      	mov	r7, r6
 800b7aa:	dc04      	bgt.n	800b7b6 <__swbuf_r+0x42>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f000 f950 	bl	800ba54 <_fflush_r>
 800b7b4:	bb30      	cbnz	r0, 800b804 <__swbuf_r+0x90>
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	60a3      	str	r3, [r4, #8]
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	6022      	str	r2, [r4, #0]
 800b7c2:	701e      	strb	r6, [r3, #0]
 800b7c4:	6963      	ldr	r3, [r4, #20]
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	4283      	cmp	r3, r0
 800b7ca:	d004      	beq.n	800b7d6 <__swbuf_r+0x62>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	07db      	lsls	r3, r3, #31
 800b7d0:	d506      	bpl.n	800b7e0 <__swbuf_r+0x6c>
 800b7d2:	2e0a      	cmp	r6, #10
 800b7d4:	d104      	bne.n	800b7e0 <__swbuf_r+0x6c>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f000 f93b 	bl	800ba54 <_fflush_r>
 800b7de:	b988      	cbnz	r0, 800b804 <__swbuf_r+0x90>
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <__swbuf_r+0x9c>)
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d101      	bne.n	800b7ee <__swbuf_r+0x7a>
 800b7ea:	68ac      	ldr	r4, [r5, #8]
 800b7ec:	e7cf      	b.n	800b78e <__swbuf_r+0x1a>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <__swbuf_r+0xa0>)
 800b7f0:	429c      	cmp	r4, r3
 800b7f2:	bf08      	it	eq
 800b7f4:	68ec      	ldreq	r4, [r5, #12]
 800b7f6:	e7ca      	b.n	800b78e <__swbuf_r+0x1a>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f81e 	bl	800b83c <__swsetup_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	d0cb      	beq.n	800b79c <__swbuf_r+0x28>
 800b804:	f04f 37ff 	mov.w	r7, #4294967295
 800b808:	e7ea      	b.n	800b7e0 <__swbuf_r+0x6c>
 800b80a:	bf00      	nop
 800b80c:	0800d588 	.word	0x0800d588
 800b810:	0800d5a8 	.word	0x0800d5a8
 800b814:	0800d568 	.word	0x0800d568

0800b818 <_write_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d07      	ldr	r5, [pc, #28]	; (800b838 <_write_r+0x20>)
 800b81c:	4604      	mov	r4, r0
 800b81e:	4608      	mov	r0, r1
 800b820:	4611      	mov	r1, r2
 800b822:	2200      	movs	r2, #0
 800b824:	602a      	str	r2, [r5, #0]
 800b826:	461a      	mov	r2, r3
 800b828:	f7f6 fa3d 	bl	8001ca6 <_write>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_write_r+0x1e>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_write_r+0x1e>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	200085e4 	.word	0x200085e4

0800b83c <__swsetup_r>:
 800b83c:	4b32      	ldr	r3, [pc, #200]	; (800b908 <__swsetup_r+0xcc>)
 800b83e:	b570      	push	{r4, r5, r6, lr}
 800b840:	681d      	ldr	r5, [r3, #0]
 800b842:	4606      	mov	r6, r0
 800b844:	460c      	mov	r4, r1
 800b846:	b125      	cbz	r5, 800b852 <__swsetup_r+0x16>
 800b848:	69ab      	ldr	r3, [r5, #24]
 800b84a:	b913      	cbnz	r3, 800b852 <__swsetup_r+0x16>
 800b84c:	4628      	mov	r0, r5
 800b84e:	f7ff fba1 	bl	800af94 <__sinit>
 800b852:	4b2e      	ldr	r3, [pc, #184]	; (800b90c <__swsetup_r+0xd0>)
 800b854:	429c      	cmp	r4, r3
 800b856:	d10f      	bne.n	800b878 <__swsetup_r+0x3c>
 800b858:	686c      	ldr	r4, [r5, #4]
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b860:	0719      	lsls	r1, r3, #28
 800b862:	d42c      	bmi.n	800b8be <__swsetup_r+0x82>
 800b864:	06dd      	lsls	r5, r3, #27
 800b866:	d411      	bmi.n	800b88c <__swsetup_r+0x50>
 800b868:	2309      	movs	r3, #9
 800b86a:	6033      	str	r3, [r6, #0]
 800b86c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	f04f 30ff 	mov.w	r0, #4294967295
 800b876:	e03e      	b.n	800b8f6 <__swsetup_r+0xba>
 800b878:	4b25      	ldr	r3, [pc, #148]	; (800b910 <__swsetup_r+0xd4>)
 800b87a:	429c      	cmp	r4, r3
 800b87c:	d101      	bne.n	800b882 <__swsetup_r+0x46>
 800b87e:	68ac      	ldr	r4, [r5, #8]
 800b880:	e7eb      	b.n	800b85a <__swsetup_r+0x1e>
 800b882:	4b24      	ldr	r3, [pc, #144]	; (800b914 <__swsetup_r+0xd8>)
 800b884:	429c      	cmp	r4, r3
 800b886:	bf08      	it	eq
 800b888:	68ec      	ldreq	r4, [r5, #12]
 800b88a:	e7e6      	b.n	800b85a <__swsetup_r+0x1e>
 800b88c:	0758      	lsls	r0, r3, #29
 800b88e:	d512      	bpl.n	800b8b6 <__swsetup_r+0x7a>
 800b890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b892:	b141      	cbz	r1, 800b8a6 <__swsetup_r+0x6a>
 800b894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b898:	4299      	cmp	r1, r3
 800b89a:	d002      	beq.n	800b8a2 <__swsetup_r+0x66>
 800b89c:	4630      	mov	r0, r6
 800b89e:	f7ff f9f1 	bl	800ac84 <_free_r>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6363      	str	r3, [r4, #52]	; 0x34
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f043 0308 	orr.w	r3, r3, #8
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	b94b      	cbnz	r3, 800b8d6 <__swsetup_r+0x9a>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8cc:	d003      	beq.n	800b8d6 <__swsetup_r+0x9a>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f000 f931 	bl	800bb38 <__smakebuf_r>
 800b8d6:	89a0      	ldrh	r0, [r4, #12]
 800b8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8dc:	f010 0301 	ands.w	r3, r0, #1
 800b8e0:	d00a      	beq.n	800b8f8 <__swsetup_r+0xbc>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60a3      	str	r3, [r4, #8]
 800b8e6:	6963      	ldr	r3, [r4, #20]
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	61a3      	str	r3, [r4, #24]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	b943      	cbnz	r3, 800b902 <__swsetup_r+0xc6>
 800b8f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8f4:	d1ba      	bne.n	800b86c <__swsetup_r+0x30>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	0781      	lsls	r1, r0, #30
 800b8fa:	bf58      	it	pl
 800b8fc:	6963      	ldrpl	r3, [r4, #20]
 800b8fe:	60a3      	str	r3, [r4, #8]
 800b900:	e7f4      	b.n	800b8ec <__swsetup_r+0xb0>
 800b902:	2000      	movs	r0, #0
 800b904:	e7f7      	b.n	800b8f6 <__swsetup_r+0xba>
 800b906:	bf00      	nop
 800b908:	2000000c 	.word	0x2000000c
 800b90c:	0800d588 	.word	0x0800d588
 800b910:	0800d5a8 	.word	0x0800d5a8
 800b914:	0800d568 	.word	0x0800d568

0800b918 <abort>:
 800b918:	b508      	push	{r3, lr}
 800b91a:	2006      	movs	r0, #6
 800b91c:	f000 f986 	bl	800bc2c <raise>
 800b920:	2001      	movs	r0, #1
 800b922:	f7f6 f999 	bl	8001c58 <_exit>
	...

0800b928 <_close_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	; (800b944 <_close_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f6 f9d3 	bl	8001cde <_close>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_close_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_close_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	200085e4 	.word	0x200085e4

0800b948 <__sflush_r>:
 800b948:	898a      	ldrh	r2, [r1, #12]
 800b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94e:	4605      	mov	r5, r0
 800b950:	0710      	lsls	r0, r2, #28
 800b952:	460c      	mov	r4, r1
 800b954:	d458      	bmi.n	800ba08 <__sflush_r+0xc0>
 800b956:	684b      	ldr	r3, [r1, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dc05      	bgt.n	800b968 <__sflush_r+0x20>
 800b95c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dc02      	bgt.n	800b968 <__sflush_r+0x20>
 800b962:	2000      	movs	r0, #0
 800b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	d0f9      	beq.n	800b962 <__sflush_r+0x1a>
 800b96e:	2300      	movs	r3, #0
 800b970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b974:	682f      	ldr	r7, [r5, #0]
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	d032      	beq.n	800b9e0 <__sflush_r+0x98>
 800b97a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	075a      	lsls	r2, r3, #29
 800b980:	d505      	bpl.n	800b98e <__sflush_r+0x46>
 800b982:	6863      	ldr	r3, [r4, #4]
 800b984:	1ac0      	subs	r0, r0, r3
 800b986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b988:	b10b      	cbz	r3, 800b98e <__sflush_r+0x46>
 800b98a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b98c:	1ac0      	subs	r0, r0, r3
 800b98e:	2300      	movs	r3, #0
 800b990:	4602      	mov	r2, r0
 800b992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b994:	6a21      	ldr	r1, [r4, #32]
 800b996:	4628      	mov	r0, r5
 800b998:	47b0      	blx	r6
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	d106      	bne.n	800b9ae <__sflush_r+0x66>
 800b9a0:	6829      	ldr	r1, [r5, #0]
 800b9a2:	291d      	cmp	r1, #29
 800b9a4:	d82c      	bhi.n	800ba00 <__sflush_r+0xb8>
 800b9a6:	4a2a      	ldr	r2, [pc, #168]	; (800ba50 <__sflush_r+0x108>)
 800b9a8:	40ca      	lsrs	r2, r1
 800b9aa:	07d6      	lsls	r6, r2, #31
 800b9ac:	d528      	bpl.n	800ba00 <__sflush_r+0xb8>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	6062      	str	r2, [r4, #4]
 800b9b2:	04d9      	lsls	r1, r3, #19
 800b9b4:	6922      	ldr	r2, [r4, #16]
 800b9b6:	6022      	str	r2, [r4, #0]
 800b9b8:	d504      	bpl.n	800b9c4 <__sflush_r+0x7c>
 800b9ba:	1c42      	adds	r2, r0, #1
 800b9bc:	d101      	bne.n	800b9c2 <__sflush_r+0x7a>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	b903      	cbnz	r3, 800b9c4 <__sflush_r+0x7c>
 800b9c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9c6:	602f      	str	r7, [r5, #0]
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	d0ca      	beq.n	800b962 <__sflush_r+0x1a>
 800b9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9d0:	4299      	cmp	r1, r3
 800b9d2:	d002      	beq.n	800b9da <__sflush_r+0x92>
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f7ff f955 	bl	800ac84 <_free_r>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b9de:	e7c1      	b.n	800b964 <__sflush_r+0x1c>
 800b9e0:	6a21      	ldr	r1, [r4, #32]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	47b0      	blx	r6
 800b9e8:	1c41      	adds	r1, r0, #1
 800b9ea:	d1c7      	bne.n	800b97c <__sflush_r+0x34>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d0c4      	beq.n	800b97c <__sflush_r+0x34>
 800b9f2:	2b1d      	cmp	r3, #29
 800b9f4:	d001      	beq.n	800b9fa <__sflush_r+0xb2>
 800b9f6:	2b16      	cmp	r3, #22
 800b9f8:	d101      	bne.n	800b9fe <__sflush_r+0xb6>
 800b9fa:	602f      	str	r7, [r5, #0]
 800b9fc:	e7b1      	b.n	800b962 <__sflush_r+0x1a>
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba04:	81a3      	strh	r3, [r4, #12]
 800ba06:	e7ad      	b.n	800b964 <__sflush_r+0x1c>
 800ba08:	690f      	ldr	r7, [r1, #16]
 800ba0a:	2f00      	cmp	r7, #0
 800ba0c:	d0a9      	beq.n	800b962 <__sflush_r+0x1a>
 800ba0e:	0793      	lsls	r3, r2, #30
 800ba10:	680e      	ldr	r6, [r1, #0]
 800ba12:	bf08      	it	eq
 800ba14:	694b      	ldreq	r3, [r1, #20]
 800ba16:	600f      	str	r7, [r1, #0]
 800ba18:	bf18      	it	ne
 800ba1a:	2300      	movne	r3, #0
 800ba1c:	eba6 0807 	sub.w	r8, r6, r7
 800ba20:	608b      	str	r3, [r1, #8]
 800ba22:	f1b8 0f00 	cmp.w	r8, #0
 800ba26:	dd9c      	ble.n	800b962 <__sflush_r+0x1a>
 800ba28:	6a21      	ldr	r1, [r4, #32]
 800ba2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba2c:	4643      	mov	r3, r8
 800ba2e:	463a      	mov	r2, r7
 800ba30:	4628      	mov	r0, r5
 800ba32:	47b0      	blx	r6
 800ba34:	2800      	cmp	r0, #0
 800ba36:	dc06      	bgt.n	800ba46 <__sflush_r+0xfe>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba3e:	81a3      	strh	r3, [r4, #12]
 800ba40:	f04f 30ff 	mov.w	r0, #4294967295
 800ba44:	e78e      	b.n	800b964 <__sflush_r+0x1c>
 800ba46:	4407      	add	r7, r0
 800ba48:	eba8 0800 	sub.w	r8, r8, r0
 800ba4c:	e7e9      	b.n	800ba22 <__sflush_r+0xda>
 800ba4e:	bf00      	nop
 800ba50:	20400001 	.word	0x20400001

0800ba54 <_fflush_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	690b      	ldr	r3, [r1, #16]
 800ba58:	4605      	mov	r5, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	b913      	cbnz	r3, 800ba64 <_fflush_r+0x10>
 800ba5e:	2500      	movs	r5, #0
 800ba60:	4628      	mov	r0, r5
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	b118      	cbz	r0, 800ba6e <_fflush_r+0x1a>
 800ba66:	6983      	ldr	r3, [r0, #24]
 800ba68:	b90b      	cbnz	r3, 800ba6e <_fflush_r+0x1a>
 800ba6a:	f7ff fa93 	bl	800af94 <__sinit>
 800ba6e:	4b14      	ldr	r3, [pc, #80]	; (800bac0 <_fflush_r+0x6c>)
 800ba70:	429c      	cmp	r4, r3
 800ba72:	d11b      	bne.n	800baac <_fflush_r+0x58>
 800ba74:	686c      	ldr	r4, [r5, #4]
 800ba76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0ef      	beq.n	800ba5e <_fflush_r+0xa>
 800ba7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba80:	07d0      	lsls	r0, r2, #31
 800ba82:	d404      	bmi.n	800ba8e <_fflush_r+0x3a>
 800ba84:	0599      	lsls	r1, r3, #22
 800ba86:	d402      	bmi.n	800ba8e <_fflush_r+0x3a>
 800ba88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba8a:	f7ff fb33 	bl	800b0f4 <__retarget_lock_acquire_recursive>
 800ba8e:	4628      	mov	r0, r5
 800ba90:	4621      	mov	r1, r4
 800ba92:	f7ff ff59 	bl	800b948 <__sflush_r>
 800ba96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba98:	07da      	lsls	r2, r3, #31
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	d4e0      	bmi.n	800ba60 <_fflush_r+0xc>
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	059b      	lsls	r3, r3, #22
 800baa2:	d4dd      	bmi.n	800ba60 <_fflush_r+0xc>
 800baa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baa6:	f7ff fb26 	bl	800b0f6 <__retarget_lock_release_recursive>
 800baaa:	e7d9      	b.n	800ba60 <_fflush_r+0xc>
 800baac:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <_fflush_r+0x70>)
 800baae:	429c      	cmp	r4, r3
 800bab0:	d101      	bne.n	800bab6 <_fflush_r+0x62>
 800bab2:	68ac      	ldr	r4, [r5, #8]
 800bab4:	e7df      	b.n	800ba76 <_fflush_r+0x22>
 800bab6:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <_fflush_r+0x74>)
 800bab8:	429c      	cmp	r4, r3
 800baba:	bf08      	it	eq
 800babc:	68ec      	ldreq	r4, [r5, #12]
 800babe:	e7da      	b.n	800ba76 <_fflush_r+0x22>
 800bac0:	0800d588 	.word	0x0800d588
 800bac4:	0800d5a8 	.word	0x0800d5a8
 800bac8:	0800d568 	.word	0x0800d568

0800bacc <_lseek_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	; (800baec <_lseek_r+0x20>)
 800bad0:	4604      	mov	r4, r0
 800bad2:	4608      	mov	r0, r1
 800bad4:	4611      	mov	r1, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7f6 f926 	bl	8001d2c <_lseek>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_lseek_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_lseek_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	200085e4 	.word	0x200085e4

0800baf0 <__swhatbuf_r>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	460e      	mov	r6, r1
 800baf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf8:	2900      	cmp	r1, #0
 800bafa:	b096      	sub	sp, #88	; 0x58
 800bafc:	4614      	mov	r4, r2
 800bafe:	461d      	mov	r5, r3
 800bb00:	da07      	bge.n	800bb12 <__swhatbuf_r+0x22>
 800bb02:	2300      	movs	r3, #0
 800bb04:	602b      	str	r3, [r5, #0]
 800bb06:	89b3      	ldrh	r3, [r6, #12]
 800bb08:	061a      	lsls	r2, r3, #24
 800bb0a:	d410      	bmi.n	800bb2e <__swhatbuf_r+0x3e>
 800bb0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb10:	e00e      	b.n	800bb30 <__swhatbuf_r+0x40>
 800bb12:	466a      	mov	r2, sp
 800bb14:	f000 f8a6 	bl	800bc64 <_fstat_r>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	dbf2      	blt.n	800bb02 <__swhatbuf_r+0x12>
 800bb1c:	9a01      	ldr	r2, [sp, #4]
 800bb1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb26:	425a      	negs	r2, r3
 800bb28:	415a      	adcs	r2, r3
 800bb2a:	602a      	str	r2, [r5, #0]
 800bb2c:	e7ee      	b.n	800bb0c <__swhatbuf_r+0x1c>
 800bb2e:	2340      	movs	r3, #64	; 0x40
 800bb30:	2000      	movs	r0, #0
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	b016      	add	sp, #88	; 0x58
 800bb36:	bd70      	pop	{r4, r5, r6, pc}

0800bb38 <__smakebuf_r>:
 800bb38:	898b      	ldrh	r3, [r1, #12]
 800bb3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb3c:	079d      	lsls	r5, r3, #30
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460c      	mov	r4, r1
 800bb42:	d507      	bpl.n	800bb54 <__smakebuf_r+0x1c>
 800bb44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	6163      	str	r3, [r4, #20]
 800bb50:	b002      	add	sp, #8
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	ab01      	add	r3, sp, #4
 800bb56:	466a      	mov	r2, sp
 800bb58:	f7ff ffca 	bl	800baf0 <__swhatbuf_r>
 800bb5c:	9900      	ldr	r1, [sp, #0]
 800bb5e:	4605      	mov	r5, r0
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff f8df 	bl	800ad24 <_malloc_r>
 800bb66:	b948      	cbnz	r0, 800bb7c <__smakebuf_r+0x44>
 800bb68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6c:	059a      	lsls	r2, r3, #22
 800bb6e:	d4ef      	bmi.n	800bb50 <__smakebuf_r+0x18>
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	f043 0302 	orr.w	r3, r3, #2
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	e7e3      	b.n	800bb44 <__smakebuf_r+0xc>
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <__smakebuf_r+0x7c>)
 800bb7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	6020      	str	r0, [r4, #0]
 800bb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	9b00      	ldr	r3, [sp, #0]
 800bb8c:	6163      	str	r3, [r4, #20]
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	6120      	str	r0, [r4, #16]
 800bb92:	b15b      	cbz	r3, 800bbac <__smakebuf_r+0x74>
 800bb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f000 f875 	bl	800bc88 <_isatty_r>
 800bb9e:	b128      	cbz	r0, 800bbac <__smakebuf_r+0x74>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	f023 0303 	bic.w	r3, r3, #3
 800bba6:	f043 0301 	orr.w	r3, r3, #1
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	89a0      	ldrh	r0, [r4, #12]
 800bbae:	4305      	orrs	r5, r0
 800bbb0:	81a5      	strh	r5, [r4, #12]
 800bbb2:	e7cd      	b.n	800bb50 <__smakebuf_r+0x18>
 800bbb4:	0800af2d 	.word	0x0800af2d

0800bbb8 <_read_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	; (800bbd8 <_read_r+0x20>)
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f6 f850 	bl	8001c6c <_read>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_read_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_read_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	200085e4 	.word	0x200085e4

0800bbdc <_raise_r>:
 800bbdc:	291f      	cmp	r1, #31
 800bbde:	b538      	push	{r3, r4, r5, lr}
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	d904      	bls.n	800bbf0 <_raise_r+0x14>
 800bbe6:	2316      	movs	r3, #22
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295
 800bbee:	bd38      	pop	{r3, r4, r5, pc}
 800bbf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbf2:	b112      	cbz	r2, 800bbfa <_raise_r+0x1e>
 800bbf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbf8:	b94b      	cbnz	r3, 800bc0e <_raise_r+0x32>
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f830 	bl	800bc60 <_getpid_r>
 800bc00:	462a      	mov	r2, r5
 800bc02:	4601      	mov	r1, r0
 800bc04:	4620      	mov	r0, r4
 800bc06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc0a:	f000 b817 	b.w	800bc3c <_kill_r>
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d00a      	beq.n	800bc28 <_raise_r+0x4c>
 800bc12:	1c59      	adds	r1, r3, #1
 800bc14:	d103      	bne.n	800bc1e <_raise_r+0x42>
 800bc16:	2316      	movs	r3, #22
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	e7e7      	b.n	800bbee <_raise_r+0x12>
 800bc1e:	2400      	movs	r4, #0
 800bc20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc24:	4628      	mov	r0, r5
 800bc26:	4798      	blx	r3
 800bc28:	2000      	movs	r0, #0
 800bc2a:	e7e0      	b.n	800bbee <_raise_r+0x12>

0800bc2c <raise>:
 800bc2c:	4b02      	ldr	r3, [pc, #8]	; (800bc38 <raise+0xc>)
 800bc2e:	4601      	mov	r1, r0
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	f7ff bfd3 	b.w	800bbdc <_raise_r>
 800bc36:	bf00      	nop
 800bc38:	2000000c 	.word	0x2000000c

0800bc3c <_kill_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d07      	ldr	r5, [pc, #28]	; (800bc5c <_kill_r+0x20>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	f7f5 fff3 	bl	8001c34 <_kill>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d102      	bne.n	800bc58 <_kill_r+0x1c>
 800bc52:	682b      	ldr	r3, [r5, #0]
 800bc54:	b103      	cbz	r3, 800bc58 <_kill_r+0x1c>
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200085e4 	.word	0x200085e4

0800bc60 <_getpid_r>:
 800bc60:	f7f5 bfe0 	b.w	8001c24 <_getpid>

0800bc64 <_fstat_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_fstat_r+0x20>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	602b      	str	r3, [r5, #0]
 800bc72:	f7f6 f840 	bl	8001cf6 <_fstat>
 800bc76:	1c43      	adds	r3, r0, #1
 800bc78:	d102      	bne.n	800bc80 <_fstat_r+0x1c>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	b103      	cbz	r3, 800bc80 <_fstat_r+0x1c>
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	bd38      	pop	{r3, r4, r5, pc}
 800bc82:	bf00      	nop
 800bc84:	200085e4 	.word	0x200085e4

0800bc88 <_isatty_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_isatty_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f6 f83f 	bl	8001d16 <_isatty>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_isatty_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_isatty_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	200085e4 	.word	0x200085e4

0800bca8 <_init>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	bf00      	nop
 800bcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcae:	bc08      	pop	{r3}
 800bcb0:	469e      	mov	lr, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <_fini>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr
